
SimpleCalculator.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002e16  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000016  00800060  00002e16  00002eaa  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000009  00800076  00800076  00002ec0  2**0
                  ALLOC
  3 .stab         000020dc  00000000  00000000  00002ec0  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000d5b  00000000  00000000  00004f9c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000140  00000000  00000000  00005cf7  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000170  00000000  00000000  00005e37  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001c49  00000000  00000000  00005fa7  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000eeb  00000000  00000000  00007bf0  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000dad  00000000  00000000  00008adb  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000160  00000000  00000000  00009888  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000028d  00000000  00000000  000099e8  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000007ce  00000000  00000000  00009c75  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000a443  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d4 e0       	ldi	r29, 0x04	; 4
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e6 e1       	ldi	r30, 0x16	; 22
      68:	fe e2       	ldi	r31, 0x2E	; 46
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a6 37       	cpi	r26, 0x76	; 118
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	10 e0       	ldi	r17, 0x00	; 0
      78:	a6 e7       	ldi	r26, 0x76	; 118
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	af 37       	cpi	r26, 0x7F	; 127
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 b8 05 	call	0xb70	; 0xb70 <main>
      8a:	0c 94 09 17 	jmp	0x2e12	; 0x2e12 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 49 03 	call	0x692	; 0x692 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 a1 16 	jmp	0x2d42	; 0x2d42 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	ae e6       	ldi	r26, 0x6E	; 110
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 bd 16 	jmp	0x2d7a	; 0x2d7a <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 ad 16 	jmp	0x2d5a	; 0x2d5a <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 c9 16 	jmp	0x2d92	; 0x2d92 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 ad 16 	jmp	0x2d5a	; 0x2d5a <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 c9 16 	jmp	0x2d92	; 0x2d92 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 a1 16 	jmp	0x2d42	; 0x2d42 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__stack+0x3f>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__stack+0x55>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__stack+0x2d>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__stack+0x3f>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__stack+0x35>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__stack+0x3b>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__stack+0x55>
     494:	8e e6       	ldi	r24, 0x6E	; 110
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__stack+0x1c7>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__stack+0x51>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__stack+0x1c7>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__stack+0x67>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__stack+0x1c7>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__stack+0xd3>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__stack+0xc7>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__stack+0xef>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__stack+0x109>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__stack+0x8f>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__stack+0x14d>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__stack+0x141>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__stack+0x11f>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__stack+0x16b>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__stack+0x153>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__stack+0x1ad>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__stack+0x1ad>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__stack+0x1ad>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__stack+0x1b7>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 bd 16 	jmp	0x2d7a	; 0x2d7a <__epilogue_restores__>

00000632 <__gtsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 ad 16 	jmp	0x2d5a	; 0x2d5a <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gtsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gtsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gtsf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 c9 16 	jmp	0x2d92	; 0x2d92 <__epilogue_restores__+0x18>

00000692 <__gesf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 ad 16 	jmp	0x2d5a	; 0x2d5a <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gesf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gesf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gesf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 c9 16 	jmp	0x2d92	; 0x2d92 <__epilogue_restores__+0x18>

000006f2 <__ltsf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 ad 16 	jmp	0x2d5a	; 0x2d5a <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__ltsf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__ltsf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__ltsf2+0x58>
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 c9 16 	jmp	0x2d92	; 0x2d92 <__epilogue_restores__+0x18>

00000752 <__fixsfsi>:
     752:	ac e0       	ldi	r26, 0x0C	; 12
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 b1 16 	jmp	0x2d62	; 0x2d62 <__prologue_saves__+0x20>
     75e:	69 83       	std	Y+1, r22	; 0x01
     760:	7a 83       	std	Y+2, r23	; 0x02
     762:	8b 83       	std	Y+3, r24	; 0x03
     764:	9c 83       	std	Y+4, r25	; 0x04
     766:	ce 01       	movw	r24, r28
     768:	01 96       	adiw	r24, 0x01	; 1
     76a:	be 01       	movw	r22, r28
     76c:	6b 5f       	subi	r22, 0xFB	; 251
     76e:	7f 4f       	sbci	r23, 0xFF	; 255
     770:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     774:	8d 81       	ldd	r24, Y+5	; 0x05
     776:	82 30       	cpi	r24, 0x02	; 2
     778:	61 f1       	breq	.+88     	; 0x7d2 <__fixsfsi+0x80>
     77a:	82 30       	cpi	r24, 0x02	; 2
     77c:	50 f1       	brcs	.+84     	; 0x7d2 <__fixsfsi+0x80>
     77e:	84 30       	cpi	r24, 0x04	; 4
     780:	21 f4       	brne	.+8      	; 0x78a <__fixsfsi+0x38>
     782:	8e 81       	ldd	r24, Y+6	; 0x06
     784:	88 23       	and	r24, r24
     786:	51 f1       	breq	.+84     	; 0x7dc <__fixsfsi+0x8a>
     788:	2e c0       	rjmp	.+92     	; 0x7e6 <__fixsfsi+0x94>
     78a:	2f 81       	ldd	r18, Y+7	; 0x07
     78c:	38 85       	ldd	r19, Y+8	; 0x08
     78e:	37 fd       	sbrc	r19, 7
     790:	20 c0       	rjmp	.+64     	; 0x7d2 <__fixsfsi+0x80>
     792:	6e 81       	ldd	r22, Y+6	; 0x06
     794:	2f 31       	cpi	r18, 0x1F	; 31
     796:	31 05       	cpc	r19, r1
     798:	1c f0       	brlt	.+6      	; 0x7a0 <__fixsfsi+0x4e>
     79a:	66 23       	and	r22, r22
     79c:	f9 f0       	breq	.+62     	; 0x7dc <__fixsfsi+0x8a>
     79e:	23 c0       	rjmp	.+70     	; 0x7e6 <__fixsfsi+0x94>
     7a0:	8e e1       	ldi	r24, 0x1E	; 30
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	82 1b       	sub	r24, r18
     7a6:	93 0b       	sbc	r25, r19
     7a8:	29 85       	ldd	r18, Y+9	; 0x09
     7aa:	3a 85       	ldd	r19, Y+10	; 0x0a
     7ac:	4b 85       	ldd	r20, Y+11	; 0x0b
     7ae:	5c 85       	ldd	r21, Y+12	; 0x0c
     7b0:	04 c0       	rjmp	.+8      	; 0x7ba <__fixsfsi+0x68>
     7b2:	56 95       	lsr	r21
     7b4:	47 95       	ror	r20
     7b6:	37 95       	ror	r19
     7b8:	27 95       	ror	r18
     7ba:	8a 95       	dec	r24
     7bc:	d2 f7       	brpl	.-12     	; 0x7b2 <__fixsfsi+0x60>
     7be:	66 23       	and	r22, r22
     7c0:	b1 f0       	breq	.+44     	; 0x7ee <__fixsfsi+0x9c>
     7c2:	50 95       	com	r21
     7c4:	40 95       	com	r20
     7c6:	30 95       	com	r19
     7c8:	21 95       	neg	r18
     7ca:	3f 4f       	sbci	r19, 0xFF	; 255
     7cc:	4f 4f       	sbci	r20, 0xFF	; 255
     7ce:	5f 4f       	sbci	r21, 0xFF	; 255
     7d0:	0e c0       	rjmp	.+28     	; 0x7ee <__fixsfsi+0x9c>
     7d2:	20 e0       	ldi	r18, 0x00	; 0
     7d4:	30 e0       	ldi	r19, 0x00	; 0
     7d6:	40 e0       	ldi	r20, 0x00	; 0
     7d8:	50 e0       	ldi	r21, 0x00	; 0
     7da:	09 c0       	rjmp	.+18     	; 0x7ee <__fixsfsi+0x9c>
     7dc:	2f ef       	ldi	r18, 0xFF	; 255
     7de:	3f ef       	ldi	r19, 0xFF	; 255
     7e0:	4f ef       	ldi	r20, 0xFF	; 255
     7e2:	5f e7       	ldi	r21, 0x7F	; 127
     7e4:	04 c0       	rjmp	.+8      	; 0x7ee <__fixsfsi+0x9c>
     7e6:	20 e0       	ldi	r18, 0x00	; 0
     7e8:	30 e0       	ldi	r19, 0x00	; 0
     7ea:	40 e0       	ldi	r20, 0x00	; 0
     7ec:	50 e8       	ldi	r21, 0x80	; 128
     7ee:	b9 01       	movw	r22, r18
     7f0:	ca 01       	movw	r24, r20
     7f2:	2c 96       	adiw	r28, 0x0c	; 12
     7f4:	e2 e0       	ldi	r30, 0x02	; 2
     7f6:	0c 94 cd 16 	jmp	0x2d9a	; 0x2d9a <__epilogue_restores__+0x20>

000007fa <__pack_f>:
     7fa:	df 92       	push	r13
     7fc:	ef 92       	push	r14
     7fe:	ff 92       	push	r15
     800:	0f 93       	push	r16
     802:	1f 93       	push	r17
     804:	fc 01       	movw	r30, r24
     806:	e4 80       	ldd	r14, Z+4	; 0x04
     808:	f5 80       	ldd	r15, Z+5	; 0x05
     80a:	06 81       	ldd	r16, Z+6	; 0x06
     80c:	17 81       	ldd	r17, Z+7	; 0x07
     80e:	d1 80       	ldd	r13, Z+1	; 0x01
     810:	80 81       	ld	r24, Z
     812:	82 30       	cpi	r24, 0x02	; 2
     814:	48 f4       	brcc	.+18     	; 0x828 <__pack_f+0x2e>
     816:	80 e0       	ldi	r24, 0x00	; 0
     818:	90 e0       	ldi	r25, 0x00	; 0
     81a:	a0 e1       	ldi	r26, 0x10	; 16
     81c:	b0 e0       	ldi	r27, 0x00	; 0
     81e:	e8 2a       	or	r14, r24
     820:	f9 2a       	or	r15, r25
     822:	0a 2b       	or	r16, r26
     824:	1b 2b       	or	r17, r27
     826:	a5 c0       	rjmp	.+330    	; 0x972 <__pack_f+0x178>
     828:	84 30       	cpi	r24, 0x04	; 4
     82a:	09 f4       	brne	.+2      	; 0x82e <__pack_f+0x34>
     82c:	9f c0       	rjmp	.+318    	; 0x96c <__pack_f+0x172>
     82e:	82 30       	cpi	r24, 0x02	; 2
     830:	21 f4       	brne	.+8      	; 0x83a <__pack_f+0x40>
     832:	ee 24       	eor	r14, r14
     834:	ff 24       	eor	r15, r15
     836:	87 01       	movw	r16, r14
     838:	05 c0       	rjmp	.+10     	; 0x844 <__pack_f+0x4a>
     83a:	e1 14       	cp	r14, r1
     83c:	f1 04       	cpc	r15, r1
     83e:	01 05       	cpc	r16, r1
     840:	11 05       	cpc	r17, r1
     842:	19 f4       	brne	.+6      	; 0x84a <__pack_f+0x50>
     844:	e0 e0       	ldi	r30, 0x00	; 0
     846:	f0 e0       	ldi	r31, 0x00	; 0
     848:	96 c0       	rjmp	.+300    	; 0x976 <__pack_f+0x17c>
     84a:	62 81       	ldd	r22, Z+2	; 0x02
     84c:	73 81       	ldd	r23, Z+3	; 0x03
     84e:	9f ef       	ldi	r25, 0xFF	; 255
     850:	62 38       	cpi	r22, 0x82	; 130
     852:	79 07       	cpc	r23, r25
     854:	0c f0       	brlt	.+2      	; 0x858 <__pack_f+0x5e>
     856:	5b c0       	rjmp	.+182    	; 0x90e <__pack_f+0x114>
     858:	22 e8       	ldi	r18, 0x82	; 130
     85a:	3f ef       	ldi	r19, 0xFF	; 255
     85c:	26 1b       	sub	r18, r22
     85e:	37 0b       	sbc	r19, r23
     860:	2a 31       	cpi	r18, 0x1A	; 26
     862:	31 05       	cpc	r19, r1
     864:	2c f0       	brlt	.+10     	; 0x870 <__pack_f+0x76>
     866:	20 e0       	ldi	r18, 0x00	; 0
     868:	30 e0       	ldi	r19, 0x00	; 0
     86a:	40 e0       	ldi	r20, 0x00	; 0
     86c:	50 e0       	ldi	r21, 0x00	; 0
     86e:	2a c0       	rjmp	.+84     	; 0x8c4 <__pack_f+0xca>
     870:	b8 01       	movw	r22, r16
     872:	a7 01       	movw	r20, r14
     874:	02 2e       	mov	r0, r18
     876:	04 c0       	rjmp	.+8      	; 0x880 <__pack_f+0x86>
     878:	76 95       	lsr	r23
     87a:	67 95       	ror	r22
     87c:	57 95       	ror	r21
     87e:	47 95       	ror	r20
     880:	0a 94       	dec	r0
     882:	d2 f7       	brpl	.-12     	; 0x878 <__pack_f+0x7e>
     884:	81 e0       	ldi	r24, 0x01	; 1
     886:	90 e0       	ldi	r25, 0x00	; 0
     888:	a0 e0       	ldi	r26, 0x00	; 0
     88a:	b0 e0       	ldi	r27, 0x00	; 0
     88c:	04 c0       	rjmp	.+8      	; 0x896 <__pack_f+0x9c>
     88e:	88 0f       	add	r24, r24
     890:	99 1f       	adc	r25, r25
     892:	aa 1f       	adc	r26, r26
     894:	bb 1f       	adc	r27, r27
     896:	2a 95       	dec	r18
     898:	d2 f7       	brpl	.-12     	; 0x88e <__pack_f+0x94>
     89a:	01 97       	sbiw	r24, 0x01	; 1
     89c:	a1 09       	sbc	r26, r1
     89e:	b1 09       	sbc	r27, r1
     8a0:	8e 21       	and	r24, r14
     8a2:	9f 21       	and	r25, r15
     8a4:	a0 23       	and	r26, r16
     8a6:	b1 23       	and	r27, r17
     8a8:	00 97       	sbiw	r24, 0x00	; 0
     8aa:	a1 05       	cpc	r26, r1
     8ac:	b1 05       	cpc	r27, r1
     8ae:	21 f0       	breq	.+8      	; 0x8b8 <__pack_f+0xbe>
     8b0:	81 e0       	ldi	r24, 0x01	; 1
     8b2:	90 e0       	ldi	r25, 0x00	; 0
     8b4:	a0 e0       	ldi	r26, 0x00	; 0
     8b6:	b0 e0       	ldi	r27, 0x00	; 0
     8b8:	9a 01       	movw	r18, r20
     8ba:	ab 01       	movw	r20, r22
     8bc:	28 2b       	or	r18, r24
     8be:	39 2b       	or	r19, r25
     8c0:	4a 2b       	or	r20, r26
     8c2:	5b 2b       	or	r21, r27
     8c4:	da 01       	movw	r26, r20
     8c6:	c9 01       	movw	r24, r18
     8c8:	8f 77       	andi	r24, 0x7F	; 127
     8ca:	90 70       	andi	r25, 0x00	; 0
     8cc:	a0 70       	andi	r26, 0x00	; 0
     8ce:	b0 70       	andi	r27, 0x00	; 0
     8d0:	80 34       	cpi	r24, 0x40	; 64
     8d2:	91 05       	cpc	r25, r1
     8d4:	a1 05       	cpc	r26, r1
     8d6:	b1 05       	cpc	r27, r1
     8d8:	39 f4       	brne	.+14     	; 0x8e8 <__pack_f+0xee>
     8da:	27 ff       	sbrs	r18, 7
     8dc:	09 c0       	rjmp	.+18     	; 0x8f0 <__pack_f+0xf6>
     8de:	20 5c       	subi	r18, 0xC0	; 192
     8e0:	3f 4f       	sbci	r19, 0xFF	; 255
     8e2:	4f 4f       	sbci	r20, 0xFF	; 255
     8e4:	5f 4f       	sbci	r21, 0xFF	; 255
     8e6:	04 c0       	rjmp	.+8      	; 0x8f0 <__pack_f+0xf6>
     8e8:	21 5c       	subi	r18, 0xC1	; 193
     8ea:	3f 4f       	sbci	r19, 0xFF	; 255
     8ec:	4f 4f       	sbci	r20, 0xFF	; 255
     8ee:	5f 4f       	sbci	r21, 0xFF	; 255
     8f0:	e0 e0       	ldi	r30, 0x00	; 0
     8f2:	f0 e0       	ldi	r31, 0x00	; 0
     8f4:	20 30       	cpi	r18, 0x00	; 0
     8f6:	a0 e0       	ldi	r26, 0x00	; 0
     8f8:	3a 07       	cpc	r19, r26
     8fa:	a0 e0       	ldi	r26, 0x00	; 0
     8fc:	4a 07       	cpc	r20, r26
     8fe:	a0 e4       	ldi	r26, 0x40	; 64
     900:	5a 07       	cpc	r21, r26
     902:	10 f0       	brcs	.+4      	; 0x908 <__pack_f+0x10e>
     904:	e1 e0       	ldi	r30, 0x01	; 1
     906:	f0 e0       	ldi	r31, 0x00	; 0
     908:	79 01       	movw	r14, r18
     90a:	8a 01       	movw	r16, r20
     90c:	27 c0       	rjmp	.+78     	; 0x95c <__pack_f+0x162>
     90e:	60 38       	cpi	r22, 0x80	; 128
     910:	71 05       	cpc	r23, r1
     912:	64 f5       	brge	.+88     	; 0x96c <__pack_f+0x172>
     914:	fb 01       	movw	r30, r22
     916:	e1 58       	subi	r30, 0x81	; 129
     918:	ff 4f       	sbci	r31, 0xFF	; 255
     91a:	d8 01       	movw	r26, r16
     91c:	c7 01       	movw	r24, r14
     91e:	8f 77       	andi	r24, 0x7F	; 127
     920:	90 70       	andi	r25, 0x00	; 0
     922:	a0 70       	andi	r26, 0x00	; 0
     924:	b0 70       	andi	r27, 0x00	; 0
     926:	80 34       	cpi	r24, 0x40	; 64
     928:	91 05       	cpc	r25, r1
     92a:	a1 05       	cpc	r26, r1
     92c:	b1 05       	cpc	r27, r1
     92e:	39 f4       	brne	.+14     	; 0x93e <__pack_f+0x144>
     930:	e7 fe       	sbrs	r14, 7
     932:	0d c0       	rjmp	.+26     	; 0x94e <__pack_f+0x154>
     934:	80 e4       	ldi	r24, 0x40	; 64
     936:	90 e0       	ldi	r25, 0x00	; 0
     938:	a0 e0       	ldi	r26, 0x00	; 0
     93a:	b0 e0       	ldi	r27, 0x00	; 0
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__pack_f+0x14c>
     93e:	8f e3       	ldi	r24, 0x3F	; 63
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	a0 e0       	ldi	r26, 0x00	; 0
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	e8 0e       	add	r14, r24
     948:	f9 1e       	adc	r15, r25
     94a:	0a 1f       	adc	r16, r26
     94c:	1b 1f       	adc	r17, r27
     94e:	17 ff       	sbrs	r17, 7
     950:	05 c0       	rjmp	.+10     	; 0x95c <__pack_f+0x162>
     952:	16 95       	lsr	r17
     954:	07 95       	ror	r16
     956:	f7 94       	ror	r15
     958:	e7 94       	ror	r14
     95a:	31 96       	adiw	r30, 0x01	; 1
     95c:	87 e0       	ldi	r24, 0x07	; 7
     95e:	16 95       	lsr	r17
     960:	07 95       	ror	r16
     962:	f7 94       	ror	r15
     964:	e7 94       	ror	r14
     966:	8a 95       	dec	r24
     968:	d1 f7       	brne	.-12     	; 0x95e <__pack_f+0x164>
     96a:	05 c0       	rjmp	.+10     	; 0x976 <__pack_f+0x17c>
     96c:	ee 24       	eor	r14, r14
     96e:	ff 24       	eor	r15, r15
     970:	87 01       	movw	r16, r14
     972:	ef ef       	ldi	r30, 0xFF	; 255
     974:	f0 e0       	ldi	r31, 0x00	; 0
     976:	6e 2f       	mov	r22, r30
     978:	67 95       	ror	r22
     97a:	66 27       	eor	r22, r22
     97c:	67 95       	ror	r22
     97e:	90 2f       	mov	r25, r16
     980:	9f 77       	andi	r25, 0x7F	; 127
     982:	d7 94       	ror	r13
     984:	dd 24       	eor	r13, r13
     986:	d7 94       	ror	r13
     988:	8e 2f       	mov	r24, r30
     98a:	86 95       	lsr	r24
     98c:	49 2f       	mov	r20, r25
     98e:	46 2b       	or	r20, r22
     990:	58 2f       	mov	r21, r24
     992:	5d 29       	or	r21, r13
     994:	b7 01       	movw	r22, r14
     996:	ca 01       	movw	r24, r20
     998:	1f 91       	pop	r17
     99a:	0f 91       	pop	r16
     99c:	ff 90       	pop	r15
     99e:	ef 90       	pop	r14
     9a0:	df 90       	pop	r13
     9a2:	08 95       	ret

000009a4 <__unpack_f>:
     9a4:	fc 01       	movw	r30, r24
     9a6:	db 01       	movw	r26, r22
     9a8:	40 81       	ld	r20, Z
     9aa:	51 81       	ldd	r21, Z+1	; 0x01
     9ac:	22 81       	ldd	r18, Z+2	; 0x02
     9ae:	62 2f       	mov	r22, r18
     9b0:	6f 77       	andi	r22, 0x7F	; 127
     9b2:	70 e0       	ldi	r23, 0x00	; 0
     9b4:	22 1f       	adc	r18, r18
     9b6:	22 27       	eor	r18, r18
     9b8:	22 1f       	adc	r18, r18
     9ba:	93 81       	ldd	r25, Z+3	; 0x03
     9bc:	89 2f       	mov	r24, r25
     9be:	88 0f       	add	r24, r24
     9c0:	82 2b       	or	r24, r18
     9c2:	28 2f       	mov	r18, r24
     9c4:	30 e0       	ldi	r19, 0x00	; 0
     9c6:	99 1f       	adc	r25, r25
     9c8:	99 27       	eor	r25, r25
     9ca:	99 1f       	adc	r25, r25
     9cc:	11 96       	adiw	r26, 0x01	; 1
     9ce:	9c 93       	st	X, r25
     9d0:	11 97       	sbiw	r26, 0x01	; 1
     9d2:	21 15       	cp	r18, r1
     9d4:	31 05       	cpc	r19, r1
     9d6:	a9 f5       	brne	.+106    	; 0xa42 <__unpack_f+0x9e>
     9d8:	41 15       	cp	r20, r1
     9da:	51 05       	cpc	r21, r1
     9dc:	61 05       	cpc	r22, r1
     9de:	71 05       	cpc	r23, r1
     9e0:	11 f4       	brne	.+4      	; 0x9e6 <__unpack_f+0x42>
     9e2:	82 e0       	ldi	r24, 0x02	; 2
     9e4:	37 c0       	rjmp	.+110    	; 0xa54 <__unpack_f+0xb0>
     9e6:	82 e8       	ldi	r24, 0x82	; 130
     9e8:	9f ef       	ldi	r25, 0xFF	; 255
     9ea:	13 96       	adiw	r26, 0x03	; 3
     9ec:	9c 93       	st	X, r25
     9ee:	8e 93       	st	-X, r24
     9f0:	12 97       	sbiw	r26, 0x02	; 2
     9f2:	9a 01       	movw	r18, r20
     9f4:	ab 01       	movw	r20, r22
     9f6:	67 e0       	ldi	r22, 0x07	; 7
     9f8:	22 0f       	add	r18, r18
     9fa:	33 1f       	adc	r19, r19
     9fc:	44 1f       	adc	r20, r20
     9fe:	55 1f       	adc	r21, r21
     a00:	6a 95       	dec	r22
     a02:	d1 f7       	brne	.-12     	; 0x9f8 <__unpack_f+0x54>
     a04:	83 e0       	ldi	r24, 0x03	; 3
     a06:	8c 93       	st	X, r24
     a08:	0d c0       	rjmp	.+26     	; 0xa24 <__unpack_f+0x80>
     a0a:	22 0f       	add	r18, r18
     a0c:	33 1f       	adc	r19, r19
     a0e:	44 1f       	adc	r20, r20
     a10:	55 1f       	adc	r21, r21
     a12:	12 96       	adiw	r26, 0x02	; 2
     a14:	8d 91       	ld	r24, X+
     a16:	9c 91       	ld	r25, X
     a18:	13 97       	sbiw	r26, 0x03	; 3
     a1a:	01 97       	sbiw	r24, 0x01	; 1
     a1c:	13 96       	adiw	r26, 0x03	; 3
     a1e:	9c 93       	st	X, r25
     a20:	8e 93       	st	-X, r24
     a22:	12 97       	sbiw	r26, 0x02	; 2
     a24:	20 30       	cpi	r18, 0x00	; 0
     a26:	80 e0       	ldi	r24, 0x00	; 0
     a28:	38 07       	cpc	r19, r24
     a2a:	80 e0       	ldi	r24, 0x00	; 0
     a2c:	48 07       	cpc	r20, r24
     a2e:	80 e4       	ldi	r24, 0x40	; 64
     a30:	58 07       	cpc	r21, r24
     a32:	58 f3       	brcs	.-42     	; 0xa0a <__unpack_f+0x66>
     a34:	14 96       	adiw	r26, 0x04	; 4
     a36:	2d 93       	st	X+, r18
     a38:	3d 93       	st	X+, r19
     a3a:	4d 93       	st	X+, r20
     a3c:	5c 93       	st	X, r21
     a3e:	17 97       	sbiw	r26, 0x07	; 7
     a40:	08 95       	ret
     a42:	2f 3f       	cpi	r18, 0xFF	; 255
     a44:	31 05       	cpc	r19, r1
     a46:	79 f4       	brne	.+30     	; 0xa66 <__unpack_f+0xc2>
     a48:	41 15       	cp	r20, r1
     a4a:	51 05       	cpc	r21, r1
     a4c:	61 05       	cpc	r22, r1
     a4e:	71 05       	cpc	r23, r1
     a50:	19 f4       	brne	.+6      	; 0xa58 <__unpack_f+0xb4>
     a52:	84 e0       	ldi	r24, 0x04	; 4
     a54:	8c 93       	st	X, r24
     a56:	08 95       	ret
     a58:	64 ff       	sbrs	r22, 4
     a5a:	03 c0       	rjmp	.+6      	; 0xa62 <__unpack_f+0xbe>
     a5c:	81 e0       	ldi	r24, 0x01	; 1
     a5e:	8c 93       	st	X, r24
     a60:	12 c0       	rjmp	.+36     	; 0xa86 <__unpack_f+0xe2>
     a62:	1c 92       	st	X, r1
     a64:	10 c0       	rjmp	.+32     	; 0xa86 <__unpack_f+0xe2>
     a66:	2f 57       	subi	r18, 0x7F	; 127
     a68:	30 40       	sbci	r19, 0x00	; 0
     a6a:	13 96       	adiw	r26, 0x03	; 3
     a6c:	3c 93       	st	X, r19
     a6e:	2e 93       	st	-X, r18
     a70:	12 97       	sbiw	r26, 0x02	; 2
     a72:	83 e0       	ldi	r24, 0x03	; 3
     a74:	8c 93       	st	X, r24
     a76:	87 e0       	ldi	r24, 0x07	; 7
     a78:	44 0f       	add	r20, r20
     a7a:	55 1f       	adc	r21, r21
     a7c:	66 1f       	adc	r22, r22
     a7e:	77 1f       	adc	r23, r23
     a80:	8a 95       	dec	r24
     a82:	d1 f7       	brne	.-12     	; 0xa78 <__unpack_f+0xd4>
     a84:	70 64       	ori	r23, 0x40	; 64
     a86:	14 96       	adiw	r26, 0x04	; 4
     a88:	4d 93       	st	X+, r20
     a8a:	5d 93       	st	X+, r21
     a8c:	6d 93       	st	X+, r22
     a8e:	7c 93       	st	X, r23
     a90:	17 97       	sbiw	r26, 0x07	; 7
     a92:	08 95       	ret

00000a94 <__fpcmp_parts_f>:
     a94:	1f 93       	push	r17
     a96:	dc 01       	movw	r26, r24
     a98:	fb 01       	movw	r30, r22
     a9a:	9c 91       	ld	r25, X
     a9c:	92 30       	cpi	r25, 0x02	; 2
     a9e:	08 f4       	brcc	.+2      	; 0xaa2 <__fpcmp_parts_f+0xe>
     aa0:	47 c0       	rjmp	.+142    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aa2:	80 81       	ld	r24, Z
     aa4:	82 30       	cpi	r24, 0x02	; 2
     aa6:	08 f4       	brcc	.+2      	; 0xaaa <__fpcmp_parts_f+0x16>
     aa8:	43 c0       	rjmp	.+134    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aaa:	94 30       	cpi	r25, 0x04	; 4
     aac:	51 f4       	brne	.+20     	; 0xac2 <__fpcmp_parts_f+0x2e>
     aae:	11 96       	adiw	r26, 0x01	; 1
     ab0:	1c 91       	ld	r17, X
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	99 f5       	brne	.+102    	; 0xb1c <__fpcmp_parts_f+0x88>
     ab6:	81 81       	ldd	r24, Z+1	; 0x01
     ab8:	68 2f       	mov	r22, r24
     aba:	70 e0       	ldi	r23, 0x00	; 0
     abc:	61 1b       	sub	r22, r17
     abe:	71 09       	sbc	r23, r1
     ac0:	3f c0       	rjmp	.+126    	; 0xb40 <__fpcmp_parts_f+0xac>
     ac2:	84 30       	cpi	r24, 0x04	; 4
     ac4:	21 f0       	breq	.+8      	; 0xace <__fpcmp_parts_f+0x3a>
     ac6:	92 30       	cpi	r25, 0x02	; 2
     ac8:	31 f4       	brne	.+12     	; 0xad6 <__fpcmp_parts_f+0x42>
     aca:	82 30       	cpi	r24, 0x02	; 2
     acc:	b9 f1       	breq	.+110    	; 0xb3c <__fpcmp_parts_f+0xa8>
     ace:	81 81       	ldd	r24, Z+1	; 0x01
     ad0:	88 23       	and	r24, r24
     ad2:	89 f1       	breq	.+98     	; 0xb36 <__fpcmp_parts_f+0xa2>
     ad4:	2d c0       	rjmp	.+90     	; 0xb30 <__fpcmp_parts_f+0x9c>
     ad6:	11 96       	adiw	r26, 0x01	; 1
     ad8:	1c 91       	ld	r17, X
     ada:	11 97       	sbiw	r26, 0x01	; 1
     adc:	82 30       	cpi	r24, 0x02	; 2
     ade:	f1 f0       	breq	.+60     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae0:	81 81       	ldd	r24, Z+1	; 0x01
     ae2:	18 17       	cp	r17, r24
     ae4:	d9 f4       	brne	.+54     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae6:	12 96       	adiw	r26, 0x02	; 2
     ae8:	2d 91       	ld	r18, X+
     aea:	3c 91       	ld	r19, X
     aec:	13 97       	sbiw	r26, 0x03	; 3
     aee:	82 81       	ldd	r24, Z+2	; 0x02
     af0:	93 81       	ldd	r25, Z+3	; 0x03
     af2:	82 17       	cp	r24, r18
     af4:	93 07       	cpc	r25, r19
     af6:	94 f0       	brlt	.+36     	; 0xb1c <__fpcmp_parts_f+0x88>
     af8:	28 17       	cp	r18, r24
     afa:	39 07       	cpc	r19, r25
     afc:	bc f0       	brlt	.+46     	; 0xb2c <__fpcmp_parts_f+0x98>
     afe:	14 96       	adiw	r26, 0x04	; 4
     b00:	8d 91       	ld	r24, X+
     b02:	9d 91       	ld	r25, X+
     b04:	0d 90       	ld	r0, X+
     b06:	bc 91       	ld	r27, X
     b08:	a0 2d       	mov	r26, r0
     b0a:	24 81       	ldd	r18, Z+4	; 0x04
     b0c:	35 81       	ldd	r19, Z+5	; 0x05
     b0e:	46 81       	ldd	r20, Z+6	; 0x06
     b10:	57 81       	ldd	r21, Z+7	; 0x07
     b12:	28 17       	cp	r18, r24
     b14:	39 07       	cpc	r19, r25
     b16:	4a 07       	cpc	r20, r26
     b18:	5b 07       	cpc	r21, r27
     b1a:	18 f4       	brcc	.+6      	; 0xb22 <__fpcmp_parts_f+0x8e>
     b1c:	11 23       	and	r17, r17
     b1e:	41 f0       	breq	.+16     	; 0xb30 <__fpcmp_parts_f+0x9c>
     b20:	0a c0       	rjmp	.+20     	; 0xb36 <__fpcmp_parts_f+0xa2>
     b22:	82 17       	cp	r24, r18
     b24:	93 07       	cpc	r25, r19
     b26:	a4 07       	cpc	r26, r20
     b28:	b5 07       	cpc	r27, r21
     b2a:	40 f4       	brcc	.+16     	; 0xb3c <__fpcmp_parts_f+0xa8>
     b2c:	11 23       	and	r17, r17
     b2e:	19 f0       	breq	.+6      	; 0xb36 <__fpcmp_parts_f+0xa2>
     b30:	61 e0       	ldi	r22, 0x01	; 1
     b32:	70 e0       	ldi	r23, 0x00	; 0
     b34:	05 c0       	rjmp	.+10     	; 0xb40 <__fpcmp_parts_f+0xac>
     b36:	6f ef       	ldi	r22, 0xFF	; 255
     b38:	7f ef       	ldi	r23, 0xFF	; 255
     b3a:	02 c0       	rjmp	.+4      	; 0xb40 <__fpcmp_parts_f+0xac>
     b3c:	60 e0       	ldi	r22, 0x00	; 0
     b3e:	70 e0       	ldi	r23, 0x00	; 0
     b40:	cb 01       	movw	r24, r22
     b42:	1f 91       	pop	r17
     b44:	08 95       	ret

00000b46 <Clear_AllGlopal_variables>:

/*********************************************************************************************
 *                                     function Definitions                                  *
 *********************************************************************************************/
void Clear_AllGlopal_variables(void)
{
     b46:	df 93       	push	r29
     b48:	cf 93       	push	r28
     b4a:	cd b7       	in	r28, 0x3d	; 61
     b4c:	de b7       	in	r29, 0x3e	; 62
	i=0;
     b4e:	10 92 76 00 	sts	0x0076, r1
	flag = 0;               /*to be ready for receiving another operation*/
     b52:	10 92 77 00 	sts	0x0077, r1
	result = 0;
     b56:	10 92 7b 00 	sts	0x007B, r1
	num[0] = 0;
     b5a:	10 92 79 00 	sts	0x0079, r1
	num[1] = 0;
     b5e:	10 92 7a 00 	sts	0x007A, r1
	operation = 0;
     b62:	10 92 78 00 	sts	0x0078, r1
	LCD_clear_screen();
     b66:	0e 94 1e 16 	call	0x2c3c	; 0x2c3c <LCD_clear_screen>
}
     b6a:	cf 91       	pop	r28
     b6c:	df 91       	pop	r29
     b6e:	08 95       	ret

00000b70 <main>:

/*********************************************************************************************
 *                                     Main Function                                         *
 *********************************************************************************************/
int main(void)
{
     b70:	df 93       	push	r29
     b72:	cf 93       	push	r28
     b74:	cd b7       	in	r28, 0x3d	; 61
     b76:	de b7       	in	r29, 0x3e	; 62
     b78:	61 97       	sbiw	r28, 0x11	; 17
     b7a:	0f b6       	in	r0, 0x3f	; 63
     b7c:	f8 94       	cli
     b7e:	de bf       	out	0x3e, r29	; 62
     b80:	0f be       	out	0x3f, r0	; 63
     b82:	cd bf       	out	0x3d, r28	; 61
	uint8 key;                      /*to hold the pressed key from the keypad*/
	LCD_init();                     /*initialize the LCD*/
     b84:	0e 94 82 08 	call	0x1104	; 0x1104 <LCD_init>

	while(1)
	{
		key = Keypad_get_pressed_key(); /* get the pressed key number */
     b88:	0e 94 24 07 	call	0xe48	; 0xe48 <Keypad_get_pressed_key>
     b8c:	8f 87       	std	Y+15, r24	; 0x0f
		if((key <= 9) && (key >= 0))
     b8e:	8f 85       	ldd	r24, Y+15	; 0x0f
     b90:	8a 30       	cpi	r24, 0x0A	; 10
     b92:	18 f5       	brcc	.+70     	; 0xbda <main+0x6a>
		{
			LCD_display_integer(key);    /* display the pressed keypad switch */
     b94:	8f 85       	ldd	r24, Y+15	; 0x0f
     b96:	0e 94 75 15 	call	0x2aea	; 0x2aea <LCD_display_integer>
			num[i]=num[i] * 10 + key;    /*case the number consist of more than one digit*/
     b9a:	80 91 76 00 	lds	r24, 0x0076
     b9e:	48 2f       	mov	r20, r24
     ba0:	50 e0       	ldi	r21, 0x00	; 0
     ba2:	80 91 76 00 	lds	r24, 0x0076
     ba6:	88 2f       	mov	r24, r24
     ba8:	90 e0       	ldi	r25, 0x00	; 0
     baa:	fc 01       	movw	r30, r24
     bac:	e7 58       	subi	r30, 0x87	; 135
     bae:	ff 4f       	sbci	r31, 0xFF	; 255
     bb0:	80 81       	ld	r24, Z
     bb2:	88 2f       	mov	r24, r24
     bb4:	90 e0       	ldi	r25, 0x00	; 0
     bb6:	9c 01       	movw	r18, r24
     bb8:	22 0f       	add	r18, r18
     bba:	33 1f       	adc	r19, r19
     bbc:	c9 01       	movw	r24, r18
     bbe:	88 0f       	add	r24, r24
     bc0:	99 1f       	adc	r25, r25
     bc2:	88 0f       	add	r24, r24
     bc4:	99 1f       	adc	r25, r25
     bc6:	82 0f       	add	r24, r18
     bc8:	93 1f       	adc	r25, r19
     bca:	98 2f       	mov	r25, r24
     bcc:	8f 85       	ldd	r24, Y+15	; 0x0f
     bce:	89 0f       	add	r24, r25
     bd0:	fa 01       	movw	r30, r20
     bd2:	e7 58       	subi	r30, 0x87	; 135
     bd4:	ff 4f       	sbci	r31, 0xFF	; 255
     bd6:	80 83       	st	Z, r24
     bd8:	bf c0       	rjmp	.+382    	; 0xd58 <main+0x1e8>
		}
		else if((key=='+') || (key=='*') || (key=='-') || (key=='%'))
     bda:	8f 85       	ldd	r24, Y+15	; 0x0f
     bdc:	8b 32       	cpi	r24, 0x2B	; 43
     bde:	49 f0       	breq	.+18     	; 0xbf2 <main+0x82>
     be0:	8f 85       	ldd	r24, Y+15	; 0x0f
     be2:	8a 32       	cpi	r24, 0x2A	; 42
     be4:	31 f0       	breq	.+12     	; 0xbf2 <main+0x82>
     be6:	8f 85       	ldd	r24, Y+15	; 0x0f
     be8:	8d 32       	cpi	r24, 0x2D	; 45
     bea:	19 f0       	breq	.+6      	; 0xbf2 <main+0x82>
     bec:	8f 85       	ldd	r24, Y+15	; 0x0f
     bee:	85 32       	cpi	r24, 0x25	; 37
     bf0:	a1 f4       	brne	.+40     	; 0xc1a <main+0xaa>
		{
			if(flag==0)
     bf2:	80 91 77 00 	lds	r24, 0x0077
     bf6:	88 23       	and	r24, r24
     bf8:	09 f0       	breq	.+2      	; 0xbfc <main+0x8c>
     bfa:	ae c0       	rjmp	.+348    	; 0xd58 <main+0x1e8>
			{
				flag = 1;                 /*to prevent the user from entering other operation*/
     bfc:	81 e0       	ldi	r24, 0x01	; 1
     bfe:	80 93 77 00 	sts	0x0077, r24
				LCD_disply_character(key);
     c02:	8f 85       	ldd	r24, Y+15	; 0x0f
     c04:	0e 94 1f 0f 	call	0x1e3e	; 0x1e3e <LCD_disply_character>
				operation = key;          /*store the operation*/
     c08:	8f 85       	ldd	r24, Y+15	; 0x0f
     c0a:	80 93 78 00 	sts	0x0078, r24
				i++;                      /*to start receiving the second number*/
     c0e:	80 91 76 00 	lds	r24, 0x0076
     c12:	8f 5f       	subi	r24, 0xFF	; 255
     c14:	80 93 76 00 	sts	0x0076, r24
     c18:	9f c0       	rjmp	.+318    	; 0xd58 <main+0x1e8>
			}
		}
		else if(key=='=')
     c1a:	8f 85       	ldd	r24, Y+15	; 0x0f
     c1c:	8d 33       	cpi	r24, 0x3D	; 61
     c1e:	09 f0       	breq	.+2      	; 0xc22 <main+0xb2>
     c20:	9b c0       	rjmp	.+310    	; 0xd58 <main+0x1e8>
		{
			if(flag !=1)                                //no operation entered.
     c22:	80 91 77 00 	lds	r24, 0x0077
     c26:	81 30       	cpi	r24, 0x01	; 1
     c28:	39 f0       	breq	.+14     	; 0xc38 <main+0xc8>
			{
				Clear_AllGlopal_variables();
     c2a:	0e 94 a3 05 	call	0xb46	; 0xb46 <Clear_AllGlopal_variables>
				LCD_display_string("invalid input");
     c2e:	80 e6       	ldi	r24, 0x60	; 96
     c30:	90 e0       	ldi	r25, 0x00	; 0
     c32:	0e 94 4c 15 	call	0x2a98	; 0x2a98 <LCD_display_string>
     c36:	90 c0       	rjmp	.+288    	; 0xd58 <main+0x1e8>
			}
			else
			{
				LCD_disply_character(key);
     c38:	8f 85       	ldd	r24, Y+15	; 0x0f
     c3a:	0e 94 1f 0f 	call	0x1e3e	; 0x1e3e <LCD_disply_character>
				switch(operation)
     c3e:	80 91 78 00 	lds	r24, 0x0078
     c42:	28 2f       	mov	r18, r24
     c44:	30 e0       	ldi	r19, 0x00	; 0
     c46:	39 8b       	std	Y+17, r19	; 0x11
     c48:	28 8b       	std	Y+16, r18	; 0x10
     c4a:	88 89       	ldd	r24, Y+16	; 0x10
     c4c:	99 89       	ldd	r25, Y+17	; 0x11
     c4e:	8a 32       	cpi	r24, 0x2A	; 42
     c50:	91 05       	cpc	r25, r1
     c52:	81 f1       	breq	.+96     	; 0xcb4 <main+0x144>
     c54:	28 89       	ldd	r18, Y+16	; 0x10
     c56:	39 89       	ldd	r19, Y+17	; 0x11
     c58:	2b 32       	cpi	r18, 0x2B	; 43
     c5a:	31 05       	cpc	r19, r1
     c5c:	34 f4       	brge	.+12     	; 0xc6a <main+0xfa>
     c5e:	88 89       	ldd	r24, Y+16	; 0x10
     c60:	99 89       	ldd	r25, Y+17	; 0x11
     c62:	85 32       	cpi	r24, 0x25	; 37
     c64:	91 05       	cpc	r25, r1
     c66:	a1 f1       	breq	.+104    	; 0xcd0 <main+0x160>
     c68:	77 c0       	rjmp	.+238    	; 0xd58 <main+0x1e8>
     c6a:	28 89       	ldd	r18, Y+16	; 0x10
     c6c:	39 89       	ldd	r19, Y+17	; 0x11
     c6e:	2b 32       	cpi	r18, 0x2B	; 43
     c70:	31 05       	cpc	r19, r1
     c72:	31 f0       	breq	.+12     	; 0xc80 <main+0x110>
     c74:	88 89       	ldd	r24, Y+16	; 0x10
     c76:	99 89       	ldd	r25, Y+17	; 0x11
     c78:	8d 32       	cpi	r24, 0x2D	; 45
     c7a:	91 05       	cpc	r25, r1
     c7c:	69 f0       	breq	.+26     	; 0xc98 <main+0x128>
     c7e:	6c c0       	rjmp	.+216    	; 0xd58 <main+0x1e8>
				{
				case '+':
					result = num[0] + num[1];
     c80:	90 91 79 00 	lds	r25, 0x0079
     c84:	80 91 7a 00 	lds	r24, 0x007A
     c88:	89 0f       	add	r24, r25
     c8a:	80 93 7b 00 	sts	0x007B, r24
					LCD_display_integer(result);
     c8e:	80 91 7b 00 	lds	r24, 0x007B
     c92:	0e 94 75 15 	call	0x2aea	; 0x2aea <LCD_display_integer>
     c96:	60 c0       	rjmp	.+192    	; 0xd58 <main+0x1e8>
					break;
				case '-':
					result = num[0] - num[1];
     c98:	90 91 79 00 	lds	r25, 0x0079
     c9c:	80 91 7a 00 	lds	r24, 0x007A
     ca0:	29 2f       	mov	r18, r25
     ca2:	28 1b       	sub	r18, r24
     ca4:	82 2f       	mov	r24, r18
     ca6:	80 93 7b 00 	sts	0x007B, r24
					LCD_display_integer(result);
     caa:	80 91 7b 00 	lds	r24, 0x007B
     cae:	0e 94 75 15 	call	0x2aea	; 0x2aea <LCD_display_integer>
     cb2:	52 c0       	rjmp	.+164    	; 0xd58 <main+0x1e8>
					break;
				case '*':
					result = num[0] * num[1];
     cb4:	90 91 79 00 	lds	r25, 0x0079
     cb8:	80 91 7a 00 	lds	r24, 0x007A
     cbc:	98 9f       	mul	r25, r24
     cbe:	80 2d       	mov	r24, r0
     cc0:	11 24       	eor	r1, r1
     cc2:	80 93 7b 00 	sts	0x007B, r24
					LCD_display_integer(result);
     cc6:	80 91 7b 00 	lds	r24, 0x007B
     cca:	0e 94 75 15 	call	0x2aea	; 0x2aea <LCD_display_integer>
     cce:	44 c0       	rjmp	.+136    	; 0xd58 <main+0x1e8>
					break;
				case '%':
					if(num[0]%num[1]==0)          //no reminder
     cd0:	80 91 79 00 	lds	r24, 0x0079
     cd4:	90 91 7a 00 	lds	r25, 0x007A
     cd8:	69 2f       	mov	r22, r25
     cda:	0e 94 6e 16 	call	0x2cdc	; 0x2cdc <__udivmodqi4>
     cde:	89 2f       	mov	r24, r25
     ce0:	88 23       	and	r24, r24
     ce2:	71 f4       	brne	.+28     	; 0xd00 <main+0x190>
					{
						result = num[0] / num[1];
     ce4:	80 91 79 00 	lds	r24, 0x0079
     ce8:	90 91 7a 00 	lds	r25, 0x007A
     cec:	69 2f       	mov	r22, r25
     cee:	0e 94 6e 16 	call	0x2cdc	; 0x2cdc <__udivmodqi4>
     cf2:	80 93 7b 00 	sts	0x007B, r24
						LCD_display_integer(result);
     cf6:	80 91 7b 00 	lds	r24, 0x007B
     cfa:	0e 94 75 15 	call	0x2aea	; 0x2aea <LCD_display_integer>
     cfe:	2c c0       	rjmp	.+88     	; 0xd58 <main+0x1e8>
					}
					else                          //reminder exist
					{
						result = num[0]*100/num[1];
     d00:	80 91 79 00 	lds	r24, 0x0079
     d04:	28 2f       	mov	r18, r24
     d06:	30 e0       	ldi	r19, 0x00	; 0
     d08:	84 e6       	ldi	r24, 0x64	; 100
     d0a:	90 e0       	ldi	r25, 0x00	; 0
     d0c:	28 9f       	mul	r18, r24
     d0e:	a0 01       	movw	r20, r0
     d10:	29 9f       	mul	r18, r25
     d12:	50 0d       	add	r21, r0
     d14:	38 9f       	mul	r19, r24
     d16:	50 0d       	add	r21, r0
     d18:	11 24       	eor	r1, r1
     d1a:	80 91 7a 00 	lds	r24, 0x007A
     d1e:	28 2f       	mov	r18, r24
     d20:	30 e0       	ldi	r19, 0x00	; 0
     d22:	ca 01       	movw	r24, r20
     d24:	b9 01       	movw	r22, r18
     d26:	0e 94 7a 16 	call	0x2cf4	; 0x2cf4 <__divmodhi4>
     d2a:	cb 01       	movw	r24, r22
     d2c:	80 93 7b 00 	sts	0x007B, r24
						LCD_display_integer(result/100);
     d30:	80 91 7b 00 	lds	r24, 0x007B
     d34:	94 e6       	ldi	r25, 0x64	; 100
     d36:	69 2f       	mov	r22, r25
     d38:	0e 94 6e 16 	call	0x2cdc	; 0x2cdc <__udivmodqi4>
     d3c:	0e 94 75 15 	call	0x2aea	; 0x2aea <LCD_display_integer>
						LCD_disply_character('.');
     d40:	8e e2       	ldi	r24, 0x2E	; 46
     d42:	0e 94 1f 0f 	call	0x1e3e	; 0x1e3e <LCD_disply_character>
						LCD_display_integer(result%100);
     d46:	80 91 7b 00 	lds	r24, 0x007B
     d4a:	94 e6       	ldi	r25, 0x64	; 100
     d4c:	69 2f       	mov	r22, r25
     d4e:	0e 94 6e 16 	call	0x2cdc	; 0x2cdc <__udivmodqi4>
     d52:	89 2f       	mov	r24, r25
     d54:	0e 94 75 15 	call	0x2aea	; 0x2aea <LCD_display_integer>
					}
					break;
				}
			}
		}
		if(key ==  13)                /*the user press the ON button*/
     d58:	8f 85       	ldd	r24, Y+15	; 0x0f
     d5a:	8d 30       	cpi	r24, 0x0D	; 13
     d5c:	11 f4       	brne	.+4      	; 0xd62 <main+0x1f2>
		{
			Clear_AllGlopal_variables();
     d5e:	0e 94 a3 05 	call	0xb46	; 0xb46 <Clear_AllGlopal_variables>
     d62:	80 e0       	ldi	r24, 0x00	; 0
     d64:	90 e0       	ldi	r25, 0x00	; 0
     d66:	aa ef       	ldi	r26, 0xFA	; 250
     d68:	b3 e4       	ldi	r27, 0x43	; 67
     d6a:	8b 87       	std	Y+11, r24	; 0x0b
     d6c:	9c 87       	std	Y+12, r25	; 0x0c
     d6e:	ad 87       	std	Y+13, r26	; 0x0d
     d70:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     d72:	6b 85       	ldd	r22, Y+11	; 0x0b
     d74:	7c 85       	ldd	r23, Y+12	; 0x0c
     d76:	8d 85       	ldd	r24, Y+13	; 0x0d
     d78:	9e 85       	ldd	r25, Y+14	; 0x0e
     d7a:	20 e0       	ldi	r18, 0x00	; 0
     d7c:	30 e0       	ldi	r19, 0x00	; 0
     d7e:	4a e7       	ldi	r20, 0x7A	; 122
     d80:	53 e4       	ldi	r21, 0x43	; 67
     d82:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     d86:	dc 01       	movw	r26, r24
     d88:	cb 01       	movw	r24, r22
     d8a:	8f 83       	std	Y+7, r24	; 0x07
     d8c:	98 87       	std	Y+8, r25	; 0x08
     d8e:	a9 87       	std	Y+9, r26	; 0x09
     d90:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
     d92:	6f 81       	ldd	r22, Y+7	; 0x07
     d94:	78 85       	ldd	r23, Y+8	; 0x08
     d96:	89 85       	ldd	r24, Y+9	; 0x09
     d98:	9a 85       	ldd	r25, Y+10	; 0x0a
     d9a:	20 e0       	ldi	r18, 0x00	; 0
     d9c:	30 e0       	ldi	r19, 0x00	; 0
     d9e:	40 e8       	ldi	r20, 0x80	; 128
     da0:	5f e3       	ldi	r21, 0x3F	; 63
     da2:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     da6:	88 23       	and	r24, r24
     da8:	2c f4       	brge	.+10     	; 0xdb4 <main+0x244>
		__ticks = 1;
     daa:	81 e0       	ldi	r24, 0x01	; 1
     dac:	90 e0       	ldi	r25, 0x00	; 0
     dae:	9e 83       	std	Y+6, r25	; 0x06
     db0:	8d 83       	std	Y+5, r24	; 0x05
     db2:	3f c0       	rjmp	.+126    	; 0xe32 <main+0x2c2>
	else if (__tmp > 65535)
     db4:	6f 81       	ldd	r22, Y+7	; 0x07
     db6:	78 85       	ldd	r23, Y+8	; 0x08
     db8:	89 85       	ldd	r24, Y+9	; 0x09
     dba:	9a 85       	ldd	r25, Y+10	; 0x0a
     dbc:	20 e0       	ldi	r18, 0x00	; 0
     dbe:	3f ef       	ldi	r19, 0xFF	; 255
     dc0:	4f e7       	ldi	r20, 0x7F	; 127
     dc2:	57 e4       	ldi	r21, 0x47	; 71
     dc4:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     dc8:	18 16       	cp	r1, r24
     dca:	4c f5       	brge	.+82     	; 0xe1e <main+0x2ae>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     dcc:	6b 85       	ldd	r22, Y+11	; 0x0b
     dce:	7c 85       	ldd	r23, Y+12	; 0x0c
     dd0:	8d 85       	ldd	r24, Y+13	; 0x0d
     dd2:	9e 85       	ldd	r25, Y+14	; 0x0e
     dd4:	20 e0       	ldi	r18, 0x00	; 0
     dd6:	30 e0       	ldi	r19, 0x00	; 0
     dd8:	40 e2       	ldi	r20, 0x20	; 32
     dda:	51 e4       	ldi	r21, 0x41	; 65
     ddc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     de0:	dc 01       	movw	r26, r24
     de2:	cb 01       	movw	r24, r22
     de4:	bc 01       	movw	r22, r24
     de6:	cd 01       	movw	r24, r26
     de8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     dec:	dc 01       	movw	r26, r24
     dee:	cb 01       	movw	r24, r22
     df0:	9e 83       	std	Y+6, r25	; 0x06
     df2:	8d 83       	std	Y+5, r24	; 0x05
     df4:	0f c0       	rjmp	.+30     	; 0xe14 <main+0x2a4>
     df6:	89 e1       	ldi	r24, 0x19	; 25
     df8:	90 e0       	ldi	r25, 0x00	; 0
     dfa:	9c 83       	std	Y+4, r25	; 0x04
     dfc:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     dfe:	8b 81       	ldd	r24, Y+3	; 0x03
     e00:	9c 81       	ldd	r25, Y+4	; 0x04
     e02:	01 97       	sbiw	r24, 0x01	; 1
     e04:	f1 f7       	brne	.-4      	; 0xe02 <main+0x292>
     e06:	9c 83       	std	Y+4, r25	; 0x04
     e08:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     e0a:	8d 81       	ldd	r24, Y+5	; 0x05
     e0c:	9e 81       	ldd	r25, Y+6	; 0x06
     e0e:	01 97       	sbiw	r24, 0x01	; 1
     e10:	9e 83       	std	Y+6, r25	; 0x06
     e12:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     e14:	8d 81       	ldd	r24, Y+5	; 0x05
     e16:	9e 81       	ldd	r25, Y+6	; 0x06
     e18:	00 97       	sbiw	r24, 0x00	; 0
     e1a:	69 f7       	brne	.-38     	; 0xdf6 <main+0x286>
     e1c:	b5 ce       	rjmp	.-662    	; 0xb88 <main+0x18>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     e1e:	6f 81       	ldd	r22, Y+7	; 0x07
     e20:	78 85       	ldd	r23, Y+8	; 0x08
     e22:	89 85       	ldd	r24, Y+9	; 0x09
     e24:	9a 85       	ldd	r25, Y+10	; 0x0a
     e26:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     e2a:	dc 01       	movw	r26, r24
     e2c:	cb 01       	movw	r24, r22
     e2e:	9e 83       	std	Y+6, r25	; 0x06
     e30:	8d 83       	std	Y+5, r24	; 0x05
     e32:	8d 81       	ldd	r24, Y+5	; 0x05
     e34:	9e 81       	ldd	r25, Y+6	; 0x06
     e36:	9a 83       	std	Y+2, r25	; 0x02
     e38:	89 83       	std	Y+1, r24	; 0x01
     e3a:	89 81       	ldd	r24, Y+1	; 0x01
     e3c:	9a 81       	ldd	r25, Y+2	; 0x02
     e3e:	01 97       	sbiw	r24, 0x01	; 1
     e40:	f1 f7       	brne	.-4      	; 0xe3e <main+0x2ce>
     e42:	9a 83       	std	Y+2, r25	; 0x02
     e44:	89 83       	std	Y+1, r24	; 0x01
     e46:	a0 ce       	rjmp	.-704    	; 0xb88 <main+0x18>

00000e48 <Keypad_get_pressed_key>:
 *                                     Functions Declaration                                 *
 *********************************************************************************************/
/*function to initialize the keypad*/
/*this function to configure the keypad port as input port and configure the type of the keypad*/
extern uint8 Keypad_get_pressed_key(void)
{
     e48:	df 93       	push	r29
     e4a:	cf 93       	push	r28
     e4c:	00 d0       	rcall	.+0      	; 0xe4e <Keypad_get_pressed_key+0x6>
     e4e:	00 d0       	rcall	.+0      	; 0xe50 <Keypad_get_pressed_key+0x8>
     e50:	0f 92       	push	r0
     e52:	cd b7       	in	r28, 0x3d	; 61
     e54:	de b7       	in	r29, 0x3e	; 62
	/*configure the keypad*/
	keypad_config keypab_type;
	keypab_type = Configure_Keypad();
     e56:	0e 94 72 08 	call	0x10e4	; 0x10e4 <Configure_Keypad>
     e5a:	9c 83       	std	Y+4, r25	; 0x04
     e5c:	8b 83       	std	Y+3, r24	; 0x03

	uint8 row,column;
	while(1)
	{
		for(column = 0;column<keypab_type.num_column;column++)
     e5e:	19 82       	std	Y+1, r1	; 0x01
     e60:	59 c0       	rjmp	.+178    	; 0xf14 <Keypad_get_pressed_key+0xcc>
		{
			/*only one column will be output and the others are input*/
			keypad_port_direction = (0b00010000<<column);
     e62:	ea e3       	ldi	r30, 0x3A	; 58
     e64:	f0 e0       	ldi	r31, 0x00	; 0
     e66:	89 81       	ldd	r24, Y+1	; 0x01
     e68:	28 2f       	mov	r18, r24
     e6a:	30 e0       	ldi	r19, 0x00	; 0
     e6c:	80 e1       	ldi	r24, 0x10	; 16
     e6e:	90 e0       	ldi	r25, 0x00	; 0
     e70:	02 c0       	rjmp	.+4      	; 0xe76 <Keypad_get_pressed_key+0x2e>
     e72:	88 0f       	add	r24, r24
     e74:	99 1f       	adc	r25, r25
     e76:	2a 95       	dec	r18
     e78:	e2 f7       	brpl	.-8      	; 0xe72 <Keypad_get_pressed_key+0x2a>
     e7a:	80 83       	st	Z, r24
			/*put one on this output pin(column)*/
			keypad_port_output = ~(0b00010000<<column);
     e7c:	eb e3       	ldi	r30, 0x3B	; 59
     e7e:	f0 e0       	ldi	r31, 0x00	; 0
     e80:	89 81       	ldd	r24, Y+1	; 0x01
     e82:	28 2f       	mov	r18, r24
     e84:	30 e0       	ldi	r19, 0x00	; 0
     e86:	80 e1       	ldi	r24, 0x10	; 16
     e88:	90 e0       	ldi	r25, 0x00	; 0
     e8a:	02 2e       	mov	r0, r18
     e8c:	02 c0       	rjmp	.+4      	; 0xe92 <Keypad_get_pressed_key+0x4a>
     e8e:	88 0f       	add	r24, r24
     e90:	99 1f       	adc	r25, r25
     e92:	0a 94       	dec	r0
     e94:	e2 f7       	brpl	.-8      	; 0xe8e <Keypad_get_pressed_key+0x46>
     e96:	80 95       	com	r24
     e98:	80 83       	st	Z, r24
			/*loop on the rows to see which row read the zero*/
			for(row=0;row<keypab_type.num_row;row++)
     e9a:	1a 82       	std	Y+2, r1	; 0x02
     e9c:	34 c0       	rjmp	.+104    	; 0xf06 <Keypad_get_pressed_key+0xbe>
			{
				if(BIT_IS_CLEAR(keypad_port_input,row))
     e9e:	e9 e3       	ldi	r30, 0x39	; 57
     ea0:	f0 e0       	ldi	r31, 0x00	; 0
     ea2:	80 81       	ld	r24, Z
     ea4:	28 2f       	mov	r18, r24
     ea6:	30 e0       	ldi	r19, 0x00	; 0
     ea8:	8a 81       	ldd	r24, Y+2	; 0x02
     eaa:	88 2f       	mov	r24, r24
     eac:	90 e0       	ldi	r25, 0x00	; 0
     eae:	a9 01       	movw	r20, r18
     eb0:	02 c0       	rjmp	.+4      	; 0xeb6 <Keypad_get_pressed_key+0x6e>
     eb2:	55 95       	asr	r21
     eb4:	47 95       	ror	r20
     eb6:	8a 95       	dec	r24
     eb8:	e2 f7       	brpl	.-8      	; 0xeb2 <Keypad_get_pressed_key+0x6a>
     eba:	ca 01       	movw	r24, r20
     ebc:	81 70       	andi	r24, 0x01	; 1
     ebe:	90 70       	andi	r25, 0x00	; 0
     ec0:	00 97       	sbiw	r24, 0x00	; 0
     ec2:	f1 f4       	brne	.+60     	; 0xf00 <Keypad_get_pressed_key+0xb8>
				{
					/*now you get the row pin which read the zero from the column*/
					/*call the function to calculate the button value*/
					if(keypab_type.num_column == 3)
     ec4:	8b 81       	ldd	r24, Y+3	; 0x03
     ec6:	83 30       	cpi	r24, 0x03	; 3
     ec8:	61 f4       	brne	.+24     	; 0xee2 <Keypad_get_pressed_key+0x9a>
					{
						return keybad_4x3_adjust_number((row*keypab_type.num_column)+column +1);
     eca:	9b 81       	ldd	r25, Y+3	; 0x03
     ecc:	8a 81       	ldd	r24, Y+2	; 0x02
     ece:	98 9f       	mul	r25, r24
     ed0:	90 2d       	mov	r25, r0
     ed2:	11 24       	eor	r1, r1
     ed4:	89 81       	ldd	r24, Y+1	; 0x01
     ed6:	89 0f       	add	r24, r25
     ed8:	8f 5f       	subi	r24, 0xFF	; 255
     eda:	0e 94 3f 08 	call	0x107e	; 0x107e <keybad_4x3_adjust_number>
     ede:	8d 83       	std	Y+5, r24	; 0x05
     ee0:	1f c0       	rjmp	.+62     	; 0xf20 <Keypad_get_pressed_key+0xd8>
					}
					else if(keypab_type.num_column == 4)
     ee2:	8b 81       	ldd	r24, Y+3	; 0x03
     ee4:	84 30       	cpi	r24, 0x04	; 4
     ee6:	61 f4       	brne	.+24     	; 0xf00 <Keypad_get_pressed_key+0xb8>
					{
						return keybad_4x4_adjust_number((row*keypab_type.num_column)+column +1);
     ee8:	9b 81       	ldd	r25, Y+3	; 0x03
     eea:	8a 81       	ldd	r24, Y+2	; 0x02
     eec:	98 9f       	mul	r25, r24
     eee:	90 2d       	mov	r25, r0
     ef0:	11 24       	eor	r1, r1
     ef2:	89 81       	ldd	r24, Y+1	; 0x01
     ef4:	89 0f       	add	r24, r25
     ef6:	8f 5f       	subi	r24, 0xFF	; 255
     ef8:	0e 94 99 07 	call	0xf32	; 0xf32 <keybad_4x4_adjust_number>
     efc:	8d 83       	std	Y+5, r24	; 0x05
     efe:	10 c0       	rjmp	.+32     	; 0xf20 <Keypad_get_pressed_key+0xd8>
			/*only one column will be output and the others are input*/
			keypad_port_direction = (0b00010000<<column);
			/*put one on this output pin(column)*/
			keypad_port_output = ~(0b00010000<<column);
			/*loop on the rows to see which row read the zero*/
			for(row=0;row<keypab_type.num_row;row++)
     f00:	8a 81       	ldd	r24, Y+2	; 0x02
     f02:	8f 5f       	subi	r24, 0xFF	; 255
     f04:	8a 83       	std	Y+2, r24	; 0x02
     f06:	9c 81       	ldd	r25, Y+4	; 0x04
     f08:	8a 81       	ldd	r24, Y+2	; 0x02
     f0a:	89 17       	cp	r24, r25
     f0c:	40 f2       	brcs	.-112    	; 0xe9e <Keypad_get_pressed_key+0x56>
	keypab_type = Configure_Keypad();

	uint8 row,column;
	while(1)
	{
		for(column = 0;column<keypab_type.num_column;column++)
     f0e:	89 81       	ldd	r24, Y+1	; 0x01
     f10:	8f 5f       	subi	r24, 0xFF	; 255
     f12:	89 83       	std	Y+1, r24	; 0x01
     f14:	9b 81       	ldd	r25, Y+3	; 0x03
     f16:	89 81       	ldd	r24, Y+1	; 0x01
     f18:	89 17       	cp	r24, r25
     f1a:	08 f4       	brcc	.+2      	; 0xf1e <Keypad_get_pressed_key+0xd6>
     f1c:	a2 cf       	rjmp	.-188    	; 0xe62 <Keypad_get_pressed_key+0x1a>
     f1e:	9f cf       	rjmp	.-194    	; 0xe5e <Keypad_get_pressed_key+0x16>
						return keybad_4x4_adjust_number((row*keypab_type.num_column)+column +1);
					}
				}
			}
		}
	}
     f20:	8d 81       	ldd	r24, Y+5	; 0x05
}
     f22:	0f 90       	pop	r0
     f24:	0f 90       	pop	r0
     f26:	0f 90       	pop	r0
     f28:	0f 90       	pop	r0
     f2a:	0f 90       	pop	r0
     f2c:	cf 91       	pop	r28
     f2e:	df 91       	pop	r29
     f30:	08 95       	ret

00000f32 <keybad_4x4_adjust_number>:

static uint8 keybad_4x4_adjust_number(uint8 switch_number)
{
     f32:	df 93       	push	r29
     f34:	cf 93       	push	r28
     f36:	00 d0       	rcall	.+0      	; 0xf38 <keybad_4x4_adjust_number+0x6>
     f38:	00 d0       	rcall	.+0      	; 0xf3a <keybad_4x4_adjust_number+0x8>
     f3a:	cd b7       	in	r28, 0x3d	; 61
     f3c:	de b7       	in	r29, 0x3e	; 62
     f3e:	89 83       	std	Y+1, r24	; 0x01
	switch(switch_number)
     f40:	89 81       	ldd	r24, Y+1	; 0x01
     f42:	28 2f       	mov	r18, r24
     f44:	30 e0       	ldi	r19, 0x00	; 0
     f46:	3c 83       	std	Y+4, r19	; 0x04
     f48:	2b 83       	std	Y+3, r18	; 0x03
     f4a:	8b 81       	ldd	r24, Y+3	; 0x03
     f4c:	9c 81       	ldd	r25, Y+4	; 0x04
     f4e:	88 30       	cpi	r24, 0x08	; 8
     f50:	91 05       	cpc	r25, r1
     f52:	09 f4       	brne	.+2      	; 0xf56 <keybad_4x4_adjust_number+0x24>
     f54:	70 c0       	rjmp	.+224    	; 0x1036 <keybad_4x4_adjust_number+0x104>
     f56:	2b 81       	ldd	r18, Y+3	; 0x03
     f58:	3c 81       	ldd	r19, Y+4	; 0x04
     f5a:	29 30       	cpi	r18, 0x09	; 9
     f5c:	31 05       	cpc	r19, r1
     f5e:	5c f5       	brge	.+86     	; 0xfb6 <keybad_4x4_adjust_number+0x84>
     f60:	8b 81       	ldd	r24, Y+3	; 0x03
     f62:	9c 81       	ldd	r25, Y+4	; 0x04
     f64:	84 30       	cpi	r24, 0x04	; 4
     f66:	91 05       	cpc	r25, r1
     f68:	09 f4       	brne	.+2      	; 0xf6c <keybad_4x4_adjust_number+0x3a>
     f6a:	59 c0       	rjmp	.+178    	; 0x101e <keybad_4x4_adjust_number+0xec>
     f6c:	2b 81       	ldd	r18, Y+3	; 0x03
     f6e:	3c 81       	ldd	r19, Y+4	; 0x04
     f70:	25 30       	cpi	r18, 0x05	; 5
     f72:	31 05       	cpc	r19, r1
     f74:	9c f4       	brge	.+38     	; 0xf9c <keybad_4x4_adjust_number+0x6a>
     f76:	8b 81       	ldd	r24, Y+3	; 0x03
     f78:	9c 81       	ldd	r25, Y+4	; 0x04
     f7a:	82 30       	cpi	r24, 0x02	; 2
     f7c:	91 05       	cpc	r25, r1
     f7e:	09 f4       	brne	.+2      	; 0xf82 <keybad_4x4_adjust_number+0x50>
     f80:	48 c0       	rjmp	.+144    	; 0x1012 <keybad_4x4_adjust_number+0xe0>
     f82:	2b 81       	ldd	r18, Y+3	; 0x03
     f84:	3c 81       	ldd	r19, Y+4	; 0x04
     f86:	23 30       	cpi	r18, 0x03	; 3
     f88:	31 05       	cpc	r19, r1
     f8a:	0c f0       	brlt	.+2      	; 0xf8e <keybad_4x4_adjust_number+0x5c>
     f8c:	45 c0       	rjmp	.+138    	; 0x1018 <keybad_4x4_adjust_number+0xe6>
     f8e:	8b 81       	ldd	r24, Y+3	; 0x03
     f90:	9c 81       	ldd	r25, Y+4	; 0x04
     f92:	81 30       	cpi	r24, 0x01	; 1
     f94:	91 05       	cpc	r25, r1
     f96:	09 f4       	brne	.+2      	; 0xf9a <keybad_4x4_adjust_number+0x68>
     f98:	39 c0       	rjmp	.+114    	; 0x100c <keybad_4x4_adjust_number+0xda>
     f9a:	67 c0       	rjmp	.+206    	; 0x106a <keybad_4x4_adjust_number+0x138>
     f9c:	2b 81       	ldd	r18, Y+3	; 0x03
     f9e:	3c 81       	ldd	r19, Y+4	; 0x04
     fa0:	26 30       	cpi	r18, 0x06	; 6
     fa2:	31 05       	cpc	r19, r1
     fa4:	09 f4       	brne	.+2      	; 0xfa8 <keybad_4x4_adjust_number+0x76>
     fa6:	41 c0       	rjmp	.+130    	; 0x102a <keybad_4x4_adjust_number+0xf8>
     fa8:	8b 81       	ldd	r24, Y+3	; 0x03
     faa:	9c 81       	ldd	r25, Y+4	; 0x04
     fac:	87 30       	cpi	r24, 0x07	; 7
     fae:	91 05       	cpc	r25, r1
     fb0:	0c f0       	brlt	.+2      	; 0xfb4 <keybad_4x4_adjust_number+0x82>
     fb2:	3e c0       	rjmp	.+124    	; 0x1030 <keybad_4x4_adjust_number+0xfe>
     fb4:	37 c0       	rjmp	.+110    	; 0x1024 <keybad_4x4_adjust_number+0xf2>
     fb6:	2b 81       	ldd	r18, Y+3	; 0x03
     fb8:	3c 81       	ldd	r19, Y+4	; 0x04
     fba:	2c 30       	cpi	r18, 0x0C	; 12
     fbc:	31 05       	cpc	r19, r1
     fbe:	09 f4       	brne	.+2      	; 0xfc2 <keybad_4x4_adjust_number+0x90>
     fc0:	46 c0       	rjmp	.+140    	; 0x104e <keybad_4x4_adjust_number+0x11c>
     fc2:	8b 81       	ldd	r24, Y+3	; 0x03
     fc4:	9c 81       	ldd	r25, Y+4	; 0x04
     fc6:	8d 30       	cpi	r24, 0x0D	; 13
     fc8:	91 05       	cpc	r25, r1
     fca:	5c f4       	brge	.+22     	; 0xfe2 <keybad_4x4_adjust_number+0xb0>
     fcc:	2b 81       	ldd	r18, Y+3	; 0x03
     fce:	3c 81       	ldd	r19, Y+4	; 0x04
     fd0:	2a 30       	cpi	r18, 0x0A	; 10
     fd2:	31 05       	cpc	r19, r1
     fd4:	b1 f1       	breq	.+108    	; 0x1042 <keybad_4x4_adjust_number+0x110>
     fd6:	8b 81       	ldd	r24, Y+3	; 0x03
     fd8:	9c 81       	ldd	r25, Y+4	; 0x04
     fda:	8b 30       	cpi	r24, 0x0B	; 11
     fdc:	91 05       	cpc	r25, r1
     fde:	a4 f5       	brge	.+104    	; 0x1048 <keybad_4x4_adjust_number+0x116>
     fe0:	2d c0       	rjmp	.+90     	; 0x103c <keybad_4x4_adjust_number+0x10a>
     fe2:	2b 81       	ldd	r18, Y+3	; 0x03
     fe4:	3c 81       	ldd	r19, Y+4	; 0x04
     fe6:	2e 30       	cpi	r18, 0x0E	; 14
     fe8:	31 05       	cpc	r19, r1
     fea:	b9 f1       	breq	.+110    	; 0x105a <keybad_4x4_adjust_number+0x128>
     fec:	8b 81       	ldd	r24, Y+3	; 0x03
     fee:	9c 81       	ldd	r25, Y+4	; 0x04
     ff0:	8e 30       	cpi	r24, 0x0E	; 14
     ff2:	91 05       	cpc	r25, r1
     ff4:	7c f1       	brlt	.+94     	; 0x1054 <keybad_4x4_adjust_number+0x122>
     ff6:	2b 81       	ldd	r18, Y+3	; 0x03
     ff8:	3c 81       	ldd	r19, Y+4	; 0x04
     ffa:	2f 30       	cpi	r18, 0x0F	; 15
     ffc:	31 05       	cpc	r19, r1
     ffe:	79 f1       	breq	.+94     	; 0x105e <keybad_4x4_adjust_number+0x12c>
    1000:	8b 81       	ldd	r24, Y+3	; 0x03
    1002:	9c 81       	ldd	r25, Y+4	; 0x04
    1004:	80 31       	cpi	r24, 0x10	; 16
    1006:	91 05       	cpc	r25, r1
    1008:	69 f1       	breq	.+90     	; 0x1064 <keybad_4x4_adjust_number+0x132>
    100a:	2f c0       	rjmp	.+94     	; 0x106a <keybad_4x4_adjust_number+0x138>
	{
	case 1:
		return 7;
    100c:	97 e0       	ldi	r25, 0x07	; 7
    100e:	9a 83       	std	Y+2, r25	; 0x02
    1010:	2e c0       	rjmp	.+92     	; 0x106e <keybad_4x4_adjust_number+0x13c>
		break;
	case 2:
		return 8;
    1012:	28 e0       	ldi	r18, 0x08	; 8
    1014:	2a 83       	std	Y+2, r18	; 0x02
    1016:	2b c0       	rjmp	.+86     	; 0x106e <keybad_4x4_adjust_number+0x13c>
		break;
	case 3:
		return 9;
    1018:	39 e0       	ldi	r19, 0x09	; 9
    101a:	3a 83       	std	Y+2, r19	; 0x02
    101c:	28 c0       	rjmp	.+80     	; 0x106e <keybad_4x4_adjust_number+0x13c>
		break;
	case 4:
		return '%';
    101e:	85 e2       	ldi	r24, 0x25	; 37
    1020:	8a 83       	std	Y+2, r24	; 0x02
    1022:	25 c0       	rjmp	.+74     	; 0x106e <keybad_4x4_adjust_number+0x13c>
		break;
	case 5:
		return 4;
    1024:	94 e0       	ldi	r25, 0x04	; 4
    1026:	9a 83       	std	Y+2, r25	; 0x02
    1028:	22 c0       	rjmp	.+68     	; 0x106e <keybad_4x4_adjust_number+0x13c>
		break;
	case 6:
		return 5;
    102a:	25 e0       	ldi	r18, 0x05	; 5
    102c:	2a 83       	std	Y+2, r18	; 0x02
    102e:	1f c0       	rjmp	.+62     	; 0x106e <keybad_4x4_adjust_number+0x13c>
		break;
	case 7:
		return 6;
    1030:	36 e0       	ldi	r19, 0x06	; 6
    1032:	3a 83       	std	Y+2, r19	; 0x02
    1034:	1c c0       	rjmp	.+56     	; 0x106e <keybad_4x4_adjust_number+0x13c>
		break;
	case 8:
		return '*';
    1036:	8a e2       	ldi	r24, 0x2A	; 42
    1038:	8a 83       	std	Y+2, r24	; 0x02
    103a:	19 c0       	rjmp	.+50     	; 0x106e <keybad_4x4_adjust_number+0x13c>
		break;
	case 9:
		return 1;
    103c:	91 e0       	ldi	r25, 0x01	; 1
    103e:	9a 83       	std	Y+2, r25	; 0x02
    1040:	16 c0       	rjmp	.+44     	; 0x106e <keybad_4x4_adjust_number+0x13c>
		break;
	case 10:
		return 2;
    1042:	22 e0       	ldi	r18, 0x02	; 2
    1044:	2a 83       	std	Y+2, r18	; 0x02
    1046:	13 c0       	rjmp	.+38     	; 0x106e <keybad_4x4_adjust_number+0x13c>
		break;
	case 11:
		return 3;
    1048:	33 e0       	ldi	r19, 0x03	; 3
    104a:	3a 83       	std	Y+2, r19	; 0x02
    104c:	10 c0       	rjmp	.+32     	; 0x106e <keybad_4x4_adjust_number+0x13c>
		break;
	case 12:
		return '-';
    104e:	8d e2       	ldi	r24, 0x2D	; 45
    1050:	8a 83       	std	Y+2, r24	; 0x02
    1052:	0d c0       	rjmp	.+26     	; 0x106e <keybad_4x4_adjust_number+0x13c>
		break;
	case 13:
		return 13;            /*ASCII of the enter*/
    1054:	9d e0       	ldi	r25, 0x0D	; 13
    1056:	9a 83       	std	Y+2, r25	; 0x02
    1058:	0a c0       	rjmp	.+20     	; 0x106e <keybad_4x4_adjust_number+0x13c>
		break;
	case 14:
		return 0;
    105a:	1a 82       	std	Y+2, r1	; 0x02
    105c:	08 c0       	rjmp	.+16     	; 0x106e <keybad_4x4_adjust_number+0x13c>
		break;
	case 15:
		return '=';
    105e:	2d e3       	ldi	r18, 0x3D	; 61
    1060:	2a 83       	std	Y+2, r18	; 0x02
    1062:	05 c0       	rjmp	.+10     	; 0x106e <keybad_4x4_adjust_number+0x13c>
		break;
	case 16:
		return '+';
    1064:	3b e2       	ldi	r19, 0x2B	; 43
    1066:	3a 83       	std	Y+2, r19	; 0x02
    1068:	02 c0       	rjmp	.+4      	; 0x106e <keybad_4x4_adjust_number+0x13c>
		break;
	default:
		return switch_number;
    106a:	89 81       	ldd	r24, Y+1	; 0x01
    106c:	8a 83       	std	Y+2, r24	; 0x02
    106e:	8a 81       	ldd	r24, Y+2	; 0x02
	}
}
    1070:	0f 90       	pop	r0
    1072:	0f 90       	pop	r0
    1074:	0f 90       	pop	r0
    1076:	0f 90       	pop	r0
    1078:	cf 91       	pop	r28
    107a:	df 91       	pop	r29
    107c:	08 95       	ret

0000107e <keybad_4x3_adjust_number>:

static uint8 keybad_4x3_adjust_number(uint8 switch_number)
{
    107e:	df 93       	push	r29
    1080:	cf 93       	push	r28
    1082:	00 d0       	rcall	.+0      	; 0x1084 <keybad_4x3_adjust_number+0x6>
    1084:	00 d0       	rcall	.+0      	; 0x1086 <keybad_4x3_adjust_number+0x8>
    1086:	cd b7       	in	r28, 0x3d	; 61
    1088:	de b7       	in	r29, 0x3e	; 62
    108a:	89 83       	std	Y+1, r24	; 0x01
	switch(switch_number)
    108c:	89 81       	ldd	r24, Y+1	; 0x01
    108e:	28 2f       	mov	r18, r24
    1090:	30 e0       	ldi	r19, 0x00	; 0
    1092:	3c 83       	std	Y+4, r19	; 0x04
    1094:	2b 83       	std	Y+3, r18	; 0x03
    1096:	8b 81       	ldd	r24, Y+3	; 0x03
    1098:	9c 81       	ldd	r25, Y+4	; 0x04
    109a:	8a 30       	cpi	r24, 0x0A	; 10
    109c:	91 05       	cpc	r25, r1
    109e:	81 f0       	breq	.+32     	; 0x10c0 <keybad_4x3_adjust_number+0x42>
    10a0:	2b 81       	ldd	r18, Y+3	; 0x03
    10a2:	3c 81       	ldd	r19, Y+4	; 0x04
    10a4:	2a 30       	cpi	r18, 0x0A	; 10
    10a6:	31 05       	cpc	r19, r1
    10a8:	9c f0       	brlt	.+38     	; 0x10d0 <keybad_4x3_adjust_number+0x52>
    10aa:	8b 81       	ldd	r24, Y+3	; 0x03
    10ac:	9c 81       	ldd	r25, Y+4	; 0x04
    10ae:	8b 30       	cpi	r24, 0x0B	; 11
    10b0:	91 05       	cpc	r25, r1
    10b2:	49 f0       	breq	.+18     	; 0x10c6 <keybad_4x3_adjust_number+0x48>
    10b4:	2b 81       	ldd	r18, Y+3	; 0x03
    10b6:	3c 81       	ldd	r19, Y+4	; 0x04
    10b8:	2c 30       	cpi	r18, 0x0C	; 12
    10ba:	31 05       	cpc	r19, r1
    10bc:	31 f0       	breq	.+12     	; 0x10ca <keybad_4x3_adjust_number+0x4c>
    10be:	08 c0       	rjmp	.+16     	; 0x10d0 <keybad_4x3_adjust_number+0x52>
	{
	case 10:
		return '*';
    10c0:	3a e2       	ldi	r19, 0x2A	; 42
    10c2:	3a 83       	std	Y+2, r19	; 0x02
    10c4:	07 c0       	rjmp	.+14     	; 0x10d4 <keybad_4x3_adjust_number+0x56>
		break;
	case 11:
		return 0;
    10c6:	1a 82       	std	Y+2, r1	; 0x02
    10c8:	05 c0       	rjmp	.+10     	; 0x10d4 <keybad_4x3_adjust_number+0x56>
		break;
	case 12:
		return '#';
    10ca:	83 e2       	ldi	r24, 0x23	; 35
    10cc:	8a 83       	std	Y+2, r24	; 0x02
    10ce:	02 c0       	rjmp	.+4      	; 0x10d4 <keybad_4x3_adjust_number+0x56>
		break;
	default:
		return switch_number;
    10d0:	99 81       	ldd	r25, Y+1	; 0x01
    10d2:	9a 83       	std	Y+2, r25	; 0x02
    10d4:	8a 81       	ldd	r24, Y+2	; 0x02
	}
}
    10d6:	0f 90       	pop	r0
    10d8:	0f 90       	pop	r0
    10da:	0f 90       	pop	r0
    10dc:	0f 90       	pop	r0
    10de:	cf 91       	pop	r28
    10e0:	df 91       	pop	r29
    10e2:	08 95       	ret

000010e4 <Configure_Keypad>:

/*********************************************************************************************
 *                                     Functions Definitions                                 *
 *********************************************************************************************/
extern keypad_config Configure_Keypad(void)
{
    10e4:	df 93       	push	r29
    10e6:	cf 93       	push	r28
    10e8:	00 d0       	rcall	.+0      	; 0x10ea <Configure_Keypad+0x6>
    10ea:	cd b7       	in	r28, 0x3d	; 61
    10ec:	de b7       	in	r29, 0x3e	; 62
	keypad_config keypad_type;
	/*initialize the keypad type*/
	keypad_type.num_column = 4;         //four column
    10ee:	84 e0       	ldi	r24, 0x04	; 4
    10f0:	89 83       	std	Y+1, r24	; 0x01
	keypad_type.num_row = 4;            //four rows
    10f2:	84 e0       	ldi	r24, 0x04	; 4
    10f4:	8a 83       	std	Y+2, r24	; 0x02
	return keypad_type;
    10f6:	89 81       	ldd	r24, Y+1	; 0x01
    10f8:	9a 81       	ldd	r25, Y+2	; 0x02
}
    10fa:	0f 90       	pop	r0
    10fc:	0f 90       	pop	r0
    10fe:	cf 91       	pop	r28
    1100:	df 91       	pop	r29
    1102:	08 95       	ret

00001104 <LCD_init>:
/********************************************************************************************
 *                                   Functions Definitions                                  *
 ********************************************************************************************/
/*function to initialize the LCD*/
void LCD_init(void)
{
    1104:	df 93       	push	r29
    1106:	cf 93       	push	r28
    1108:	cd b7       	in	r28, 0x3d	; 61
    110a:	de b7       	in	r29, 0x3e	; 62
    110c:	28 97       	sbiw	r28, 0x08	; 8
    110e:	0f b6       	in	r0, 0x3f	; 63
    1110:	f8 94       	cli
    1112:	de bf       	out	0x3e, r29	; 62
    1114:	0f be       	out	0x3f, r0	; 63
    1116:	cd bf       	out	0x3d, r28	; 61
	LCD_CTRL_PORT_DIR |= (1<<E) | (1<<RS) | (1<<RW); /* Configure the control pins(E,RS,RW) as output pins */
    1118:	a7 e3       	ldi	r26, 0x37	; 55
    111a:	b0 e0       	ldi	r27, 0x00	; 0
    111c:	e7 e3       	ldi	r30, 0x37	; 55
    111e:	f0 e0       	ldi	r31, 0x00	; 0
    1120:	80 81       	ld	r24, Z
    1122:	80 67       	ori	r24, 0x70	; 112
    1124:	8c 93       	st	X, r24

	/*structure to hold the configuration*/

	LCD = Configure_LCD();
    1126:	0e 94 28 16 	call	0x2c50	; 0x2c50 <Configure_LCD>
    112a:	69 83       	std	Y+1, r22	; 0x01
    112c:	7a 83       	std	Y+2, r23	; 0x02
    112e:	8b 83       	std	Y+3, r24	; 0x03
    1130:	8c e7       	ldi	r24, 0x7C	; 124
    1132:	90 e0       	ldi	r25, 0x00	; 0
    1134:	9d 83       	std	Y+5, r25	; 0x05
    1136:	8c 83       	std	Y+4, r24	; 0x04
    1138:	fe 01       	movw	r30, r28
    113a:	31 96       	adiw	r30, 0x01	; 1
    113c:	ff 83       	std	Y+7, r31	; 0x07
    113e:	ee 83       	std	Y+6, r30	; 0x06
    1140:	f3 e0       	ldi	r31, 0x03	; 3
    1142:	f8 87       	std	Y+8, r31	; 0x08
    1144:	ee 81       	ldd	r30, Y+6	; 0x06
    1146:	ff 81       	ldd	r31, Y+7	; 0x07
    1148:	00 80       	ld	r0, Z
    114a:	8e 81       	ldd	r24, Y+6	; 0x06
    114c:	9f 81       	ldd	r25, Y+7	; 0x07
    114e:	01 96       	adiw	r24, 0x01	; 1
    1150:	9f 83       	std	Y+7, r25	; 0x07
    1152:	8e 83       	std	Y+6, r24	; 0x06
    1154:	ec 81       	ldd	r30, Y+4	; 0x04
    1156:	fd 81       	ldd	r31, Y+5	; 0x05
    1158:	00 82       	st	Z, r0
    115a:	8c 81       	ldd	r24, Y+4	; 0x04
    115c:	9d 81       	ldd	r25, Y+5	; 0x05
    115e:	01 96       	adiw	r24, 0x01	; 1
    1160:	9d 83       	std	Y+5, r25	; 0x05
    1162:	8c 83       	std	Y+4, r24	; 0x04
    1164:	98 85       	ldd	r25, Y+8	; 0x08
    1166:	91 50       	subi	r25, 0x01	; 1
    1168:	98 87       	std	Y+8, r25	; 0x08
    116a:	e8 85       	ldd	r30, Y+8	; 0x08
    116c:	ee 23       	and	r30, r30
    116e:	51 f7       	brne	.-44     	; 0x1144 <LCD_init+0x40>

	if(LCD.type == LCD_Four_BIT_MODE)
    1170:	80 91 7c 00 	lds	r24, 0x007C
    1174:	82 30       	cpi	r24, 0x02	; 2
    1176:	d9 f4       	brne	.+54     	; 0x11ae <LCD_init+0xaa>
	{
        if(LCD.bit_mode==Upper_mode)
    1178:	80 91 7e 00 	lds	r24, 0x007E
    117c:	88 23       	and	r24, r24
    117e:	41 f4       	brne	.+16     	; 0x1190 <LCD_init+0x8c>
        {
        	LCD_DATA_PORT_DIR |= 0xF0; /* Configure the highest 4 bits of the data port as output pins */
    1180:	a1 e3       	ldi	r26, 0x31	; 49
    1182:	b0 e0       	ldi	r27, 0x00	; 0
    1184:	e1 e3       	ldi	r30, 0x31	; 49
    1186:	f0 e0       	ldi	r31, 0x00	; 0
    1188:	80 81       	ld	r24, Z
    118a:	80 6f       	ori	r24, 0xF0	; 240
    118c:	8c 93       	st	X, r24
    118e:	0b c0       	rjmp	.+22     	; 0x11a6 <LCD_init+0xa2>
        }
		else if(LCD.bit_mode==lower_mode)
    1190:	80 91 7e 00 	lds	r24, 0x007E
    1194:	81 30       	cpi	r24, 0x01	; 1
    1196:	39 f4       	brne	.+14     	; 0x11a6 <LCD_init+0xa2>
		{
			LCD_DATA_PORT_DIR |= 0x0F; /* Configure the lowest 4 bits of the data port as output pins */
    1198:	a1 e3       	ldi	r26, 0x31	; 49
    119a:	b0 e0       	ldi	r27, 0x00	; 0
    119c:	e1 e3       	ldi	r30, 0x31	; 49
    119e:	f0 e0       	ldi	r31, 0x00	; 0
    11a0:	80 81       	ld	r24, Z
    11a2:	8f 60       	ori	r24, 0x0F	; 15
    11a4:	8c 93       	st	X, r24
		}
		LCD_sendCommand(LCD_Four_BIT_MODE); /* initialize LCD in 4-bit mode */
    11a6:	82 e0       	ldi	r24, 0x02	; 2
    11a8:	0e 94 f3 08 	call	0x11e6	; 0x11e6 <LCD_sendCommand>
    11ac:	08 c0       	rjmp	.+16     	; 0x11be <LCD_init+0xba>
	}
	else if(LCD.type == TWO_LINE_LCD_Eight_BIT_MODE)
    11ae:	80 91 7c 00 	lds	r24, 0x007C
    11b2:	88 33       	cpi	r24, 0x38	; 56
    11b4:	21 f4       	brne	.+8      	; 0x11be <LCD_init+0xba>
	{
		LCD_DATA_PORT_DIR = 0xFF;           /* Configure the data port as output port */
    11b6:	e1 e3       	ldi	r30, 0x31	; 49
    11b8:	f0 e0       	ldi	r31, 0x00	; 0
    11ba:	8f ef       	ldi	r24, 0xFF	; 255
    11bc:	80 83       	st	Z, r24
	}
	LCD_sendCommand(LCD.type);
    11be:	80 91 7c 00 	lds	r24, 0x007C
    11c2:	0e 94 f3 08 	call	0x11e6	; 0x11e6 <LCD_sendCommand>
	LCD_sendCommand(LCD.cursor);
    11c6:	80 91 7d 00 	lds	r24, 0x007D
    11ca:	0e 94 f3 08 	call	0x11e6	; 0x11e6 <LCD_sendCommand>
	LCD_sendCommand(CLEAR_COMMAND);
    11ce:	81 e0       	ldi	r24, 0x01	; 1
    11d0:	0e 94 f3 08 	call	0x11e6	; 0x11e6 <LCD_sendCommand>
}
    11d4:	28 96       	adiw	r28, 0x08	; 8
    11d6:	0f b6       	in	r0, 0x3f	; 63
    11d8:	f8 94       	cli
    11da:	de bf       	out	0x3e, r29	; 62
    11dc:	0f be       	out	0x3f, r0	; 63
    11de:	cd bf       	out	0x3d, r28	; 61
    11e0:	cf 91       	pop	r28
    11e2:	df 91       	pop	r29
    11e4:	08 95       	ret

000011e6 <LCD_sendCommand>:
/*function to send a command to the LCD*/
void LCD_sendCommand(uint8 command)
{
    11e6:	0f 93       	push	r16
    11e8:	1f 93       	push	r17
    11ea:	df 93       	push	r29
    11ec:	cf 93       	push	r28
    11ee:	cd b7       	in	r28, 0x3d	; 61
    11f0:	de b7       	in	r29, 0x3e	; 62
    11f2:	c7 58       	subi	r28, 0x87	; 135
    11f4:	d0 40       	sbci	r29, 0x00	; 0
    11f6:	0f b6       	in	r0, 0x3f	; 63
    11f8:	f8 94       	cli
    11fa:	de bf       	out	0x3e, r29	; 62
    11fc:	0f be       	out	0x3f, r0	; 63
    11fe:	cd bf       	out	0x3d, r28	; 61
    1200:	fe 01       	movw	r30, r28
    1202:	e1 58       	subi	r30, 0x81	; 129
    1204:	ff 4f       	sbci	r31, 0xFF	; 255
    1206:	80 83       	st	Z, r24
	LCD = Configure_LCD();
    1208:	0e 94 28 16 	call	0x2c50	; 0x2c50 <Configure_LCD>
    120c:	fe 01       	movw	r30, r28
    120e:	e0 58       	subi	r30, 0x80	; 128
    1210:	ff 4f       	sbci	r31, 0xFF	; 255
    1212:	60 83       	st	Z, r22
    1214:	fe 01       	movw	r30, r28
    1216:	ef 57       	subi	r30, 0x7F	; 127
    1218:	ff 4f       	sbci	r31, 0xFF	; 255
    121a:	70 83       	st	Z, r23
    121c:	fe 01       	movw	r30, r28
    121e:	ee 57       	subi	r30, 0x7E	; 126
    1220:	ff 4f       	sbci	r31, 0xFF	; 255
    1222:	80 83       	st	Z, r24
    1224:	ce 01       	movw	r24, r28
    1226:	80 58       	subi	r24, 0x80	; 128
    1228:	9f 4f       	sbci	r25, 0xFF	; 255
    122a:	2c e7       	ldi	r18, 0x7C	; 124
    122c:	30 e0       	ldi	r19, 0x00	; 0
    122e:	cd 57       	subi	r28, 0x7D	; 125
    1230:	df 4f       	sbci	r29, 0xFF	; 255
    1232:	39 83       	std	Y+1, r19	; 0x01
    1234:	28 83       	st	Y, r18
    1236:	c3 58       	subi	r28, 0x83	; 131
    1238:	d0 40       	sbci	r29, 0x00	; 0
    123a:	cb 57       	subi	r28, 0x7B	; 123
    123c:	df 4f       	sbci	r29, 0xFF	; 255
    123e:	99 83       	std	Y+1, r25	; 0x01
    1240:	88 83       	st	Y, r24
    1242:	c5 58       	subi	r28, 0x85	; 133
    1244:	d0 40       	sbci	r29, 0x00	; 0
    1246:	33 e0       	ldi	r19, 0x03	; 3
    1248:	c9 57       	subi	r28, 0x79	; 121
    124a:	df 4f       	sbci	r29, 0xFF	; 255
    124c:	38 83       	st	Y, r19
    124e:	c7 58       	subi	r28, 0x87	; 135
    1250:	d0 40       	sbci	r29, 0x00	; 0
    1252:	cb 57       	subi	r28, 0x7B	; 123
    1254:	df 4f       	sbci	r29, 0xFF	; 255
    1256:	e8 81       	ld	r30, Y
    1258:	f9 81       	ldd	r31, Y+1	; 0x01
    125a:	c5 58       	subi	r28, 0x85	; 133
    125c:	d0 40       	sbci	r29, 0x00	; 0
    125e:	00 80       	ld	r0, Z
    1260:	cb 57       	subi	r28, 0x7B	; 123
    1262:	df 4f       	sbci	r29, 0xFF	; 255
    1264:	28 81       	ld	r18, Y
    1266:	39 81       	ldd	r19, Y+1	; 0x01
    1268:	c5 58       	subi	r28, 0x85	; 133
    126a:	d0 40       	sbci	r29, 0x00	; 0
    126c:	2f 5f       	subi	r18, 0xFF	; 255
    126e:	3f 4f       	sbci	r19, 0xFF	; 255
    1270:	cb 57       	subi	r28, 0x7B	; 123
    1272:	df 4f       	sbci	r29, 0xFF	; 255
    1274:	39 83       	std	Y+1, r19	; 0x01
    1276:	28 83       	st	Y, r18
    1278:	c5 58       	subi	r28, 0x85	; 133
    127a:	d0 40       	sbci	r29, 0x00	; 0
    127c:	cd 57       	subi	r28, 0x7D	; 125
    127e:	df 4f       	sbci	r29, 0xFF	; 255
    1280:	e8 81       	ld	r30, Y
    1282:	f9 81       	ldd	r31, Y+1	; 0x01
    1284:	c3 58       	subi	r28, 0x83	; 131
    1286:	d0 40       	sbci	r29, 0x00	; 0
    1288:	00 82       	st	Z, r0
    128a:	cd 57       	subi	r28, 0x7D	; 125
    128c:	df 4f       	sbci	r29, 0xFF	; 255
    128e:	28 81       	ld	r18, Y
    1290:	39 81       	ldd	r19, Y+1	; 0x01
    1292:	c3 58       	subi	r28, 0x83	; 131
    1294:	d0 40       	sbci	r29, 0x00	; 0
    1296:	2f 5f       	subi	r18, 0xFF	; 255
    1298:	3f 4f       	sbci	r19, 0xFF	; 255
    129a:	cd 57       	subi	r28, 0x7D	; 125
    129c:	df 4f       	sbci	r29, 0xFF	; 255
    129e:	39 83       	std	Y+1, r19	; 0x01
    12a0:	28 83       	st	Y, r18
    12a2:	c3 58       	subi	r28, 0x83	; 131
    12a4:	d0 40       	sbci	r29, 0x00	; 0
    12a6:	c9 57       	subi	r28, 0x79	; 121
    12a8:	df 4f       	sbci	r29, 0xFF	; 255
    12aa:	38 81       	ld	r19, Y
    12ac:	c7 58       	subi	r28, 0x87	; 135
    12ae:	d0 40       	sbci	r29, 0x00	; 0
    12b0:	31 50       	subi	r19, 0x01	; 1
    12b2:	c9 57       	subi	r28, 0x79	; 121
    12b4:	df 4f       	sbci	r29, 0xFF	; 255
    12b6:	38 83       	st	Y, r19
    12b8:	c7 58       	subi	r28, 0x87	; 135
    12ba:	d0 40       	sbci	r29, 0x00	; 0
    12bc:	c9 57       	subi	r28, 0x79	; 121
    12be:	df 4f       	sbci	r29, 0xFF	; 255
    12c0:	88 81       	ld	r24, Y
    12c2:	c7 58       	subi	r28, 0x87	; 135
    12c4:	d0 40       	sbci	r29, 0x00	; 0
    12c6:	88 23       	and	r24, r24
    12c8:	21 f6       	brne	.-120    	; 0x1252 <LCD_sendCommand+0x6c>
	CLEAR_BIT(LCD_CTRL_PORT,RS); /* Instruction Mode RS=0 */
    12ca:	a8 e3       	ldi	r26, 0x38	; 56
    12cc:	b0 e0       	ldi	r27, 0x00	; 0
    12ce:	e8 e3       	ldi	r30, 0x38	; 56
    12d0:	f0 e0       	ldi	r31, 0x00	; 0
    12d2:	80 81       	ld	r24, Z
    12d4:	8f 7e       	andi	r24, 0xEF	; 239
    12d6:	8c 93       	st	X, r24
	CLEAR_BIT(LCD_CTRL_PORT,RW); /* write data to LCD so RW=0 */
    12d8:	a8 e3       	ldi	r26, 0x38	; 56
    12da:	b0 e0       	ldi	r27, 0x00	; 0
    12dc:	e8 e3       	ldi	r30, 0x38	; 56
    12de:	f0 e0       	ldi	r31, 0x00	; 0
    12e0:	80 81       	ld	r24, Z
    12e2:	8f 7d       	andi	r24, 0xDF	; 223
    12e4:	8c 93       	st	X, r24
    12e6:	fe 01       	movw	r30, r28
    12e8:	e5 58       	subi	r30, 0x85	; 133
    12ea:	ff 4f       	sbci	r31, 0xFF	; 255
    12ec:	80 e0       	ldi	r24, 0x00	; 0
    12ee:	90 e0       	ldi	r25, 0x00	; 0
    12f0:	a0 e8       	ldi	r26, 0x80	; 128
    12f2:	bf e3       	ldi	r27, 0x3F	; 63
    12f4:	80 83       	st	Z, r24
    12f6:	91 83       	std	Z+1, r25	; 0x01
    12f8:	a2 83       	std	Z+2, r26	; 0x02
    12fa:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    12fc:	8e 01       	movw	r16, r28
    12fe:	09 58       	subi	r16, 0x89	; 137
    1300:	1f 4f       	sbci	r17, 0xFF	; 255
    1302:	fe 01       	movw	r30, r28
    1304:	e5 58       	subi	r30, 0x85	; 133
    1306:	ff 4f       	sbci	r31, 0xFF	; 255
    1308:	60 81       	ld	r22, Z
    130a:	71 81       	ldd	r23, Z+1	; 0x01
    130c:	82 81       	ldd	r24, Z+2	; 0x02
    130e:	93 81       	ldd	r25, Z+3	; 0x03
    1310:	20 e0       	ldi	r18, 0x00	; 0
    1312:	30 e0       	ldi	r19, 0x00	; 0
    1314:	4a e7       	ldi	r20, 0x7A	; 122
    1316:	53 e4       	ldi	r21, 0x43	; 67
    1318:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    131c:	dc 01       	movw	r26, r24
    131e:	cb 01       	movw	r24, r22
    1320:	f8 01       	movw	r30, r16
    1322:	80 83       	st	Z, r24
    1324:	91 83       	std	Z+1, r25	; 0x01
    1326:	a2 83       	std	Z+2, r26	; 0x02
    1328:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    132a:	fe 01       	movw	r30, r28
    132c:	e9 58       	subi	r30, 0x89	; 137
    132e:	ff 4f       	sbci	r31, 0xFF	; 255
    1330:	60 81       	ld	r22, Z
    1332:	71 81       	ldd	r23, Z+1	; 0x01
    1334:	82 81       	ldd	r24, Z+2	; 0x02
    1336:	93 81       	ldd	r25, Z+3	; 0x03
    1338:	20 e0       	ldi	r18, 0x00	; 0
    133a:	30 e0       	ldi	r19, 0x00	; 0
    133c:	40 e8       	ldi	r20, 0x80	; 128
    133e:	5f e3       	ldi	r21, 0x3F	; 63
    1340:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1344:	88 23       	and	r24, r24
    1346:	44 f4       	brge	.+16     	; 0x1358 <LCD_sendCommand+0x172>
		__ticks = 1;
    1348:	fe 01       	movw	r30, r28
    134a:	eb 58       	subi	r30, 0x8B	; 139
    134c:	ff 4f       	sbci	r31, 0xFF	; 255
    134e:	81 e0       	ldi	r24, 0x01	; 1
    1350:	90 e0       	ldi	r25, 0x00	; 0
    1352:	91 83       	std	Z+1, r25	; 0x01
    1354:	80 83       	st	Z, r24
    1356:	64 c0       	rjmp	.+200    	; 0x1420 <LCD_sendCommand+0x23a>
	else if (__tmp > 65535)
    1358:	fe 01       	movw	r30, r28
    135a:	e9 58       	subi	r30, 0x89	; 137
    135c:	ff 4f       	sbci	r31, 0xFF	; 255
    135e:	60 81       	ld	r22, Z
    1360:	71 81       	ldd	r23, Z+1	; 0x01
    1362:	82 81       	ldd	r24, Z+2	; 0x02
    1364:	93 81       	ldd	r25, Z+3	; 0x03
    1366:	20 e0       	ldi	r18, 0x00	; 0
    1368:	3f ef       	ldi	r19, 0xFF	; 255
    136a:	4f e7       	ldi	r20, 0x7F	; 127
    136c:	57 e4       	ldi	r21, 0x47	; 71
    136e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1372:	18 16       	cp	r1, r24
    1374:	0c f0       	brlt	.+2      	; 0x1378 <LCD_sendCommand+0x192>
    1376:	43 c0       	rjmp	.+134    	; 0x13fe <LCD_sendCommand+0x218>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1378:	fe 01       	movw	r30, r28
    137a:	e5 58       	subi	r30, 0x85	; 133
    137c:	ff 4f       	sbci	r31, 0xFF	; 255
    137e:	60 81       	ld	r22, Z
    1380:	71 81       	ldd	r23, Z+1	; 0x01
    1382:	82 81       	ldd	r24, Z+2	; 0x02
    1384:	93 81       	ldd	r25, Z+3	; 0x03
    1386:	20 e0       	ldi	r18, 0x00	; 0
    1388:	30 e0       	ldi	r19, 0x00	; 0
    138a:	40 e2       	ldi	r20, 0x20	; 32
    138c:	51 e4       	ldi	r21, 0x41	; 65
    138e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1392:	dc 01       	movw	r26, r24
    1394:	cb 01       	movw	r24, r22
    1396:	8e 01       	movw	r16, r28
    1398:	0b 58       	subi	r16, 0x8B	; 139
    139a:	1f 4f       	sbci	r17, 0xFF	; 255
    139c:	bc 01       	movw	r22, r24
    139e:	cd 01       	movw	r24, r26
    13a0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    13a4:	dc 01       	movw	r26, r24
    13a6:	cb 01       	movw	r24, r22
    13a8:	f8 01       	movw	r30, r16
    13aa:	91 83       	std	Z+1, r25	; 0x01
    13ac:	80 83       	st	Z, r24
    13ae:	1f c0       	rjmp	.+62     	; 0x13ee <LCD_sendCommand+0x208>
    13b0:	fe 01       	movw	r30, r28
    13b2:	ed 58       	subi	r30, 0x8D	; 141
    13b4:	ff 4f       	sbci	r31, 0xFF	; 255
    13b6:	89 e1       	ldi	r24, 0x19	; 25
    13b8:	90 e0       	ldi	r25, 0x00	; 0
    13ba:	91 83       	std	Z+1, r25	; 0x01
    13bc:	80 83       	st	Z, r24
    13be:	fe 01       	movw	r30, r28
    13c0:	ed 58       	subi	r30, 0x8D	; 141
    13c2:	ff 4f       	sbci	r31, 0xFF	; 255
    13c4:	80 81       	ld	r24, Z
    13c6:	91 81       	ldd	r25, Z+1	; 0x01
    13c8:	01 97       	sbiw	r24, 0x01	; 1
    13ca:	f1 f7       	brne	.-4      	; 0x13c8 <LCD_sendCommand+0x1e2>
    13cc:	fe 01       	movw	r30, r28
    13ce:	ed 58       	subi	r30, 0x8D	; 141
    13d0:	ff 4f       	sbci	r31, 0xFF	; 255
    13d2:	91 83       	std	Z+1, r25	; 0x01
    13d4:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    13d6:	de 01       	movw	r26, r28
    13d8:	ab 58       	subi	r26, 0x8B	; 139
    13da:	bf 4f       	sbci	r27, 0xFF	; 255
    13dc:	fe 01       	movw	r30, r28
    13de:	eb 58       	subi	r30, 0x8B	; 139
    13e0:	ff 4f       	sbci	r31, 0xFF	; 255
    13e2:	80 81       	ld	r24, Z
    13e4:	91 81       	ldd	r25, Z+1	; 0x01
    13e6:	01 97       	sbiw	r24, 0x01	; 1
    13e8:	11 96       	adiw	r26, 0x01	; 1
    13ea:	9c 93       	st	X, r25
    13ec:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    13ee:	fe 01       	movw	r30, r28
    13f0:	eb 58       	subi	r30, 0x8B	; 139
    13f2:	ff 4f       	sbci	r31, 0xFF	; 255
    13f4:	80 81       	ld	r24, Z
    13f6:	91 81       	ldd	r25, Z+1	; 0x01
    13f8:	00 97       	sbiw	r24, 0x00	; 0
    13fa:	d1 f6       	brne	.-76     	; 0x13b0 <LCD_sendCommand+0x1ca>
    13fc:	27 c0       	rjmp	.+78     	; 0x144c <LCD_sendCommand+0x266>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    13fe:	8e 01       	movw	r16, r28
    1400:	0b 58       	subi	r16, 0x8B	; 139
    1402:	1f 4f       	sbci	r17, 0xFF	; 255
    1404:	fe 01       	movw	r30, r28
    1406:	e9 58       	subi	r30, 0x89	; 137
    1408:	ff 4f       	sbci	r31, 0xFF	; 255
    140a:	60 81       	ld	r22, Z
    140c:	71 81       	ldd	r23, Z+1	; 0x01
    140e:	82 81       	ldd	r24, Z+2	; 0x02
    1410:	93 81       	ldd	r25, Z+3	; 0x03
    1412:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1416:	dc 01       	movw	r26, r24
    1418:	cb 01       	movw	r24, r22
    141a:	f8 01       	movw	r30, r16
    141c:	91 83       	std	Z+1, r25	; 0x01
    141e:	80 83       	st	Z, r24
    1420:	de 01       	movw	r26, r28
    1422:	af 58       	subi	r26, 0x8F	; 143
    1424:	bf 4f       	sbci	r27, 0xFF	; 255
    1426:	fe 01       	movw	r30, r28
    1428:	eb 58       	subi	r30, 0x8B	; 139
    142a:	ff 4f       	sbci	r31, 0xFF	; 255
    142c:	80 81       	ld	r24, Z
    142e:	91 81       	ldd	r25, Z+1	; 0x01
    1430:	8d 93       	st	X+, r24
    1432:	9c 93       	st	X, r25
    1434:	fe 01       	movw	r30, r28
    1436:	ef 58       	subi	r30, 0x8F	; 143
    1438:	ff 4f       	sbci	r31, 0xFF	; 255
    143a:	80 81       	ld	r24, Z
    143c:	91 81       	ldd	r25, Z+1	; 0x01
    143e:	01 97       	sbiw	r24, 0x01	; 1
    1440:	f1 f7       	brne	.-4      	; 0x143e <LCD_sendCommand+0x258>
    1442:	fe 01       	movw	r30, r28
    1444:	ef 58       	subi	r30, 0x8F	; 143
    1446:	ff 4f       	sbci	r31, 0xFF	; 255
    1448:	91 83       	std	Z+1, r25	; 0x01
    144a:	80 83       	st	Z, r24
	_delay_ms(1); /* delay for processing Tas = 50ns */
	SET_BIT(LCD_CTRL_PORT,E); /* Enable LCD E=1 */
    144c:	a8 e3       	ldi	r26, 0x38	; 56
    144e:	b0 e0       	ldi	r27, 0x00	; 0
    1450:	e8 e3       	ldi	r30, 0x38	; 56
    1452:	f0 e0       	ldi	r31, 0x00	; 0
    1454:	80 81       	ld	r24, Z
    1456:	80 64       	ori	r24, 0x40	; 64
    1458:	8c 93       	st	X, r24
    145a:	fe 01       	movw	r30, r28
    145c:	e3 59       	subi	r30, 0x93	; 147
    145e:	ff 4f       	sbci	r31, 0xFF	; 255
    1460:	80 e0       	ldi	r24, 0x00	; 0
    1462:	90 e0       	ldi	r25, 0x00	; 0
    1464:	a0 e8       	ldi	r26, 0x80	; 128
    1466:	bf e3       	ldi	r27, 0x3F	; 63
    1468:	80 83       	st	Z, r24
    146a:	91 83       	std	Z+1, r25	; 0x01
    146c:	a2 83       	std	Z+2, r26	; 0x02
    146e:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1470:	8e 01       	movw	r16, r28
    1472:	07 59       	subi	r16, 0x97	; 151
    1474:	1f 4f       	sbci	r17, 0xFF	; 255
    1476:	fe 01       	movw	r30, r28
    1478:	e3 59       	subi	r30, 0x93	; 147
    147a:	ff 4f       	sbci	r31, 0xFF	; 255
    147c:	60 81       	ld	r22, Z
    147e:	71 81       	ldd	r23, Z+1	; 0x01
    1480:	82 81       	ldd	r24, Z+2	; 0x02
    1482:	93 81       	ldd	r25, Z+3	; 0x03
    1484:	20 e0       	ldi	r18, 0x00	; 0
    1486:	30 e0       	ldi	r19, 0x00	; 0
    1488:	4a e7       	ldi	r20, 0x7A	; 122
    148a:	53 e4       	ldi	r21, 0x43	; 67
    148c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1490:	dc 01       	movw	r26, r24
    1492:	cb 01       	movw	r24, r22
    1494:	f8 01       	movw	r30, r16
    1496:	80 83       	st	Z, r24
    1498:	91 83       	std	Z+1, r25	; 0x01
    149a:	a2 83       	std	Z+2, r26	; 0x02
    149c:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    149e:	fe 01       	movw	r30, r28
    14a0:	e7 59       	subi	r30, 0x97	; 151
    14a2:	ff 4f       	sbci	r31, 0xFF	; 255
    14a4:	60 81       	ld	r22, Z
    14a6:	71 81       	ldd	r23, Z+1	; 0x01
    14a8:	82 81       	ldd	r24, Z+2	; 0x02
    14aa:	93 81       	ldd	r25, Z+3	; 0x03
    14ac:	20 e0       	ldi	r18, 0x00	; 0
    14ae:	30 e0       	ldi	r19, 0x00	; 0
    14b0:	40 e8       	ldi	r20, 0x80	; 128
    14b2:	5f e3       	ldi	r21, 0x3F	; 63
    14b4:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    14b8:	88 23       	and	r24, r24
    14ba:	44 f4       	brge	.+16     	; 0x14cc <LCD_sendCommand+0x2e6>
		__ticks = 1;
    14bc:	fe 01       	movw	r30, r28
    14be:	e9 59       	subi	r30, 0x99	; 153
    14c0:	ff 4f       	sbci	r31, 0xFF	; 255
    14c2:	81 e0       	ldi	r24, 0x01	; 1
    14c4:	90 e0       	ldi	r25, 0x00	; 0
    14c6:	91 83       	std	Z+1, r25	; 0x01
    14c8:	80 83       	st	Z, r24
    14ca:	64 c0       	rjmp	.+200    	; 0x1594 <LCD_sendCommand+0x3ae>
	else if (__tmp > 65535)
    14cc:	fe 01       	movw	r30, r28
    14ce:	e7 59       	subi	r30, 0x97	; 151
    14d0:	ff 4f       	sbci	r31, 0xFF	; 255
    14d2:	60 81       	ld	r22, Z
    14d4:	71 81       	ldd	r23, Z+1	; 0x01
    14d6:	82 81       	ldd	r24, Z+2	; 0x02
    14d8:	93 81       	ldd	r25, Z+3	; 0x03
    14da:	20 e0       	ldi	r18, 0x00	; 0
    14dc:	3f ef       	ldi	r19, 0xFF	; 255
    14de:	4f e7       	ldi	r20, 0x7F	; 127
    14e0:	57 e4       	ldi	r21, 0x47	; 71
    14e2:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    14e6:	18 16       	cp	r1, r24
    14e8:	0c f0       	brlt	.+2      	; 0x14ec <LCD_sendCommand+0x306>
    14ea:	43 c0       	rjmp	.+134    	; 0x1572 <LCD_sendCommand+0x38c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    14ec:	fe 01       	movw	r30, r28
    14ee:	e3 59       	subi	r30, 0x93	; 147
    14f0:	ff 4f       	sbci	r31, 0xFF	; 255
    14f2:	60 81       	ld	r22, Z
    14f4:	71 81       	ldd	r23, Z+1	; 0x01
    14f6:	82 81       	ldd	r24, Z+2	; 0x02
    14f8:	93 81       	ldd	r25, Z+3	; 0x03
    14fa:	20 e0       	ldi	r18, 0x00	; 0
    14fc:	30 e0       	ldi	r19, 0x00	; 0
    14fe:	40 e2       	ldi	r20, 0x20	; 32
    1500:	51 e4       	ldi	r21, 0x41	; 65
    1502:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1506:	dc 01       	movw	r26, r24
    1508:	cb 01       	movw	r24, r22
    150a:	8e 01       	movw	r16, r28
    150c:	09 59       	subi	r16, 0x99	; 153
    150e:	1f 4f       	sbci	r17, 0xFF	; 255
    1510:	bc 01       	movw	r22, r24
    1512:	cd 01       	movw	r24, r26
    1514:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1518:	dc 01       	movw	r26, r24
    151a:	cb 01       	movw	r24, r22
    151c:	f8 01       	movw	r30, r16
    151e:	91 83       	std	Z+1, r25	; 0x01
    1520:	80 83       	st	Z, r24
    1522:	1f c0       	rjmp	.+62     	; 0x1562 <LCD_sendCommand+0x37c>
    1524:	fe 01       	movw	r30, r28
    1526:	eb 59       	subi	r30, 0x9B	; 155
    1528:	ff 4f       	sbci	r31, 0xFF	; 255
    152a:	89 e1       	ldi	r24, 0x19	; 25
    152c:	90 e0       	ldi	r25, 0x00	; 0
    152e:	91 83       	std	Z+1, r25	; 0x01
    1530:	80 83       	st	Z, r24
    1532:	fe 01       	movw	r30, r28
    1534:	eb 59       	subi	r30, 0x9B	; 155
    1536:	ff 4f       	sbci	r31, 0xFF	; 255
    1538:	80 81       	ld	r24, Z
    153a:	91 81       	ldd	r25, Z+1	; 0x01
    153c:	01 97       	sbiw	r24, 0x01	; 1
    153e:	f1 f7       	brne	.-4      	; 0x153c <LCD_sendCommand+0x356>
    1540:	fe 01       	movw	r30, r28
    1542:	eb 59       	subi	r30, 0x9B	; 155
    1544:	ff 4f       	sbci	r31, 0xFF	; 255
    1546:	91 83       	std	Z+1, r25	; 0x01
    1548:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    154a:	de 01       	movw	r26, r28
    154c:	a9 59       	subi	r26, 0x99	; 153
    154e:	bf 4f       	sbci	r27, 0xFF	; 255
    1550:	fe 01       	movw	r30, r28
    1552:	e9 59       	subi	r30, 0x99	; 153
    1554:	ff 4f       	sbci	r31, 0xFF	; 255
    1556:	80 81       	ld	r24, Z
    1558:	91 81       	ldd	r25, Z+1	; 0x01
    155a:	01 97       	sbiw	r24, 0x01	; 1
    155c:	11 96       	adiw	r26, 0x01	; 1
    155e:	9c 93       	st	X, r25
    1560:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1562:	fe 01       	movw	r30, r28
    1564:	e9 59       	subi	r30, 0x99	; 153
    1566:	ff 4f       	sbci	r31, 0xFF	; 255
    1568:	80 81       	ld	r24, Z
    156a:	91 81       	ldd	r25, Z+1	; 0x01
    156c:	00 97       	sbiw	r24, 0x00	; 0
    156e:	d1 f6       	brne	.-76     	; 0x1524 <LCD_sendCommand+0x33e>
    1570:	28 c0       	rjmp	.+80     	; 0x15c2 <LCD_sendCommand+0x3dc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1572:	8e 01       	movw	r16, r28
    1574:	09 59       	subi	r16, 0x99	; 153
    1576:	1f 4f       	sbci	r17, 0xFF	; 255
    1578:	fe 01       	movw	r30, r28
    157a:	e7 59       	subi	r30, 0x97	; 151
    157c:	ff 4f       	sbci	r31, 0xFF	; 255
    157e:	60 81       	ld	r22, Z
    1580:	71 81       	ldd	r23, Z+1	; 0x01
    1582:	82 81       	ldd	r24, Z+2	; 0x02
    1584:	93 81       	ldd	r25, Z+3	; 0x03
    1586:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    158a:	dc 01       	movw	r26, r24
    158c:	cb 01       	movw	r24, r22
    158e:	f8 01       	movw	r30, r16
    1590:	91 83       	std	Z+1, r25	; 0x01
    1592:	80 83       	st	Z, r24
    1594:	de 01       	movw	r26, r28
    1596:	ad 59       	subi	r26, 0x9D	; 157
    1598:	bf 4f       	sbci	r27, 0xFF	; 255
    159a:	fe 01       	movw	r30, r28
    159c:	e9 59       	subi	r30, 0x99	; 153
    159e:	ff 4f       	sbci	r31, 0xFF	; 255
    15a0:	80 81       	ld	r24, Z
    15a2:	91 81       	ldd	r25, Z+1	; 0x01
    15a4:	11 96       	adiw	r26, 0x01	; 1
    15a6:	9c 93       	st	X, r25
    15a8:	8e 93       	st	-X, r24
    15aa:	fe 01       	movw	r30, r28
    15ac:	ed 59       	subi	r30, 0x9D	; 157
    15ae:	ff 4f       	sbci	r31, 0xFF	; 255
    15b0:	80 81       	ld	r24, Z
    15b2:	91 81       	ldd	r25, Z+1	; 0x01
    15b4:	01 97       	sbiw	r24, 0x01	; 1
    15b6:	f1 f7       	brne	.-4      	; 0x15b4 <LCD_sendCommand+0x3ce>
    15b8:	fe 01       	movw	r30, r28
    15ba:	ed 59       	subi	r30, 0x9D	; 157
    15bc:	ff 4f       	sbci	r31, 0xFF	; 255
    15be:	91 83       	std	Z+1, r25	; 0x01
    15c0:	80 83       	st	Z, r24
	_delay_ms(1); /* delay for processing Tpw - Tdws = 190ns */
	if(LCD.type ==LCD_Four_BIT_MODE )
    15c2:	80 91 7c 00 	lds	r24, 0x007C
    15c6:	82 30       	cpi	r24, 0x02	; 2
    15c8:	09 f0       	breq	.+2      	; 0x15cc <LCD_sendCommand+0x3e6>
    15ca:	37 c3       	rjmp	.+1646   	; 0x1c3a <LCD_sendCommand+0xa54>
	{
		/* out the highest 4 bits of the required command to the data bus D4 --> D7 */
		if(LCD.bit_mode==Upper_mode)
    15cc:	80 91 7e 00 	lds	r24, 0x007E
    15d0:	88 23       	and	r24, r24
    15d2:	79 f4       	brne	.+30     	; 0x15f2 <LCD_sendCommand+0x40c>
		{
			LCD_DATA_PORT = (LCD_DATA_PORT & 0x0F) | (command & 0xF0);
    15d4:	a2 e3       	ldi	r26, 0x32	; 50
    15d6:	b0 e0       	ldi	r27, 0x00	; 0
    15d8:	e2 e3       	ldi	r30, 0x32	; 50
    15da:	f0 e0       	ldi	r31, 0x00	; 0
    15dc:	80 81       	ld	r24, Z
    15de:	98 2f       	mov	r25, r24
    15e0:	9f 70       	andi	r25, 0x0F	; 15
    15e2:	fe 01       	movw	r30, r28
    15e4:	e1 58       	subi	r30, 0x81	; 129
    15e6:	ff 4f       	sbci	r31, 0xFF	; 255
    15e8:	80 81       	ld	r24, Z
    15ea:	80 7f       	andi	r24, 0xF0	; 240
    15ec:	89 2b       	or	r24, r25
    15ee:	8c 93       	st	X, r24
    15f0:	13 c0       	rjmp	.+38     	; 0x1618 <LCD_sendCommand+0x432>
		}
		else if(LCD.bit_mode==lower_mode)
    15f2:	80 91 7e 00 	lds	r24, 0x007E
    15f6:	81 30       	cpi	r24, 0x01	; 1
    15f8:	79 f4       	brne	.+30     	; 0x1618 <LCD_sendCommand+0x432>
		{
			LCD_DATA_PORT = (LCD_DATA_PORT & 0xF0) | ((command & 0xF0) >> 4);
    15fa:	a2 e3       	ldi	r26, 0x32	; 50
    15fc:	b0 e0       	ldi	r27, 0x00	; 0
    15fe:	e2 e3       	ldi	r30, 0x32	; 50
    1600:	f0 e0       	ldi	r31, 0x00	; 0
    1602:	80 81       	ld	r24, Z
    1604:	98 2f       	mov	r25, r24
    1606:	90 7f       	andi	r25, 0xF0	; 240
    1608:	fe 01       	movw	r30, r28
    160a:	e1 58       	subi	r30, 0x81	; 129
    160c:	ff 4f       	sbci	r31, 0xFF	; 255
    160e:	80 81       	ld	r24, Z
    1610:	82 95       	swap	r24
    1612:	8f 70       	andi	r24, 0x0F	; 15
    1614:	89 2b       	or	r24, r25
    1616:	8c 93       	st	X, r24
    1618:	fe 01       	movw	r30, r28
    161a:	e1 5a       	subi	r30, 0xA1	; 161
    161c:	ff 4f       	sbci	r31, 0xFF	; 255
    161e:	80 e0       	ldi	r24, 0x00	; 0
    1620:	90 e0       	ldi	r25, 0x00	; 0
    1622:	a0 e8       	ldi	r26, 0x80	; 128
    1624:	bf e3       	ldi	r27, 0x3F	; 63
    1626:	80 83       	st	Z, r24
    1628:	91 83       	std	Z+1, r25	; 0x01
    162a:	a2 83       	std	Z+2, r26	; 0x02
    162c:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    162e:	8e 01       	movw	r16, r28
    1630:	05 5a       	subi	r16, 0xA5	; 165
    1632:	1f 4f       	sbci	r17, 0xFF	; 255
    1634:	fe 01       	movw	r30, r28
    1636:	e1 5a       	subi	r30, 0xA1	; 161
    1638:	ff 4f       	sbci	r31, 0xFF	; 255
    163a:	60 81       	ld	r22, Z
    163c:	71 81       	ldd	r23, Z+1	; 0x01
    163e:	82 81       	ldd	r24, Z+2	; 0x02
    1640:	93 81       	ldd	r25, Z+3	; 0x03
    1642:	20 e0       	ldi	r18, 0x00	; 0
    1644:	30 e0       	ldi	r19, 0x00	; 0
    1646:	4a e7       	ldi	r20, 0x7A	; 122
    1648:	53 e4       	ldi	r21, 0x43	; 67
    164a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    164e:	dc 01       	movw	r26, r24
    1650:	cb 01       	movw	r24, r22
    1652:	f8 01       	movw	r30, r16
    1654:	80 83       	st	Z, r24
    1656:	91 83       	std	Z+1, r25	; 0x01
    1658:	a2 83       	std	Z+2, r26	; 0x02
    165a:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    165c:	fe 01       	movw	r30, r28
    165e:	e5 5a       	subi	r30, 0xA5	; 165
    1660:	ff 4f       	sbci	r31, 0xFF	; 255
    1662:	60 81       	ld	r22, Z
    1664:	71 81       	ldd	r23, Z+1	; 0x01
    1666:	82 81       	ldd	r24, Z+2	; 0x02
    1668:	93 81       	ldd	r25, Z+3	; 0x03
    166a:	20 e0       	ldi	r18, 0x00	; 0
    166c:	30 e0       	ldi	r19, 0x00	; 0
    166e:	40 e8       	ldi	r20, 0x80	; 128
    1670:	5f e3       	ldi	r21, 0x3F	; 63
    1672:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1676:	88 23       	and	r24, r24
    1678:	44 f4       	brge	.+16     	; 0x168a <LCD_sendCommand+0x4a4>
		__ticks = 1;
    167a:	fe 01       	movw	r30, r28
    167c:	e7 5a       	subi	r30, 0xA7	; 167
    167e:	ff 4f       	sbci	r31, 0xFF	; 255
    1680:	81 e0       	ldi	r24, 0x01	; 1
    1682:	90 e0       	ldi	r25, 0x00	; 0
    1684:	91 83       	std	Z+1, r25	; 0x01
    1686:	80 83       	st	Z, r24
    1688:	64 c0       	rjmp	.+200    	; 0x1752 <LCD_sendCommand+0x56c>
	else if (__tmp > 65535)
    168a:	fe 01       	movw	r30, r28
    168c:	e5 5a       	subi	r30, 0xA5	; 165
    168e:	ff 4f       	sbci	r31, 0xFF	; 255
    1690:	60 81       	ld	r22, Z
    1692:	71 81       	ldd	r23, Z+1	; 0x01
    1694:	82 81       	ldd	r24, Z+2	; 0x02
    1696:	93 81       	ldd	r25, Z+3	; 0x03
    1698:	20 e0       	ldi	r18, 0x00	; 0
    169a:	3f ef       	ldi	r19, 0xFF	; 255
    169c:	4f e7       	ldi	r20, 0x7F	; 127
    169e:	57 e4       	ldi	r21, 0x47	; 71
    16a0:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    16a4:	18 16       	cp	r1, r24
    16a6:	0c f0       	brlt	.+2      	; 0x16aa <LCD_sendCommand+0x4c4>
    16a8:	43 c0       	rjmp	.+134    	; 0x1730 <LCD_sendCommand+0x54a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    16aa:	fe 01       	movw	r30, r28
    16ac:	e1 5a       	subi	r30, 0xA1	; 161
    16ae:	ff 4f       	sbci	r31, 0xFF	; 255
    16b0:	60 81       	ld	r22, Z
    16b2:	71 81       	ldd	r23, Z+1	; 0x01
    16b4:	82 81       	ldd	r24, Z+2	; 0x02
    16b6:	93 81       	ldd	r25, Z+3	; 0x03
    16b8:	20 e0       	ldi	r18, 0x00	; 0
    16ba:	30 e0       	ldi	r19, 0x00	; 0
    16bc:	40 e2       	ldi	r20, 0x20	; 32
    16be:	51 e4       	ldi	r21, 0x41	; 65
    16c0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    16c4:	dc 01       	movw	r26, r24
    16c6:	cb 01       	movw	r24, r22
    16c8:	8e 01       	movw	r16, r28
    16ca:	07 5a       	subi	r16, 0xA7	; 167
    16cc:	1f 4f       	sbci	r17, 0xFF	; 255
    16ce:	bc 01       	movw	r22, r24
    16d0:	cd 01       	movw	r24, r26
    16d2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    16d6:	dc 01       	movw	r26, r24
    16d8:	cb 01       	movw	r24, r22
    16da:	f8 01       	movw	r30, r16
    16dc:	91 83       	std	Z+1, r25	; 0x01
    16de:	80 83       	st	Z, r24
    16e0:	1f c0       	rjmp	.+62     	; 0x1720 <LCD_sendCommand+0x53a>
    16e2:	fe 01       	movw	r30, r28
    16e4:	e9 5a       	subi	r30, 0xA9	; 169
    16e6:	ff 4f       	sbci	r31, 0xFF	; 255
    16e8:	89 e1       	ldi	r24, 0x19	; 25
    16ea:	90 e0       	ldi	r25, 0x00	; 0
    16ec:	91 83       	std	Z+1, r25	; 0x01
    16ee:	80 83       	st	Z, r24
    16f0:	fe 01       	movw	r30, r28
    16f2:	e9 5a       	subi	r30, 0xA9	; 169
    16f4:	ff 4f       	sbci	r31, 0xFF	; 255
    16f6:	80 81       	ld	r24, Z
    16f8:	91 81       	ldd	r25, Z+1	; 0x01
    16fa:	01 97       	sbiw	r24, 0x01	; 1
    16fc:	f1 f7       	brne	.-4      	; 0x16fa <LCD_sendCommand+0x514>
    16fe:	fe 01       	movw	r30, r28
    1700:	e9 5a       	subi	r30, 0xA9	; 169
    1702:	ff 4f       	sbci	r31, 0xFF	; 255
    1704:	91 83       	std	Z+1, r25	; 0x01
    1706:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1708:	de 01       	movw	r26, r28
    170a:	a7 5a       	subi	r26, 0xA7	; 167
    170c:	bf 4f       	sbci	r27, 0xFF	; 255
    170e:	fe 01       	movw	r30, r28
    1710:	e7 5a       	subi	r30, 0xA7	; 167
    1712:	ff 4f       	sbci	r31, 0xFF	; 255
    1714:	80 81       	ld	r24, Z
    1716:	91 81       	ldd	r25, Z+1	; 0x01
    1718:	01 97       	sbiw	r24, 0x01	; 1
    171a:	11 96       	adiw	r26, 0x01	; 1
    171c:	9c 93       	st	X, r25
    171e:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1720:	fe 01       	movw	r30, r28
    1722:	e7 5a       	subi	r30, 0xA7	; 167
    1724:	ff 4f       	sbci	r31, 0xFF	; 255
    1726:	80 81       	ld	r24, Z
    1728:	91 81       	ldd	r25, Z+1	; 0x01
    172a:	00 97       	sbiw	r24, 0x00	; 0
    172c:	d1 f6       	brne	.-76     	; 0x16e2 <LCD_sendCommand+0x4fc>
    172e:	27 c0       	rjmp	.+78     	; 0x177e <LCD_sendCommand+0x598>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1730:	8e 01       	movw	r16, r28
    1732:	07 5a       	subi	r16, 0xA7	; 167
    1734:	1f 4f       	sbci	r17, 0xFF	; 255
    1736:	fe 01       	movw	r30, r28
    1738:	e5 5a       	subi	r30, 0xA5	; 165
    173a:	ff 4f       	sbci	r31, 0xFF	; 255
    173c:	60 81       	ld	r22, Z
    173e:	71 81       	ldd	r23, Z+1	; 0x01
    1740:	82 81       	ldd	r24, Z+2	; 0x02
    1742:	93 81       	ldd	r25, Z+3	; 0x03
    1744:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1748:	dc 01       	movw	r26, r24
    174a:	cb 01       	movw	r24, r22
    174c:	f8 01       	movw	r30, r16
    174e:	91 83       	std	Z+1, r25	; 0x01
    1750:	80 83       	st	Z, r24
    1752:	de 01       	movw	r26, r28
    1754:	ab 5a       	subi	r26, 0xAB	; 171
    1756:	bf 4f       	sbci	r27, 0xFF	; 255
    1758:	fe 01       	movw	r30, r28
    175a:	e7 5a       	subi	r30, 0xA7	; 167
    175c:	ff 4f       	sbci	r31, 0xFF	; 255
    175e:	80 81       	ld	r24, Z
    1760:	91 81       	ldd	r25, Z+1	; 0x01
    1762:	8d 93       	st	X+, r24
    1764:	9c 93       	st	X, r25
    1766:	fe 01       	movw	r30, r28
    1768:	eb 5a       	subi	r30, 0xAB	; 171
    176a:	ff 4f       	sbci	r31, 0xFF	; 255
    176c:	80 81       	ld	r24, Z
    176e:	91 81       	ldd	r25, Z+1	; 0x01
    1770:	01 97       	sbiw	r24, 0x01	; 1
    1772:	f1 f7       	brne	.-4      	; 0x1770 <LCD_sendCommand+0x58a>
    1774:	fe 01       	movw	r30, r28
    1776:	eb 5a       	subi	r30, 0xAB	; 171
    1778:	ff 4f       	sbci	r31, 0xFF	; 255
    177a:	91 83       	std	Z+1, r25	; 0x01
    177c:	80 83       	st	Z, r24
		}
		_delay_ms(1); /* delay for processing Tdsw = 100ns */
		CLEAR_BIT(LCD_CTRL_PORT,E); /* disable LCD E=0 */
    177e:	a8 e3       	ldi	r26, 0x38	; 56
    1780:	b0 e0       	ldi	r27, 0x00	; 0
    1782:	e8 e3       	ldi	r30, 0x38	; 56
    1784:	f0 e0       	ldi	r31, 0x00	; 0
    1786:	80 81       	ld	r24, Z
    1788:	8f 7b       	andi	r24, 0xBF	; 191
    178a:	8c 93       	st	X, r24
    178c:	fe 01       	movw	r30, r28
    178e:	ef 5a       	subi	r30, 0xAF	; 175
    1790:	ff 4f       	sbci	r31, 0xFF	; 255
    1792:	80 e0       	ldi	r24, 0x00	; 0
    1794:	90 e0       	ldi	r25, 0x00	; 0
    1796:	a0 e8       	ldi	r26, 0x80	; 128
    1798:	bf e3       	ldi	r27, 0x3F	; 63
    179a:	80 83       	st	Z, r24
    179c:	91 83       	std	Z+1, r25	; 0x01
    179e:	a2 83       	std	Z+2, r26	; 0x02
    17a0:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    17a2:	8e 01       	movw	r16, r28
    17a4:	03 5b       	subi	r16, 0xB3	; 179
    17a6:	1f 4f       	sbci	r17, 0xFF	; 255
    17a8:	fe 01       	movw	r30, r28
    17aa:	ef 5a       	subi	r30, 0xAF	; 175
    17ac:	ff 4f       	sbci	r31, 0xFF	; 255
    17ae:	60 81       	ld	r22, Z
    17b0:	71 81       	ldd	r23, Z+1	; 0x01
    17b2:	82 81       	ldd	r24, Z+2	; 0x02
    17b4:	93 81       	ldd	r25, Z+3	; 0x03
    17b6:	20 e0       	ldi	r18, 0x00	; 0
    17b8:	30 e0       	ldi	r19, 0x00	; 0
    17ba:	4a e7       	ldi	r20, 0x7A	; 122
    17bc:	53 e4       	ldi	r21, 0x43	; 67
    17be:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    17c2:	dc 01       	movw	r26, r24
    17c4:	cb 01       	movw	r24, r22
    17c6:	f8 01       	movw	r30, r16
    17c8:	80 83       	st	Z, r24
    17ca:	91 83       	std	Z+1, r25	; 0x01
    17cc:	a2 83       	std	Z+2, r26	; 0x02
    17ce:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    17d0:	fe 01       	movw	r30, r28
    17d2:	e3 5b       	subi	r30, 0xB3	; 179
    17d4:	ff 4f       	sbci	r31, 0xFF	; 255
    17d6:	60 81       	ld	r22, Z
    17d8:	71 81       	ldd	r23, Z+1	; 0x01
    17da:	82 81       	ldd	r24, Z+2	; 0x02
    17dc:	93 81       	ldd	r25, Z+3	; 0x03
    17de:	20 e0       	ldi	r18, 0x00	; 0
    17e0:	30 e0       	ldi	r19, 0x00	; 0
    17e2:	40 e8       	ldi	r20, 0x80	; 128
    17e4:	5f e3       	ldi	r21, 0x3F	; 63
    17e6:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    17ea:	88 23       	and	r24, r24
    17ec:	44 f4       	brge	.+16     	; 0x17fe <LCD_sendCommand+0x618>
		__ticks = 1;
    17ee:	fe 01       	movw	r30, r28
    17f0:	e5 5b       	subi	r30, 0xB5	; 181
    17f2:	ff 4f       	sbci	r31, 0xFF	; 255
    17f4:	81 e0       	ldi	r24, 0x01	; 1
    17f6:	90 e0       	ldi	r25, 0x00	; 0
    17f8:	91 83       	std	Z+1, r25	; 0x01
    17fa:	80 83       	st	Z, r24
    17fc:	64 c0       	rjmp	.+200    	; 0x18c6 <LCD_sendCommand+0x6e0>
	else if (__tmp > 65535)
    17fe:	fe 01       	movw	r30, r28
    1800:	e3 5b       	subi	r30, 0xB3	; 179
    1802:	ff 4f       	sbci	r31, 0xFF	; 255
    1804:	60 81       	ld	r22, Z
    1806:	71 81       	ldd	r23, Z+1	; 0x01
    1808:	82 81       	ldd	r24, Z+2	; 0x02
    180a:	93 81       	ldd	r25, Z+3	; 0x03
    180c:	20 e0       	ldi	r18, 0x00	; 0
    180e:	3f ef       	ldi	r19, 0xFF	; 255
    1810:	4f e7       	ldi	r20, 0x7F	; 127
    1812:	57 e4       	ldi	r21, 0x47	; 71
    1814:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1818:	18 16       	cp	r1, r24
    181a:	0c f0       	brlt	.+2      	; 0x181e <LCD_sendCommand+0x638>
    181c:	43 c0       	rjmp	.+134    	; 0x18a4 <LCD_sendCommand+0x6be>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    181e:	fe 01       	movw	r30, r28
    1820:	ef 5a       	subi	r30, 0xAF	; 175
    1822:	ff 4f       	sbci	r31, 0xFF	; 255
    1824:	60 81       	ld	r22, Z
    1826:	71 81       	ldd	r23, Z+1	; 0x01
    1828:	82 81       	ldd	r24, Z+2	; 0x02
    182a:	93 81       	ldd	r25, Z+3	; 0x03
    182c:	20 e0       	ldi	r18, 0x00	; 0
    182e:	30 e0       	ldi	r19, 0x00	; 0
    1830:	40 e2       	ldi	r20, 0x20	; 32
    1832:	51 e4       	ldi	r21, 0x41	; 65
    1834:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1838:	dc 01       	movw	r26, r24
    183a:	cb 01       	movw	r24, r22
    183c:	8e 01       	movw	r16, r28
    183e:	05 5b       	subi	r16, 0xB5	; 181
    1840:	1f 4f       	sbci	r17, 0xFF	; 255
    1842:	bc 01       	movw	r22, r24
    1844:	cd 01       	movw	r24, r26
    1846:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    184a:	dc 01       	movw	r26, r24
    184c:	cb 01       	movw	r24, r22
    184e:	f8 01       	movw	r30, r16
    1850:	91 83       	std	Z+1, r25	; 0x01
    1852:	80 83       	st	Z, r24
    1854:	1f c0       	rjmp	.+62     	; 0x1894 <LCD_sendCommand+0x6ae>
    1856:	fe 01       	movw	r30, r28
    1858:	e7 5b       	subi	r30, 0xB7	; 183
    185a:	ff 4f       	sbci	r31, 0xFF	; 255
    185c:	89 e1       	ldi	r24, 0x19	; 25
    185e:	90 e0       	ldi	r25, 0x00	; 0
    1860:	91 83       	std	Z+1, r25	; 0x01
    1862:	80 83       	st	Z, r24
    1864:	fe 01       	movw	r30, r28
    1866:	e7 5b       	subi	r30, 0xB7	; 183
    1868:	ff 4f       	sbci	r31, 0xFF	; 255
    186a:	80 81       	ld	r24, Z
    186c:	91 81       	ldd	r25, Z+1	; 0x01
    186e:	01 97       	sbiw	r24, 0x01	; 1
    1870:	f1 f7       	brne	.-4      	; 0x186e <LCD_sendCommand+0x688>
    1872:	fe 01       	movw	r30, r28
    1874:	e7 5b       	subi	r30, 0xB7	; 183
    1876:	ff 4f       	sbci	r31, 0xFF	; 255
    1878:	91 83       	std	Z+1, r25	; 0x01
    187a:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    187c:	de 01       	movw	r26, r28
    187e:	a5 5b       	subi	r26, 0xB5	; 181
    1880:	bf 4f       	sbci	r27, 0xFF	; 255
    1882:	fe 01       	movw	r30, r28
    1884:	e5 5b       	subi	r30, 0xB5	; 181
    1886:	ff 4f       	sbci	r31, 0xFF	; 255
    1888:	80 81       	ld	r24, Z
    188a:	91 81       	ldd	r25, Z+1	; 0x01
    188c:	01 97       	sbiw	r24, 0x01	; 1
    188e:	11 96       	adiw	r26, 0x01	; 1
    1890:	9c 93       	st	X, r25
    1892:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1894:	fe 01       	movw	r30, r28
    1896:	e5 5b       	subi	r30, 0xB5	; 181
    1898:	ff 4f       	sbci	r31, 0xFF	; 255
    189a:	80 81       	ld	r24, Z
    189c:	91 81       	ldd	r25, Z+1	; 0x01
    189e:	00 97       	sbiw	r24, 0x00	; 0
    18a0:	d1 f6       	brne	.-76     	; 0x1856 <LCD_sendCommand+0x670>
    18a2:	27 c0       	rjmp	.+78     	; 0x18f2 <LCD_sendCommand+0x70c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    18a4:	8e 01       	movw	r16, r28
    18a6:	05 5b       	subi	r16, 0xB5	; 181
    18a8:	1f 4f       	sbci	r17, 0xFF	; 255
    18aa:	fe 01       	movw	r30, r28
    18ac:	e3 5b       	subi	r30, 0xB3	; 179
    18ae:	ff 4f       	sbci	r31, 0xFF	; 255
    18b0:	60 81       	ld	r22, Z
    18b2:	71 81       	ldd	r23, Z+1	; 0x01
    18b4:	82 81       	ldd	r24, Z+2	; 0x02
    18b6:	93 81       	ldd	r25, Z+3	; 0x03
    18b8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    18bc:	dc 01       	movw	r26, r24
    18be:	cb 01       	movw	r24, r22
    18c0:	f8 01       	movw	r30, r16
    18c2:	91 83       	std	Z+1, r25	; 0x01
    18c4:	80 83       	st	Z, r24
    18c6:	de 01       	movw	r26, r28
    18c8:	a9 5b       	subi	r26, 0xB9	; 185
    18ca:	bf 4f       	sbci	r27, 0xFF	; 255
    18cc:	fe 01       	movw	r30, r28
    18ce:	e5 5b       	subi	r30, 0xB5	; 181
    18d0:	ff 4f       	sbci	r31, 0xFF	; 255
    18d2:	80 81       	ld	r24, Z
    18d4:	91 81       	ldd	r25, Z+1	; 0x01
    18d6:	8d 93       	st	X+, r24
    18d8:	9c 93       	st	X, r25
    18da:	fe 01       	movw	r30, r28
    18dc:	e9 5b       	subi	r30, 0xB9	; 185
    18de:	ff 4f       	sbci	r31, 0xFF	; 255
    18e0:	80 81       	ld	r24, Z
    18e2:	91 81       	ldd	r25, Z+1	; 0x01
    18e4:	01 97       	sbiw	r24, 0x01	; 1
    18e6:	f1 f7       	brne	.-4      	; 0x18e4 <LCD_sendCommand+0x6fe>
    18e8:	fe 01       	movw	r30, r28
    18ea:	e9 5b       	subi	r30, 0xB9	; 185
    18ec:	ff 4f       	sbci	r31, 0xFF	; 255
    18ee:	91 83       	std	Z+1, r25	; 0x01
    18f0:	80 83       	st	Z, r24
		_delay_ms(1); /* delay for processing Th = 13ns */
		SET_BIT(LCD_CTRL_PORT,E); /* Enable LCD E=1 */
    18f2:	a8 e3       	ldi	r26, 0x38	; 56
    18f4:	b0 e0       	ldi	r27, 0x00	; 0
    18f6:	e8 e3       	ldi	r30, 0x38	; 56
    18f8:	f0 e0       	ldi	r31, 0x00	; 0
    18fa:	80 81       	ld	r24, Z
    18fc:	80 64       	ori	r24, 0x40	; 64
    18fe:	8c 93       	st	X, r24
    1900:	fe 01       	movw	r30, r28
    1902:	ed 5b       	subi	r30, 0xBD	; 189
    1904:	ff 4f       	sbci	r31, 0xFF	; 255
    1906:	80 e0       	ldi	r24, 0x00	; 0
    1908:	90 e0       	ldi	r25, 0x00	; 0
    190a:	a0 e8       	ldi	r26, 0x80	; 128
    190c:	bf e3       	ldi	r27, 0x3F	; 63
    190e:	80 83       	st	Z, r24
    1910:	91 83       	std	Z+1, r25	; 0x01
    1912:	a2 83       	std	Z+2, r26	; 0x02
    1914:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1916:	8e 01       	movw	r16, r28
    1918:	01 5c       	subi	r16, 0xC1	; 193
    191a:	1f 4f       	sbci	r17, 0xFF	; 255
    191c:	fe 01       	movw	r30, r28
    191e:	ed 5b       	subi	r30, 0xBD	; 189
    1920:	ff 4f       	sbci	r31, 0xFF	; 255
    1922:	60 81       	ld	r22, Z
    1924:	71 81       	ldd	r23, Z+1	; 0x01
    1926:	82 81       	ldd	r24, Z+2	; 0x02
    1928:	93 81       	ldd	r25, Z+3	; 0x03
    192a:	20 e0       	ldi	r18, 0x00	; 0
    192c:	30 e0       	ldi	r19, 0x00	; 0
    192e:	4a e7       	ldi	r20, 0x7A	; 122
    1930:	53 e4       	ldi	r21, 0x43	; 67
    1932:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1936:	dc 01       	movw	r26, r24
    1938:	cb 01       	movw	r24, r22
    193a:	f8 01       	movw	r30, r16
    193c:	80 83       	st	Z, r24
    193e:	91 83       	std	Z+1, r25	; 0x01
    1940:	a2 83       	std	Z+2, r26	; 0x02
    1942:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1944:	fe 01       	movw	r30, r28
    1946:	ff 96       	adiw	r30, 0x3f	; 63
    1948:	60 81       	ld	r22, Z
    194a:	71 81       	ldd	r23, Z+1	; 0x01
    194c:	82 81       	ldd	r24, Z+2	; 0x02
    194e:	93 81       	ldd	r25, Z+3	; 0x03
    1950:	20 e0       	ldi	r18, 0x00	; 0
    1952:	30 e0       	ldi	r19, 0x00	; 0
    1954:	40 e8       	ldi	r20, 0x80	; 128
    1956:	5f e3       	ldi	r21, 0x3F	; 63
    1958:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    195c:	88 23       	and	r24, r24
    195e:	2c f4       	brge	.+10     	; 0x196a <LCD_sendCommand+0x784>
		__ticks = 1;
    1960:	81 e0       	ldi	r24, 0x01	; 1
    1962:	90 e0       	ldi	r25, 0x00	; 0
    1964:	9e af       	std	Y+62, r25	; 0x3e
    1966:	8d af       	std	Y+61, r24	; 0x3d
    1968:	46 c0       	rjmp	.+140    	; 0x19f6 <LCD_sendCommand+0x810>
	else if (__tmp > 65535)
    196a:	fe 01       	movw	r30, r28
    196c:	ff 96       	adiw	r30, 0x3f	; 63
    196e:	60 81       	ld	r22, Z
    1970:	71 81       	ldd	r23, Z+1	; 0x01
    1972:	82 81       	ldd	r24, Z+2	; 0x02
    1974:	93 81       	ldd	r25, Z+3	; 0x03
    1976:	20 e0       	ldi	r18, 0x00	; 0
    1978:	3f ef       	ldi	r19, 0xFF	; 255
    197a:	4f e7       	ldi	r20, 0x7F	; 127
    197c:	57 e4       	ldi	r21, 0x47	; 71
    197e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1982:	18 16       	cp	r1, r24
    1984:	64 f5       	brge	.+88     	; 0x19de <LCD_sendCommand+0x7f8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1986:	fe 01       	movw	r30, r28
    1988:	ed 5b       	subi	r30, 0xBD	; 189
    198a:	ff 4f       	sbci	r31, 0xFF	; 255
    198c:	60 81       	ld	r22, Z
    198e:	71 81       	ldd	r23, Z+1	; 0x01
    1990:	82 81       	ldd	r24, Z+2	; 0x02
    1992:	93 81       	ldd	r25, Z+3	; 0x03
    1994:	20 e0       	ldi	r18, 0x00	; 0
    1996:	30 e0       	ldi	r19, 0x00	; 0
    1998:	40 e2       	ldi	r20, 0x20	; 32
    199a:	51 e4       	ldi	r21, 0x41	; 65
    199c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    19a0:	dc 01       	movw	r26, r24
    19a2:	cb 01       	movw	r24, r22
    19a4:	bc 01       	movw	r22, r24
    19a6:	cd 01       	movw	r24, r26
    19a8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    19ac:	dc 01       	movw	r26, r24
    19ae:	cb 01       	movw	r24, r22
    19b0:	9e af       	std	Y+62, r25	; 0x3e
    19b2:	8d af       	std	Y+61, r24	; 0x3d
    19b4:	0f c0       	rjmp	.+30     	; 0x19d4 <LCD_sendCommand+0x7ee>
    19b6:	89 e1       	ldi	r24, 0x19	; 25
    19b8:	90 e0       	ldi	r25, 0x00	; 0
    19ba:	9c af       	std	Y+60, r25	; 0x3c
    19bc:	8b af       	std	Y+59, r24	; 0x3b
    19be:	8b ad       	ldd	r24, Y+59	; 0x3b
    19c0:	9c ad       	ldd	r25, Y+60	; 0x3c
    19c2:	01 97       	sbiw	r24, 0x01	; 1
    19c4:	f1 f7       	brne	.-4      	; 0x19c2 <LCD_sendCommand+0x7dc>
    19c6:	9c af       	std	Y+60, r25	; 0x3c
    19c8:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    19ca:	8d ad       	ldd	r24, Y+61	; 0x3d
    19cc:	9e ad       	ldd	r25, Y+62	; 0x3e
    19ce:	01 97       	sbiw	r24, 0x01	; 1
    19d0:	9e af       	std	Y+62, r25	; 0x3e
    19d2:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    19d4:	8d ad       	ldd	r24, Y+61	; 0x3d
    19d6:	9e ad       	ldd	r25, Y+62	; 0x3e
    19d8:	00 97       	sbiw	r24, 0x00	; 0
    19da:	69 f7       	brne	.-38     	; 0x19b6 <LCD_sendCommand+0x7d0>
    19dc:	16 c0       	rjmp	.+44     	; 0x1a0a <LCD_sendCommand+0x824>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    19de:	fe 01       	movw	r30, r28
    19e0:	ff 96       	adiw	r30, 0x3f	; 63
    19e2:	60 81       	ld	r22, Z
    19e4:	71 81       	ldd	r23, Z+1	; 0x01
    19e6:	82 81       	ldd	r24, Z+2	; 0x02
    19e8:	93 81       	ldd	r25, Z+3	; 0x03
    19ea:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    19ee:	dc 01       	movw	r26, r24
    19f0:	cb 01       	movw	r24, r22
    19f2:	9e af       	std	Y+62, r25	; 0x3e
    19f4:	8d af       	std	Y+61, r24	; 0x3d
    19f6:	8d ad       	ldd	r24, Y+61	; 0x3d
    19f8:	9e ad       	ldd	r25, Y+62	; 0x3e
    19fa:	9a af       	std	Y+58, r25	; 0x3a
    19fc:	89 af       	std	Y+57, r24	; 0x39
    19fe:	89 ad       	ldd	r24, Y+57	; 0x39
    1a00:	9a ad       	ldd	r25, Y+58	; 0x3a
    1a02:	01 97       	sbiw	r24, 0x01	; 1
    1a04:	f1 f7       	brne	.-4      	; 0x1a02 <LCD_sendCommand+0x81c>
    1a06:	9a af       	std	Y+58, r25	; 0x3a
    1a08:	89 af       	std	Y+57, r24	; 0x39
		_delay_ms(1); /* delay for processing Tpw - Tdws = 190ns */
		/* out the lowest 4 bits of the required command to the data bus D4 --> D7 */
		if(LCD.bit_mode==Upper_mode)
    1a0a:	80 91 7e 00 	lds	r24, 0x007E
    1a0e:	88 23       	and	r24, r24
    1a10:	b1 f4       	brne	.+44     	; 0x1a3e <LCD_sendCommand+0x858>
		{
			LCD_DATA_PORT = (LCD_DATA_PORT & 0x0F) | ((command & 0x0F) << 4);
    1a12:	a2 e3       	ldi	r26, 0x32	; 50
    1a14:	b0 e0       	ldi	r27, 0x00	; 0
    1a16:	e2 e3       	ldi	r30, 0x32	; 50
    1a18:	f0 e0       	ldi	r31, 0x00	; 0
    1a1a:	80 81       	ld	r24, Z
    1a1c:	28 2f       	mov	r18, r24
    1a1e:	2f 70       	andi	r18, 0x0F	; 15
    1a20:	fe 01       	movw	r30, r28
    1a22:	e1 58       	subi	r30, 0x81	; 129
    1a24:	ff 4f       	sbci	r31, 0xFF	; 255
    1a26:	80 81       	ld	r24, Z
    1a28:	88 2f       	mov	r24, r24
    1a2a:	90 e0       	ldi	r25, 0x00	; 0
    1a2c:	82 95       	swap	r24
    1a2e:	92 95       	swap	r25
    1a30:	90 7f       	andi	r25, 0xF0	; 240
    1a32:	98 27       	eor	r25, r24
    1a34:	80 7f       	andi	r24, 0xF0	; 240
    1a36:	98 27       	eor	r25, r24
    1a38:	82 2b       	or	r24, r18
    1a3a:	8c 93       	st	X, r24
    1a3c:	12 c0       	rjmp	.+36     	; 0x1a62 <LCD_sendCommand+0x87c>
		}
	    else if(LCD.bit_mode==lower_mode)
    1a3e:	80 91 7e 00 	lds	r24, 0x007E
    1a42:	81 30       	cpi	r24, 0x01	; 1
    1a44:	71 f4       	brne	.+28     	; 0x1a62 <LCD_sendCommand+0x87c>
	    {
	    	LCD_DATA_PORT = (LCD_DATA_PORT & 0xF0) | (command & 0x0F);
    1a46:	a2 e3       	ldi	r26, 0x32	; 50
    1a48:	b0 e0       	ldi	r27, 0x00	; 0
    1a4a:	e2 e3       	ldi	r30, 0x32	; 50
    1a4c:	f0 e0       	ldi	r31, 0x00	; 0
    1a4e:	80 81       	ld	r24, Z
    1a50:	98 2f       	mov	r25, r24
    1a52:	90 7f       	andi	r25, 0xF0	; 240
    1a54:	fe 01       	movw	r30, r28
    1a56:	e1 58       	subi	r30, 0x81	; 129
    1a58:	ff 4f       	sbci	r31, 0xFF	; 255
    1a5a:	80 81       	ld	r24, Z
    1a5c:	8f 70       	andi	r24, 0x0F	; 15
    1a5e:	89 2b       	or	r24, r25
    1a60:	8c 93       	st	X, r24
    1a62:	80 e0       	ldi	r24, 0x00	; 0
    1a64:	90 e0       	ldi	r25, 0x00	; 0
    1a66:	a0 e8       	ldi	r26, 0x80	; 128
    1a68:	bf e3       	ldi	r27, 0x3F	; 63
    1a6a:	8d ab       	std	Y+53, r24	; 0x35
    1a6c:	9e ab       	std	Y+54, r25	; 0x36
    1a6e:	af ab       	std	Y+55, r26	; 0x37
    1a70:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1a72:	6d a9       	ldd	r22, Y+53	; 0x35
    1a74:	7e a9       	ldd	r23, Y+54	; 0x36
    1a76:	8f a9       	ldd	r24, Y+55	; 0x37
    1a78:	98 ad       	ldd	r25, Y+56	; 0x38
    1a7a:	20 e0       	ldi	r18, 0x00	; 0
    1a7c:	30 e0       	ldi	r19, 0x00	; 0
    1a7e:	4a e7       	ldi	r20, 0x7A	; 122
    1a80:	53 e4       	ldi	r21, 0x43	; 67
    1a82:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1a86:	dc 01       	movw	r26, r24
    1a88:	cb 01       	movw	r24, r22
    1a8a:	89 ab       	std	Y+49, r24	; 0x31
    1a8c:	9a ab       	std	Y+50, r25	; 0x32
    1a8e:	ab ab       	std	Y+51, r26	; 0x33
    1a90:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    1a92:	69 a9       	ldd	r22, Y+49	; 0x31
    1a94:	7a a9       	ldd	r23, Y+50	; 0x32
    1a96:	8b a9       	ldd	r24, Y+51	; 0x33
    1a98:	9c a9       	ldd	r25, Y+52	; 0x34
    1a9a:	20 e0       	ldi	r18, 0x00	; 0
    1a9c:	30 e0       	ldi	r19, 0x00	; 0
    1a9e:	40 e8       	ldi	r20, 0x80	; 128
    1aa0:	5f e3       	ldi	r21, 0x3F	; 63
    1aa2:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1aa6:	88 23       	and	r24, r24
    1aa8:	2c f4       	brge	.+10     	; 0x1ab4 <LCD_sendCommand+0x8ce>
		__ticks = 1;
    1aaa:	81 e0       	ldi	r24, 0x01	; 1
    1aac:	90 e0       	ldi	r25, 0x00	; 0
    1aae:	98 ab       	std	Y+48, r25	; 0x30
    1ab0:	8f a7       	std	Y+47, r24	; 0x2f
    1ab2:	3f c0       	rjmp	.+126    	; 0x1b32 <LCD_sendCommand+0x94c>
	else if (__tmp > 65535)
    1ab4:	69 a9       	ldd	r22, Y+49	; 0x31
    1ab6:	7a a9       	ldd	r23, Y+50	; 0x32
    1ab8:	8b a9       	ldd	r24, Y+51	; 0x33
    1aba:	9c a9       	ldd	r25, Y+52	; 0x34
    1abc:	20 e0       	ldi	r18, 0x00	; 0
    1abe:	3f ef       	ldi	r19, 0xFF	; 255
    1ac0:	4f e7       	ldi	r20, 0x7F	; 127
    1ac2:	57 e4       	ldi	r21, 0x47	; 71
    1ac4:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1ac8:	18 16       	cp	r1, r24
    1aca:	4c f5       	brge	.+82     	; 0x1b1e <LCD_sendCommand+0x938>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1acc:	6d a9       	ldd	r22, Y+53	; 0x35
    1ace:	7e a9       	ldd	r23, Y+54	; 0x36
    1ad0:	8f a9       	ldd	r24, Y+55	; 0x37
    1ad2:	98 ad       	ldd	r25, Y+56	; 0x38
    1ad4:	20 e0       	ldi	r18, 0x00	; 0
    1ad6:	30 e0       	ldi	r19, 0x00	; 0
    1ad8:	40 e2       	ldi	r20, 0x20	; 32
    1ada:	51 e4       	ldi	r21, 0x41	; 65
    1adc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1ae0:	dc 01       	movw	r26, r24
    1ae2:	cb 01       	movw	r24, r22
    1ae4:	bc 01       	movw	r22, r24
    1ae6:	cd 01       	movw	r24, r26
    1ae8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1aec:	dc 01       	movw	r26, r24
    1aee:	cb 01       	movw	r24, r22
    1af0:	98 ab       	std	Y+48, r25	; 0x30
    1af2:	8f a7       	std	Y+47, r24	; 0x2f
    1af4:	0f c0       	rjmp	.+30     	; 0x1b14 <LCD_sendCommand+0x92e>
    1af6:	89 e1       	ldi	r24, 0x19	; 25
    1af8:	90 e0       	ldi	r25, 0x00	; 0
    1afa:	9e a7       	std	Y+46, r25	; 0x2e
    1afc:	8d a7       	std	Y+45, r24	; 0x2d
    1afe:	8d a5       	ldd	r24, Y+45	; 0x2d
    1b00:	9e a5       	ldd	r25, Y+46	; 0x2e
    1b02:	01 97       	sbiw	r24, 0x01	; 1
    1b04:	f1 f7       	brne	.-4      	; 0x1b02 <LCD_sendCommand+0x91c>
    1b06:	9e a7       	std	Y+46, r25	; 0x2e
    1b08:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1b0a:	8f a5       	ldd	r24, Y+47	; 0x2f
    1b0c:	98 a9       	ldd	r25, Y+48	; 0x30
    1b0e:	01 97       	sbiw	r24, 0x01	; 1
    1b10:	98 ab       	std	Y+48, r25	; 0x30
    1b12:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1b14:	8f a5       	ldd	r24, Y+47	; 0x2f
    1b16:	98 a9       	ldd	r25, Y+48	; 0x30
    1b18:	00 97       	sbiw	r24, 0x00	; 0
    1b1a:	69 f7       	brne	.-38     	; 0x1af6 <LCD_sendCommand+0x910>
    1b1c:	14 c0       	rjmp	.+40     	; 0x1b46 <LCD_sendCommand+0x960>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1b1e:	69 a9       	ldd	r22, Y+49	; 0x31
    1b20:	7a a9       	ldd	r23, Y+50	; 0x32
    1b22:	8b a9       	ldd	r24, Y+51	; 0x33
    1b24:	9c a9       	ldd	r25, Y+52	; 0x34
    1b26:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1b2a:	dc 01       	movw	r26, r24
    1b2c:	cb 01       	movw	r24, r22
    1b2e:	98 ab       	std	Y+48, r25	; 0x30
    1b30:	8f a7       	std	Y+47, r24	; 0x2f
    1b32:	8f a5       	ldd	r24, Y+47	; 0x2f
    1b34:	98 a9       	ldd	r25, Y+48	; 0x30
    1b36:	9c a7       	std	Y+44, r25	; 0x2c
    1b38:	8b a7       	std	Y+43, r24	; 0x2b
    1b3a:	8b a5       	ldd	r24, Y+43	; 0x2b
    1b3c:	9c a5       	ldd	r25, Y+44	; 0x2c
    1b3e:	01 97       	sbiw	r24, 0x01	; 1
    1b40:	f1 f7       	brne	.-4      	; 0x1b3e <LCD_sendCommand+0x958>
    1b42:	9c a7       	std	Y+44, r25	; 0x2c
    1b44:	8b a7       	std	Y+43, r24	; 0x2b
	    }
		_delay_ms(1); /* delay for processing Tdsw = 100ns */
		CLEAR_BIT(LCD_CTRL_PORT,E); /* disable LCD E=0 */
    1b46:	a8 e3       	ldi	r26, 0x38	; 56
    1b48:	b0 e0       	ldi	r27, 0x00	; 0
    1b4a:	e8 e3       	ldi	r30, 0x38	; 56
    1b4c:	f0 e0       	ldi	r31, 0x00	; 0
    1b4e:	80 81       	ld	r24, Z
    1b50:	8f 7b       	andi	r24, 0xBF	; 191
    1b52:	8c 93       	st	X, r24
    1b54:	80 e0       	ldi	r24, 0x00	; 0
    1b56:	90 e0       	ldi	r25, 0x00	; 0
    1b58:	a0 e8       	ldi	r26, 0x80	; 128
    1b5a:	bf e3       	ldi	r27, 0x3F	; 63
    1b5c:	8f a3       	std	Y+39, r24	; 0x27
    1b5e:	98 a7       	std	Y+40, r25	; 0x28
    1b60:	a9 a7       	std	Y+41, r26	; 0x29
    1b62:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1b64:	6f a1       	ldd	r22, Y+39	; 0x27
    1b66:	78 a5       	ldd	r23, Y+40	; 0x28
    1b68:	89 a5       	ldd	r24, Y+41	; 0x29
    1b6a:	9a a5       	ldd	r25, Y+42	; 0x2a
    1b6c:	20 e0       	ldi	r18, 0x00	; 0
    1b6e:	30 e0       	ldi	r19, 0x00	; 0
    1b70:	4a e7       	ldi	r20, 0x7A	; 122
    1b72:	53 e4       	ldi	r21, 0x43	; 67
    1b74:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1b78:	dc 01       	movw	r26, r24
    1b7a:	cb 01       	movw	r24, r22
    1b7c:	8b a3       	std	Y+35, r24	; 0x23
    1b7e:	9c a3       	std	Y+36, r25	; 0x24
    1b80:	ad a3       	std	Y+37, r26	; 0x25
    1b82:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    1b84:	6b a1       	ldd	r22, Y+35	; 0x23
    1b86:	7c a1       	ldd	r23, Y+36	; 0x24
    1b88:	8d a1       	ldd	r24, Y+37	; 0x25
    1b8a:	9e a1       	ldd	r25, Y+38	; 0x26
    1b8c:	20 e0       	ldi	r18, 0x00	; 0
    1b8e:	30 e0       	ldi	r19, 0x00	; 0
    1b90:	40 e8       	ldi	r20, 0x80	; 128
    1b92:	5f e3       	ldi	r21, 0x3F	; 63
    1b94:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1b98:	88 23       	and	r24, r24
    1b9a:	2c f4       	brge	.+10     	; 0x1ba6 <LCD_sendCommand+0x9c0>
		__ticks = 1;
    1b9c:	81 e0       	ldi	r24, 0x01	; 1
    1b9e:	90 e0       	ldi	r25, 0x00	; 0
    1ba0:	9a a3       	std	Y+34, r25	; 0x22
    1ba2:	89 a3       	std	Y+33, r24	; 0x21
    1ba4:	3f c0       	rjmp	.+126    	; 0x1c24 <LCD_sendCommand+0xa3e>
	else if (__tmp > 65535)
    1ba6:	6b a1       	ldd	r22, Y+35	; 0x23
    1ba8:	7c a1       	ldd	r23, Y+36	; 0x24
    1baa:	8d a1       	ldd	r24, Y+37	; 0x25
    1bac:	9e a1       	ldd	r25, Y+38	; 0x26
    1bae:	20 e0       	ldi	r18, 0x00	; 0
    1bb0:	3f ef       	ldi	r19, 0xFF	; 255
    1bb2:	4f e7       	ldi	r20, 0x7F	; 127
    1bb4:	57 e4       	ldi	r21, 0x47	; 71
    1bb6:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1bba:	18 16       	cp	r1, r24
    1bbc:	4c f5       	brge	.+82     	; 0x1c10 <LCD_sendCommand+0xa2a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1bbe:	6f a1       	ldd	r22, Y+39	; 0x27
    1bc0:	78 a5       	ldd	r23, Y+40	; 0x28
    1bc2:	89 a5       	ldd	r24, Y+41	; 0x29
    1bc4:	9a a5       	ldd	r25, Y+42	; 0x2a
    1bc6:	20 e0       	ldi	r18, 0x00	; 0
    1bc8:	30 e0       	ldi	r19, 0x00	; 0
    1bca:	40 e2       	ldi	r20, 0x20	; 32
    1bcc:	51 e4       	ldi	r21, 0x41	; 65
    1bce:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1bd2:	dc 01       	movw	r26, r24
    1bd4:	cb 01       	movw	r24, r22
    1bd6:	bc 01       	movw	r22, r24
    1bd8:	cd 01       	movw	r24, r26
    1bda:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1bde:	dc 01       	movw	r26, r24
    1be0:	cb 01       	movw	r24, r22
    1be2:	9a a3       	std	Y+34, r25	; 0x22
    1be4:	89 a3       	std	Y+33, r24	; 0x21
    1be6:	0f c0       	rjmp	.+30     	; 0x1c06 <LCD_sendCommand+0xa20>
    1be8:	89 e1       	ldi	r24, 0x19	; 25
    1bea:	90 e0       	ldi	r25, 0x00	; 0
    1bec:	98 a3       	std	Y+32, r25	; 0x20
    1bee:	8f 8f       	std	Y+31, r24	; 0x1f
    1bf0:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1bf2:	98 a1       	ldd	r25, Y+32	; 0x20
    1bf4:	01 97       	sbiw	r24, 0x01	; 1
    1bf6:	f1 f7       	brne	.-4      	; 0x1bf4 <LCD_sendCommand+0xa0e>
    1bf8:	98 a3       	std	Y+32, r25	; 0x20
    1bfa:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1bfc:	89 a1       	ldd	r24, Y+33	; 0x21
    1bfe:	9a a1       	ldd	r25, Y+34	; 0x22
    1c00:	01 97       	sbiw	r24, 0x01	; 1
    1c02:	9a a3       	std	Y+34, r25	; 0x22
    1c04:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1c06:	89 a1       	ldd	r24, Y+33	; 0x21
    1c08:	9a a1       	ldd	r25, Y+34	; 0x22
    1c0a:	00 97       	sbiw	r24, 0x00	; 0
    1c0c:	69 f7       	brne	.-38     	; 0x1be8 <LCD_sendCommand+0xa02>
    1c0e:	20 c0       	rjmp	.+64     	; 0x1c50 <LCD_sendCommand+0xa6a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1c10:	6b a1       	ldd	r22, Y+35	; 0x23
    1c12:	7c a1       	ldd	r23, Y+36	; 0x24
    1c14:	8d a1       	ldd	r24, Y+37	; 0x25
    1c16:	9e a1       	ldd	r25, Y+38	; 0x26
    1c18:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1c1c:	dc 01       	movw	r26, r24
    1c1e:	cb 01       	movw	r24, r22
    1c20:	9a a3       	std	Y+34, r25	; 0x22
    1c22:	89 a3       	std	Y+33, r24	; 0x21
    1c24:	89 a1       	ldd	r24, Y+33	; 0x21
    1c26:	9a a1       	ldd	r25, Y+34	; 0x22
    1c28:	9e 8f       	std	Y+30, r25	; 0x1e
    1c2a:	8d 8f       	std	Y+29, r24	; 0x1d
    1c2c:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1c2e:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1c30:	01 97       	sbiw	r24, 0x01	; 1
    1c32:	f1 f7       	brne	.-4      	; 0x1c30 <LCD_sendCommand+0xa4a>
    1c34:	9e 8f       	std	Y+30, r25	; 0x1e
    1c36:	8d 8f       	std	Y+29, r24	; 0x1d
    1c38:	0b c0       	rjmp	.+22     	; 0x1c50 <LCD_sendCommand+0xa6a>
		_delay_ms(1); /* delay for processing Th = 13ns */
	}
	else if (LCD.type ==TWO_LINE_LCD_Eight_BIT_MODE)
    1c3a:	80 91 7c 00 	lds	r24, 0x007C
    1c3e:	88 33       	cpi	r24, 0x38	; 56
    1c40:	39 f4       	brne	.+14     	; 0x1c50 <LCD_sendCommand+0xa6a>
	LCD_DATA_PORT = command; /* out the required command to the data bus D0 --> D7 */
    1c42:	e2 e3       	ldi	r30, 0x32	; 50
    1c44:	f0 e0       	ldi	r31, 0x00	; 0
    1c46:	de 01       	movw	r26, r28
    1c48:	a1 58       	subi	r26, 0x81	; 129
    1c4a:	bf 4f       	sbci	r27, 0xFF	; 255
    1c4c:	8c 91       	ld	r24, X
    1c4e:	80 83       	st	Z, r24
    1c50:	80 e0       	ldi	r24, 0x00	; 0
    1c52:	90 e0       	ldi	r25, 0x00	; 0
    1c54:	a0 e8       	ldi	r26, 0x80	; 128
    1c56:	bf e3       	ldi	r27, 0x3F	; 63
    1c58:	89 8f       	std	Y+25, r24	; 0x19
    1c5a:	9a 8f       	std	Y+26, r25	; 0x1a
    1c5c:	ab 8f       	std	Y+27, r26	; 0x1b
    1c5e:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1c60:	69 8d       	ldd	r22, Y+25	; 0x19
    1c62:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1c64:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1c66:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1c68:	20 e0       	ldi	r18, 0x00	; 0
    1c6a:	30 e0       	ldi	r19, 0x00	; 0
    1c6c:	4a e7       	ldi	r20, 0x7A	; 122
    1c6e:	53 e4       	ldi	r21, 0x43	; 67
    1c70:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1c74:	dc 01       	movw	r26, r24
    1c76:	cb 01       	movw	r24, r22
    1c78:	8d 8b       	std	Y+21, r24	; 0x15
    1c7a:	9e 8b       	std	Y+22, r25	; 0x16
    1c7c:	af 8b       	std	Y+23, r26	; 0x17
    1c7e:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1c80:	6d 89       	ldd	r22, Y+21	; 0x15
    1c82:	7e 89       	ldd	r23, Y+22	; 0x16
    1c84:	8f 89       	ldd	r24, Y+23	; 0x17
    1c86:	98 8d       	ldd	r25, Y+24	; 0x18
    1c88:	20 e0       	ldi	r18, 0x00	; 0
    1c8a:	30 e0       	ldi	r19, 0x00	; 0
    1c8c:	40 e8       	ldi	r20, 0x80	; 128
    1c8e:	5f e3       	ldi	r21, 0x3F	; 63
    1c90:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1c94:	88 23       	and	r24, r24
    1c96:	2c f4       	brge	.+10     	; 0x1ca2 <LCD_sendCommand+0xabc>
		__ticks = 1;
    1c98:	81 e0       	ldi	r24, 0x01	; 1
    1c9a:	90 e0       	ldi	r25, 0x00	; 0
    1c9c:	9c 8b       	std	Y+20, r25	; 0x14
    1c9e:	8b 8b       	std	Y+19, r24	; 0x13
    1ca0:	3f c0       	rjmp	.+126    	; 0x1d20 <LCD_sendCommand+0xb3a>
	else if (__tmp > 65535)
    1ca2:	6d 89       	ldd	r22, Y+21	; 0x15
    1ca4:	7e 89       	ldd	r23, Y+22	; 0x16
    1ca6:	8f 89       	ldd	r24, Y+23	; 0x17
    1ca8:	98 8d       	ldd	r25, Y+24	; 0x18
    1caa:	20 e0       	ldi	r18, 0x00	; 0
    1cac:	3f ef       	ldi	r19, 0xFF	; 255
    1cae:	4f e7       	ldi	r20, 0x7F	; 127
    1cb0:	57 e4       	ldi	r21, 0x47	; 71
    1cb2:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1cb6:	18 16       	cp	r1, r24
    1cb8:	4c f5       	brge	.+82     	; 0x1d0c <LCD_sendCommand+0xb26>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1cba:	69 8d       	ldd	r22, Y+25	; 0x19
    1cbc:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1cbe:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1cc0:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1cc2:	20 e0       	ldi	r18, 0x00	; 0
    1cc4:	30 e0       	ldi	r19, 0x00	; 0
    1cc6:	40 e2       	ldi	r20, 0x20	; 32
    1cc8:	51 e4       	ldi	r21, 0x41	; 65
    1cca:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1cce:	dc 01       	movw	r26, r24
    1cd0:	cb 01       	movw	r24, r22
    1cd2:	bc 01       	movw	r22, r24
    1cd4:	cd 01       	movw	r24, r26
    1cd6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1cda:	dc 01       	movw	r26, r24
    1cdc:	cb 01       	movw	r24, r22
    1cde:	9c 8b       	std	Y+20, r25	; 0x14
    1ce0:	8b 8b       	std	Y+19, r24	; 0x13
    1ce2:	0f c0       	rjmp	.+30     	; 0x1d02 <LCD_sendCommand+0xb1c>
    1ce4:	89 e1       	ldi	r24, 0x19	; 25
    1ce6:	90 e0       	ldi	r25, 0x00	; 0
    1ce8:	9a 8b       	std	Y+18, r25	; 0x12
    1cea:	89 8b       	std	Y+17, r24	; 0x11
    1cec:	89 89       	ldd	r24, Y+17	; 0x11
    1cee:	9a 89       	ldd	r25, Y+18	; 0x12
    1cf0:	01 97       	sbiw	r24, 0x01	; 1
    1cf2:	f1 f7       	brne	.-4      	; 0x1cf0 <LCD_sendCommand+0xb0a>
    1cf4:	9a 8b       	std	Y+18, r25	; 0x12
    1cf6:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1cf8:	8b 89       	ldd	r24, Y+19	; 0x13
    1cfa:	9c 89       	ldd	r25, Y+20	; 0x14
    1cfc:	01 97       	sbiw	r24, 0x01	; 1
    1cfe:	9c 8b       	std	Y+20, r25	; 0x14
    1d00:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1d02:	8b 89       	ldd	r24, Y+19	; 0x13
    1d04:	9c 89       	ldd	r25, Y+20	; 0x14
    1d06:	00 97       	sbiw	r24, 0x00	; 0
    1d08:	69 f7       	brne	.-38     	; 0x1ce4 <LCD_sendCommand+0xafe>
    1d0a:	14 c0       	rjmp	.+40     	; 0x1d34 <LCD_sendCommand+0xb4e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1d0c:	6d 89       	ldd	r22, Y+21	; 0x15
    1d0e:	7e 89       	ldd	r23, Y+22	; 0x16
    1d10:	8f 89       	ldd	r24, Y+23	; 0x17
    1d12:	98 8d       	ldd	r25, Y+24	; 0x18
    1d14:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1d18:	dc 01       	movw	r26, r24
    1d1a:	cb 01       	movw	r24, r22
    1d1c:	9c 8b       	std	Y+20, r25	; 0x14
    1d1e:	8b 8b       	std	Y+19, r24	; 0x13
    1d20:	8b 89       	ldd	r24, Y+19	; 0x13
    1d22:	9c 89       	ldd	r25, Y+20	; 0x14
    1d24:	98 8b       	std	Y+16, r25	; 0x10
    1d26:	8f 87       	std	Y+15, r24	; 0x0f
    1d28:	8f 85       	ldd	r24, Y+15	; 0x0f
    1d2a:	98 89       	ldd	r25, Y+16	; 0x10
    1d2c:	01 97       	sbiw	r24, 0x01	; 1
    1d2e:	f1 f7       	brne	.-4      	; 0x1d2c <LCD_sendCommand+0xb46>
    1d30:	98 8b       	std	Y+16, r25	; 0x10
    1d32:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	CLEAR_BIT(LCD_CTRL_PORT,E); /* disable LCD E=0 */
    1d34:	a8 e3       	ldi	r26, 0x38	; 56
    1d36:	b0 e0       	ldi	r27, 0x00	; 0
    1d38:	e8 e3       	ldi	r30, 0x38	; 56
    1d3a:	f0 e0       	ldi	r31, 0x00	; 0
    1d3c:	80 81       	ld	r24, Z
    1d3e:	8f 7b       	andi	r24, 0xBF	; 191
    1d40:	8c 93       	st	X, r24
    1d42:	80 e0       	ldi	r24, 0x00	; 0
    1d44:	90 e0       	ldi	r25, 0x00	; 0
    1d46:	a0 e8       	ldi	r26, 0x80	; 128
    1d48:	bf e3       	ldi	r27, 0x3F	; 63
    1d4a:	8b 87       	std	Y+11, r24	; 0x0b
    1d4c:	9c 87       	std	Y+12, r25	; 0x0c
    1d4e:	ad 87       	std	Y+13, r26	; 0x0d
    1d50:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1d52:	6b 85       	ldd	r22, Y+11	; 0x0b
    1d54:	7c 85       	ldd	r23, Y+12	; 0x0c
    1d56:	8d 85       	ldd	r24, Y+13	; 0x0d
    1d58:	9e 85       	ldd	r25, Y+14	; 0x0e
    1d5a:	20 e0       	ldi	r18, 0x00	; 0
    1d5c:	30 e0       	ldi	r19, 0x00	; 0
    1d5e:	4a e7       	ldi	r20, 0x7A	; 122
    1d60:	53 e4       	ldi	r21, 0x43	; 67
    1d62:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1d66:	dc 01       	movw	r26, r24
    1d68:	cb 01       	movw	r24, r22
    1d6a:	8f 83       	std	Y+7, r24	; 0x07
    1d6c:	98 87       	std	Y+8, r25	; 0x08
    1d6e:	a9 87       	std	Y+9, r26	; 0x09
    1d70:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1d72:	6f 81       	ldd	r22, Y+7	; 0x07
    1d74:	78 85       	ldd	r23, Y+8	; 0x08
    1d76:	89 85       	ldd	r24, Y+9	; 0x09
    1d78:	9a 85       	ldd	r25, Y+10	; 0x0a
    1d7a:	20 e0       	ldi	r18, 0x00	; 0
    1d7c:	30 e0       	ldi	r19, 0x00	; 0
    1d7e:	40 e8       	ldi	r20, 0x80	; 128
    1d80:	5f e3       	ldi	r21, 0x3F	; 63
    1d82:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1d86:	88 23       	and	r24, r24
    1d88:	2c f4       	brge	.+10     	; 0x1d94 <LCD_sendCommand+0xbae>
		__ticks = 1;
    1d8a:	81 e0       	ldi	r24, 0x01	; 1
    1d8c:	90 e0       	ldi	r25, 0x00	; 0
    1d8e:	9e 83       	std	Y+6, r25	; 0x06
    1d90:	8d 83       	std	Y+5, r24	; 0x05
    1d92:	3f c0       	rjmp	.+126    	; 0x1e12 <LCD_sendCommand+0xc2c>
	else if (__tmp > 65535)
    1d94:	6f 81       	ldd	r22, Y+7	; 0x07
    1d96:	78 85       	ldd	r23, Y+8	; 0x08
    1d98:	89 85       	ldd	r24, Y+9	; 0x09
    1d9a:	9a 85       	ldd	r25, Y+10	; 0x0a
    1d9c:	20 e0       	ldi	r18, 0x00	; 0
    1d9e:	3f ef       	ldi	r19, 0xFF	; 255
    1da0:	4f e7       	ldi	r20, 0x7F	; 127
    1da2:	57 e4       	ldi	r21, 0x47	; 71
    1da4:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1da8:	18 16       	cp	r1, r24
    1daa:	4c f5       	brge	.+82     	; 0x1dfe <LCD_sendCommand+0xc18>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1dac:	6b 85       	ldd	r22, Y+11	; 0x0b
    1dae:	7c 85       	ldd	r23, Y+12	; 0x0c
    1db0:	8d 85       	ldd	r24, Y+13	; 0x0d
    1db2:	9e 85       	ldd	r25, Y+14	; 0x0e
    1db4:	20 e0       	ldi	r18, 0x00	; 0
    1db6:	30 e0       	ldi	r19, 0x00	; 0
    1db8:	40 e2       	ldi	r20, 0x20	; 32
    1dba:	51 e4       	ldi	r21, 0x41	; 65
    1dbc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1dc0:	dc 01       	movw	r26, r24
    1dc2:	cb 01       	movw	r24, r22
    1dc4:	bc 01       	movw	r22, r24
    1dc6:	cd 01       	movw	r24, r26
    1dc8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1dcc:	dc 01       	movw	r26, r24
    1dce:	cb 01       	movw	r24, r22
    1dd0:	9e 83       	std	Y+6, r25	; 0x06
    1dd2:	8d 83       	std	Y+5, r24	; 0x05
    1dd4:	0f c0       	rjmp	.+30     	; 0x1df4 <LCD_sendCommand+0xc0e>
    1dd6:	89 e1       	ldi	r24, 0x19	; 25
    1dd8:	90 e0       	ldi	r25, 0x00	; 0
    1dda:	9c 83       	std	Y+4, r25	; 0x04
    1ddc:	8b 83       	std	Y+3, r24	; 0x03
    1dde:	8b 81       	ldd	r24, Y+3	; 0x03
    1de0:	9c 81       	ldd	r25, Y+4	; 0x04
    1de2:	01 97       	sbiw	r24, 0x01	; 1
    1de4:	f1 f7       	brne	.-4      	; 0x1de2 <LCD_sendCommand+0xbfc>
    1de6:	9c 83       	std	Y+4, r25	; 0x04
    1de8:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1dea:	8d 81       	ldd	r24, Y+5	; 0x05
    1dec:	9e 81       	ldd	r25, Y+6	; 0x06
    1dee:	01 97       	sbiw	r24, 0x01	; 1
    1df0:	9e 83       	std	Y+6, r25	; 0x06
    1df2:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1df4:	8d 81       	ldd	r24, Y+5	; 0x05
    1df6:	9e 81       	ldd	r25, Y+6	; 0x06
    1df8:	00 97       	sbiw	r24, 0x00	; 0
    1dfa:	69 f7       	brne	.-38     	; 0x1dd6 <LCD_sendCommand+0xbf0>
    1dfc:	14 c0       	rjmp	.+40     	; 0x1e26 <LCD_sendCommand+0xc40>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1dfe:	6f 81       	ldd	r22, Y+7	; 0x07
    1e00:	78 85       	ldd	r23, Y+8	; 0x08
    1e02:	89 85       	ldd	r24, Y+9	; 0x09
    1e04:	9a 85       	ldd	r25, Y+10	; 0x0a
    1e06:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1e0a:	dc 01       	movw	r26, r24
    1e0c:	cb 01       	movw	r24, r22
    1e0e:	9e 83       	std	Y+6, r25	; 0x06
    1e10:	8d 83       	std	Y+5, r24	; 0x05
    1e12:	8d 81       	ldd	r24, Y+5	; 0x05
    1e14:	9e 81       	ldd	r25, Y+6	; 0x06
    1e16:	9a 83       	std	Y+2, r25	; 0x02
    1e18:	89 83       	std	Y+1, r24	; 0x01
    1e1a:	89 81       	ldd	r24, Y+1	; 0x01
    1e1c:	9a 81       	ldd	r25, Y+2	; 0x02
    1e1e:	01 97       	sbiw	r24, 0x01	; 1
    1e20:	f1 f7       	brne	.-4      	; 0x1e1e <LCD_sendCommand+0xc38>
    1e22:	9a 83       	std	Y+2, r25	; 0x02
    1e24:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1); /* delay for processing Th = 13ns */
}
    1e26:	c9 57       	subi	r28, 0x79	; 121
    1e28:	df 4f       	sbci	r29, 0xFF	; 255
    1e2a:	0f b6       	in	r0, 0x3f	; 63
    1e2c:	f8 94       	cli
    1e2e:	de bf       	out	0x3e, r29	; 62
    1e30:	0f be       	out	0x3f, r0	; 63
    1e32:	cd bf       	out	0x3d, r28	; 61
    1e34:	cf 91       	pop	r28
    1e36:	df 91       	pop	r29
    1e38:	1f 91       	pop	r17
    1e3a:	0f 91       	pop	r16
    1e3c:	08 95       	ret

00001e3e <LCD_disply_character>:


/*function to display a character in the LCD*/
void LCD_disply_character(char data)
{
    1e3e:	0f 93       	push	r16
    1e40:	1f 93       	push	r17
    1e42:	df 93       	push	r29
    1e44:	cf 93       	push	r28
    1e46:	cd b7       	in	r28, 0x3d	; 61
    1e48:	de b7       	in	r29, 0x3e	; 62
    1e4a:	c7 58       	subi	r28, 0x87	; 135
    1e4c:	d0 40       	sbci	r29, 0x00	; 0
    1e4e:	0f b6       	in	r0, 0x3f	; 63
    1e50:	f8 94       	cli
    1e52:	de bf       	out	0x3e, r29	; 62
    1e54:	0f be       	out	0x3f, r0	; 63
    1e56:	cd bf       	out	0x3d, r28	; 61
    1e58:	fe 01       	movw	r30, r28
    1e5a:	e1 58       	subi	r30, 0x81	; 129
    1e5c:	ff 4f       	sbci	r31, 0xFF	; 255
    1e5e:	80 83       	st	Z, r24
	LCD = Configure_LCD();
    1e60:	0e 94 28 16 	call	0x2c50	; 0x2c50 <Configure_LCD>
    1e64:	fe 01       	movw	r30, r28
    1e66:	e0 58       	subi	r30, 0x80	; 128
    1e68:	ff 4f       	sbci	r31, 0xFF	; 255
    1e6a:	60 83       	st	Z, r22
    1e6c:	fe 01       	movw	r30, r28
    1e6e:	ef 57       	subi	r30, 0x7F	; 127
    1e70:	ff 4f       	sbci	r31, 0xFF	; 255
    1e72:	70 83       	st	Z, r23
    1e74:	fe 01       	movw	r30, r28
    1e76:	ee 57       	subi	r30, 0x7E	; 126
    1e78:	ff 4f       	sbci	r31, 0xFF	; 255
    1e7a:	80 83       	st	Z, r24
    1e7c:	ce 01       	movw	r24, r28
    1e7e:	80 58       	subi	r24, 0x80	; 128
    1e80:	9f 4f       	sbci	r25, 0xFF	; 255
    1e82:	2c e7       	ldi	r18, 0x7C	; 124
    1e84:	30 e0       	ldi	r19, 0x00	; 0
    1e86:	cd 57       	subi	r28, 0x7D	; 125
    1e88:	df 4f       	sbci	r29, 0xFF	; 255
    1e8a:	39 83       	std	Y+1, r19	; 0x01
    1e8c:	28 83       	st	Y, r18
    1e8e:	c3 58       	subi	r28, 0x83	; 131
    1e90:	d0 40       	sbci	r29, 0x00	; 0
    1e92:	cb 57       	subi	r28, 0x7B	; 123
    1e94:	df 4f       	sbci	r29, 0xFF	; 255
    1e96:	99 83       	std	Y+1, r25	; 0x01
    1e98:	88 83       	st	Y, r24
    1e9a:	c5 58       	subi	r28, 0x85	; 133
    1e9c:	d0 40       	sbci	r29, 0x00	; 0
    1e9e:	33 e0       	ldi	r19, 0x03	; 3
    1ea0:	c9 57       	subi	r28, 0x79	; 121
    1ea2:	df 4f       	sbci	r29, 0xFF	; 255
    1ea4:	38 83       	st	Y, r19
    1ea6:	c7 58       	subi	r28, 0x87	; 135
    1ea8:	d0 40       	sbci	r29, 0x00	; 0
    1eaa:	cb 57       	subi	r28, 0x7B	; 123
    1eac:	df 4f       	sbci	r29, 0xFF	; 255
    1eae:	e8 81       	ld	r30, Y
    1eb0:	f9 81       	ldd	r31, Y+1	; 0x01
    1eb2:	c5 58       	subi	r28, 0x85	; 133
    1eb4:	d0 40       	sbci	r29, 0x00	; 0
    1eb6:	00 80       	ld	r0, Z
    1eb8:	cb 57       	subi	r28, 0x7B	; 123
    1eba:	df 4f       	sbci	r29, 0xFF	; 255
    1ebc:	28 81       	ld	r18, Y
    1ebe:	39 81       	ldd	r19, Y+1	; 0x01
    1ec0:	c5 58       	subi	r28, 0x85	; 133
    1ec2:	d0 40       	sbci	r29, 0x00	; 0
    1ec4:	2f 5f       	subi	r18, 0xFF	; 255
    1ec6:	3f 4f       	sbci	r19, 0xFF	; 255
    1ec8:	cb 57       	subi	r28, 0x7B	; 123
    1eca:	df 4f       	sbci	r29, 0xFF	; 255
    1ecc:	39 83       	std	Y+1, r19	; 0x01
    1ece:	28 83       	st	Y, r18
    1ed0:	c5 58       	subi	r28, 0x85	; 133
    1ed2:	d0 40       	sbci	r29, 0x00	; 0
    1ed4:	cd 57       	subi	r28, 0x7D	; 125
    1ed6:	df 4f       	sbci	r29, 0xFF	; 255
    1ed8:	e8 81       	ld	r30, Y
    1eda:	f9 81       	ldd	r31, Y+1	; 0x01
    1edc:	c3 58       	subi	r28, 0x83	; 131
    1ede:	d0 40       	sbci	r29, 0x00	; 0
    1ee0:	00 82       	st	Z, r0
    1ee2:	cd 57       	subi	r28, 0x7D	; 125
    1ee4:	df 4f       	sbci	r29, 0xFF	; 255
    1ee6:	28 81       	ld	r18, Y
    1ee8:	39 81       	ldd	r19, Y+1	; 0x01
    1eea:	c3 58       	subi	r28, 0x83	; 131
    1eec:	d0 40       	sbci	r29, 0x00	; 0
    1eee:	2f 5f       	subi	r18, 0xFF	; 255
    1ef0:	3f 4f       	sbci	r19, 0xFF	; 255
    1ef2:	cd 57       	subi	r28, 0x7D	; 125
    1ef4:	df 4f       	sbci	r29, 0xFF	; 255
    1ef6:	39 83       	std	Y+1, r19	; 0x01
    1ef8:	28 83       	st	Y, r18
    1efa:	c3 58       	subi	r28, 0x83	; 131
    1efc:	d0 40       	sbci	r29, 0x00	; 0
    1efe:	c9 57       	subi	r28, 0x79	; 121
    1f00:	df 4f       	sbci	r29, 0xFF	; 255
    1f02:	38 81       	ld	r19, Y
    1f04:	c7 58       	subi	r28, 0x87	; 135
    1f06:	d0 40       	sbci	r29, 0x00	; 0
    1f08:	31 50       	subi	r19, 0x01	; 1
    1f0a:	c9 57       	subi	r28, 0x79	; 121
    1f0c:	df 4f       	sbci	r29, 0xFF	; 255
    1f0e:	38 83       	st	Y, r19
    1f10:	c7 58       	subi	r28, 0x87	; 135
    1f12:	d0 40       	sbci	r29, 0x00	; 0
    1f14:	c9 57       	subi	r28, 0x79	; 121
    1f16:	df 4f       	sbci	r29, 0xFF	; 255
    1f18:	88 81       	ld	r24, Y
    1f1a:	c7 58       	subi	r28, 0x87	; 135
    1f1c:	d0 40       	sbci	r29, 0x00	; 0
    1f1e:	88 23       	and	r24, r24
    1f20:	21 f6       	brne	.-120    	; 0x1eaa <LCD_disply_character+0x6c>
	SET_BIT(LCD_CTRL_PORT,RS); /* Data Mode RS=1 */
    1f22:	a8 e3       	ldi	r26, 0x38	; 56
    1f24:	b0 e0       	ldi	r27, 0x00	; 0
    1f26:	e8 e3       	ldi	r30, 0x38	; 56
    1f28:	f0 e0       	ldi	r31, 0x00	; 0
    1f2a:	80 81       	ld	r24, Z
    1f2c:	80 61       	ori	r24, 0x10	; 16
    1f2e:	8c 93       	st	X, r24
	CLEAR_BIT(LCD_CTRL_PORT,RW); /* write data to LCD so RW=0 */
    1f30:	a8 e3       	ldi	r26, 0x38	; 56
    1f32:	b0 e0       	ldi	r27, 0x00	; 0
    1f34:	e8 e3       	ldi	r30, 0x38	; 56
    1f36:	f0 e0       	ldi	r31, 0x00	; 0
    1f38:	80 81       	ld	r24, Z
    1f3a:	8f 7d       	andi	r24, 0xDF	; 223
    1f3c:	8c 93       	st	X, r24
    1f3e:	fe 01       	movw	r30, r28
    1f40:	e5 58       	subi	r30, 0x85	; 133
    1f42:	ff 4f       	sbci	r31, 0xFF	; 255
    1f44:	80 e0       	ldi	r24, 0x00	; 0
    1f46:	90 e0       	ldi	r25, 0x00	; 0
    1f48:	a0 e8       	ldi	r26, 0x80	; 128
    1f4a:	bf e3       	ldi	r27, 0x3F	; 63
    1f4c:	80 83       	st	Z, r24
    1f4e:	91 83       	std	Z+1, r25	; 0x01
    1f50:	a2 83       	std	Z+2, r26	; 0x02
    1f52:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1f54:	8e 01       	movw	r16, r28
    1f56:	09 58       	subi	r16, 0x89	; 137
    1f58:	1f 4f       	sbci	r17, 0xFF	; 255
    1f5a:	fe 01       	movw	r30, r28
    1f5c:	e5 58       	subi	r30, 0x85	; 133
    1f5e:	ff 4f       	sbci	r31, 0xFF	; 255
    1f60:	60 81       	ld	r22, Z
    1f62:	71 81       	ldd	r23, Z+1	; 0x01
    1f64:	82 81       	ldd	r24, Z+2	; 0x02
    1f66:	93 81       	ldd	r25, Z+3	; 0x03
    1f68:	20 e0       	ldi	r18, 0x00	; 0
    1f6a:	30 e0       	ldi	r19, 0x00	; 0
    1f6c:	4a e7       	ldi	r20, 0x7A	; 122
    1f6e:	53 e4       	ldi	r21, 0x43	; 67
    1f70:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1f74:	dc 01       	movw	r26, r24
    1f76:	cb 01       	movw	r24, r22
    1f78:	f8 01       	movw	r30, r16
    1f7a:	80 83       	st	Z, r24
    1f7c:	91 83       	std	Z+1, r25	; 0x01
    1f7e:	a2 83       	std	Z+2, r26	; 0x02
    1f80:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1f82:	fe 01       	movw	r30, r28
    1f84:	e9 58       	subi	r30, 0x89	; 137
    1f86:	ff 4f       	sbci	r31, 0xFF	; 255
    1f88:	60 81       	ld	r22, Z
    1f8a:	71 81       	ldd	r23, Z+1	; 0x01
    1f8c:	82 81       	ldd	r24, Z+2	; 0x02
    1f8e:	93 81       	ldd	r25, Z+3	; 0x03
    1f90:	20 e0       	ldi	r18, 0x00	; 0
    1f92:	30 e0       	ldi	r19, 0x00	; 0
    1f94:	40 e8       	ldi	r20, 0x80	; 128
    1f96:	5f e3       	ldi	r21, 0x3F	; 63
    1f98:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1f9c:	88 23       	and	r24, r24
    1f9e:	44 f4       	brge	.+16     	; 0x1fb0 <LCD_disply_character+0x172>
		__ticks = 1;
    1fa0:	fe 01       	movw	r30, r28
    1fa2:	eb 58       	subi	r30, 0x8B	; 139
    1fa4:	ff 4f       	sbci	r31, 0xFF	; 255
    1fa6:	81 e0       	ldi	r24, 0x01	; 1
    1fa8:	90 e0       	ldi	r25, 0x00	; 0
    1faa:	91 83       	std	Z+1, r25	; 0x01
    1fac:	80 83       	st	Z, r24
    1fae:	64 c0       	rjmp	.+200    	; 0x2078 <LCD_disply_character+0x23a>
	else if (__tmp > 65535)
    1fb0:	fe 01       	movw	r30, r28
    1fb2:	e9 58       	subi	r30, 0x89	; 137
    1fb4:	ff 4f       	sbci	r31, 0xFF	; 255
    1fb6:	60 81       	ld	r22, Z
    1fb8:	71 81       	ldd	r23, Z+1	; 0x01
    1fba:	82 81       	ldd	r24, Z+2	; 0x02
    1fbc:	93 81       	ldd	r25, Z+3	; 0x03
    1fbe:	20 e0       	ldi	r18, 0x00	; 0
    1fc0:	3f ef       	ldi	r19, 0xFF	; 255
    1fc2:	4f e7       	ldi	r20, 0x7F	; 127
    1fc4:	57 e4       	ldi	r21, 0x47	; 71
    1fc6:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1fca:	18 16       	cp	r1, r24
    1fcc:	0c f0       	brlt	.+2      	; 0x1fd0 <LCD_disply_character+0x192>
    1fce:	43 c0       	rjmp	.+134    	; 0x2056 <LCD_disply_character+0x218>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1fd0:	fe 01       	movw	r30, r28
    1fd2:	e5 58       	subi	r30, 0x85	; 133
    1fd4:	ff 4f       	sbci	r31, 0xFF	; 255
    1fd6:	60 81       	ld	r22, Z
    1fd8:	71 81       	ldd	r23, Z+1	; 0x01
    1fda:	82 81       	ldd	r24, Z+2	; 0x02
    1fdc:	93 81       	ldd	r25, Z+3	; 0x03
    1fde:	20 e0       	ldi	r18, 0x00	; 0
    1fe0:	30 e0       	ldi	r19, 0x00	; 0
    1fe2:	40 e2       	ldi	r20, 0x20	; 32
    1fe4:	51 e4       	ldi	r21, 0x41	; 65
    1fe6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1fea:	dc 01       	movw	r26, r24
    1fec:	cb 01       	movw	r24, r22
    1fee:	8e 01       	movw	r16, r28
    1ff0:	0b 58       	subi	r16, 0x8B	; 139
    1ff2:	1f 4f       	sbci	r17, 0xFF	; 255
    1ff4:	bc 01       	movw	r22, r24
    1ff6:	cd 01       	movw	r24, r26
    1ff8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1ffc:	dc 01       	movw	r26, r24
    1ffe:	cb 01       	movw	r24, r22
    2000:	f8 01       	movw	r30, r16
    2002:	91 83       	std	Z+1, r25	; 0x01
    2004:	80 83       	st	Z, r24
    2006:	1f c0       	rjmp	.+62     	; 0x2046 <LCD_disply_character+0x208>
    2008:	fe 01       	movw	r30, r28
    200a:	ed 58       	subi	r30, 0x8D	; 141
    200c:	ff 4f       	sbci	r31, 0xFF	; 255
    200e:	89 e1       	ldi	r24, 0x19	; 25
    2010:	90 e0       	ldi	r25, 0x00	; 0
    2012:	91 83       	std	Z+1, r25	; 0x01
    2014:	80 83       	st	Z, r24
    2016:	fe 01       	movw	r30, r28
    2018:	ed 58       	subi	r30, 0x8D	; 141
    201a:	ff 4f       	sbci	r31, 0xFF	; 255
    201c:	80 81       	ld	r24, Z
    201e:	91 81       	ldd	r25, Z+1	; 0x01
    2020:	01 97       	sbiw	r24, 0x01	; 1
    2022:	f1 f7       	brne	.-4      	; 0x2020 <LCD_disply_character+0x1e2>
    2024:	fe 01       	movw	r30, r28
    2026:	ed 58       	subi	r30, 0x8D	; 141
    2028:	ff 4f       	sbci	r31, 0xFF	; 255
    202a:	91 83       	std	Z+1, r25	; 0x01
    202c:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    202e:	de 01       	movw	r26, r28
    2030:	ab 58       	subi	r26, 0x8B	; 139
    2032:	bf 4f       	sbci	r27, 0xFF	; 255
    2034:	fe 01       	movw	r30, r28
    2036:	eb 58       	subi	r30, 0x8B	; 139
    2038:	ff 4f       	sbci	r31, 0xFF	; 255
    203a:	80 81       	ld	r24, Z
    203c:	91 81       	ldd	r25, Z+1	; 0x01
    203e:	01 97       	sbiw	r24, 0x01	; 1
    2040:	11 96       	adiw	r26, 0x01	; 1
    2042:	9c 93       	st	X, r25
    2044:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2046:	fe 01       	movw	r30, r28
    2048:	eb 58       	subi	r30, 0x8B	; 139
    204a:	ff 4f       	sbci	r31, 0xFF	; 255
    204c:	80 81       	ld	r24, Z
    204e:	91 81       	ldd	r25, Z+1	; 0x01
    2050:	00 97       	sbiw	r24, 0x00	; 0
    2052:	d1 f6       	brne	.-76     	; 0x2008 <LCD_disply_character+0x1ca>
    2054:	27 c0       	rjmp	.+78     	; 0x20a4 <LCD_disply_character+0x266>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2056:	8e 01       	movw	r16, r28
    2058:	0b 58       	subi	r16, 0x8B	; 139
    205a:	1f 4f       	sbci	r17, 0xFF	; 255
    205c:	fe 01       	movw	r30, r28
    205e:	e9 58       	subi	r30, 0x89	; 137
    2060:	ff 4f       	sbci	r31, 0xFF	; 255
    2062:	60 81       	ld	r22, Z
    2064:	71 81       	ldd	r23, Z+1	; 0x01
    2066:	82 81       	ldd	r24, Z+2	; 0x02
    2068:	93 81       	ldd	r25, Z+3	; 0x03
    206a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    206e:	dc 01       	movw	r26, r24
    2070:	cb 01       	movw	r24, r22
    2072:	f8 01       	movw	r30, r16
    2074:	91 83       	std	Z+1, r25	; 0x01
    2076:	80 83       	st	Z, r24
    2078:	de 01       	movw	r26, r28
    207a:	af 58       	subi	r26, 0x8F	; 143
    207c:	bf 4f       	sbci	r27, 0xFF	; 255
    207e:	fe 01       	movw	r30, r28
    2080:	eb 58       	subi	r30, 0x8B	; 139
    2082:	ff 4f       	sbci	r31, 0xFF	; 255
    2084:	80 81       	ld	r24, Z
    2086:	91 81       	ldd	r25, Z+1	; 0x01
    2088:	8d 93       	st	X+, r24
    208a:	9c 93       	st	X, r25
    208c:	fe 01       	movw	r30, r28
    208e:	ef 58       	subi	r30, 0x8F	; 143
    2090:	ff 4f       	sbci	r31, 0xFF	; 255
    2092:	80 81       	ld	r24, Z
    2094:	91 81       	ldd	r25, Z+1	; 0x01
    2096:	01 97       	sbiw	r24, 0x01	; 1
    2098:	f1 f7       	brne	.-4      	; 0x2096 <LCD_disply_character+0x258>
    209a:	fe 01       	movw	r30, r28
    209c:	ef 58       	subi	r30, 0x8F	; 143
    209e:	ff 4f       	sbci	r31, 0xFF	; 255
    20a0:	91 83       	std	Z+1, r25	; 0x01
    20a2:	80 83       	st	Z, r24
	_delay_ms(1); /* delay for processing Tas = 50ns */
	SET_BIT(LCD_CTRL_PORT,E); /* Enable LCD E=1 */
    20a4:	a8 e3       	ldi	r26, 0x38	; 56
    20a6:	b0 e0       	ldi	r27, 0x00	; 0
    20a8:	e8 e3       	ldi	r30, 0x38	; 56
    20aa:	f0 e0       	ldi	r31, 0x00	; 0
    20ac:	80 81       	ld	r24, Z
    20ae:	80 64       	ori	r24, 0x40	; 64
    20b0:	8c 93       	st	X, r24
    20b2:	fe 01       	movw	r30, r28
    20b4:	e3 59       	subi	r30, 0x93	; 147
    20b6:	ff 4f       	sbci	r31, 0xFF	; 255
    20b8:	80 e0       	ldi	r24, 0x00	; 0
    20ba:	90 e0       	ldi	r25, 0x00	; 0
    20bc:	a0 e8       	ldi	r26, 0x80	; 128
    20be:	bf e3       	ldi	r27, 0x3F	; 63
    20c0:	80 83       	st	Z, r24
    20c2:	91 83       	std	Z+1, r25	; 0x01
    20c4:	a2 83       	std	Z+2, r26	; 0x02
    20c6:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    20c8:	8e 01       	movw	r16, r28
    20ca:	07 59       	subi	r16, 0x97	; 151
    20cc:	1f 4f       	sbci	r17, 0xFF	; 255
    20ce:	fe 01       	movw	r30, r28
    20d0:	e3 59       	subi	r30, 0x93	; 147
    20d2:	ff 4f       	sbci	r31, 0xFF	; 255
    20d4:	60 81       	ld	r22, Z
    20d6:	71 81       	ldd	r23, Z+1	; 0x01
    20d8:	82 81       	ldd	r24, Z+2	; 0x02
    20da:	93 81       	ldd	r25, Z+3	; 0x03
    20dc:	20 e0       	ldi	r18, 0x00	; 0
    20de:	30 e0       	ldi	r19, 0x00	; 0
    20e0:	4a e7       	ldi	r20, 0x7A	; 122
    20e2:	53 e4       	ldi	r21, 0x43	; 67
    20e4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    20e8:	dc 01       	movw	r26, r24
    20ea:	cb 01       	movw	r24, r22
    20ec:	f8 01       	movw	r30, r16
    20ee:	80 83       	st	Z, r24
    20f0:	91 83       	std	Z+1, r25	; 0x01
    20f2:	a2 83       	std	Z+2, r26	; 0x02
    20f4:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    20f6:	fe 01       	movw	r30, r28
    20f8:	e7 59       	subi	r30, 0x97	; 151
    20fa:	ff 4f       	sbci	r31, 0xFF	; 255
    20fc:	60 81       	ld	r22, Z
    20fe:	71 81       	ldd	r23, Z+1	; 0x01
    2100:	82 81       	ldd	r24, Z+2	; 0x02
    2102:	93 81       	ldd	r25, Z+3	; 0x03
    2104:	20 e0       	ldi	r18, 0x00	; 0
    2106:	30 e0       	ldi	r19, 0x00	; 0
    2108:	40 e8       	ldi	r20, 0x80	; 128
    210a:	5f e3       	ldi	r21, 0x3F	; 63
    210c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2110:	88 23       	and	r24, r24
    2112:	44 f4       	brge	.+16     	; 0x2124 <LCD_disply_character+0x2e6>
		__ticks = 1;
    2114:	fe 01       	movw	r30, r28
    2116:	e9 59       	subi	r30, 0x99	; 153
    2118:	ff 4f       	sbci	r31, 0xFF	; 255
    211a:	81 e0       	ldi	r24, 0x01	; 1
    211c:	90 e0       	ldi	r25, 0x00	; 0
    211e:	91 83       	std	Z+1, r25	; 0x01
    2120:	80 83       	st	Z, r24
    2122:	64 c0       	rjmp	.+200    	; 0x21ec <LCD_disply_character+0x3ae>
	else if (__tmp > 65535)
    2124:	fe 01       	movw	r30, r28
    2126:	e7 59       	subi	r30, 0x97	; 151
    2128:	ff 4f       	sbci	r31, 0xFF	; 255
    212a:	60 81       	ld	r22, Z
    212c:	71 81       	ldd	r23, Z+1	; 0x01
    212e:	82 81       	ldd	r24, Z+2	; 0x02
    2130:	93 81       	ldd	r25, Z+3	; 0x03
    2132:	20 e0       	ldi	r18, 0x00	; 0
    2134:	3f ef       	ldi	r19, 0xFF	; 255
    2136:	4f e7       	ldi	r20, 0x7F	; 127
    2138:	57 e4       	ldi	r21, 0x47	; 71
    213a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    213e:	18 16       	cp	r1, r24
    2140:	0c f0       	brlt	.+2      	; 0x2144 <LCD_disply_character+0x306>
    2142:	43 c0       	rjmp	.+134    	; 0x21ca <LCD_disply_character+0x38c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2144:	fe 01       	movw	r30, r28
    2146:	e3 59       	subi	r30, 0x93	; 147
    2148:	ff 4f       	sbci	r31, 0xFF	; 255
    214a:	60 81       	ld	r22, Z
    214c:	71 81       	ldd	r23, Z+1	; 0x01
    214e:	82 81       	ldd	r24, Z+2	; 0x02
    2150:	93 81       	ldd	r25, Z+3	; 0x03
    2152:	20 e0       	ldi	r18, 0x00	; 0
    2154:	30 e0       	ldi	r19, 0x00	; 0
    2156:	40 e2       	ldi	r20, 0x20	; 32
    2158:	51 e4       	ldi	r21, 0x41	; 65
    215a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    215e:	dc 01       	movw	r26, r24
    2160:	cb 01       	movw	r24, r22
    2162:	8e 01       	movw	r16, r28
    2164:	09 59       	subi	r16, 0x99	; 153
    2166:	1f 4f       	sbci	r17, 0xFF	; 255
    2168:	bc 01       	movw	r22, r24
    216a:	cd 01       	movw	r24, r26
    216c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2170:	dc 01       	movw	r26, r24
    2172:	cb 01       	movw	r24, r22
    2174:	f8 01       	movw	r30, r16
    2176:	91 83       	std	Z+1, r25	; 0x01
    2178:	80 83       	st	Z, r24
    217a:	1f c0       	rjmp	.+62     	; 0x21ba <LCD_disply_character+0x37c>
    217c:	fe 01       	movw	r30, r28
    217e:	eb 59       	subi	r30, 0x9B	; 155
    2180:	ff 4f       	sbci	r31, 0xFF	; 255
    2182:	89 e1       	ldi	r24, 0x19	; 25
    2184:	90 e0       	ldi	r25, 0x00	; 0
    2186:	91 83       	std	Z+1, r25	; 0x01
    2188:	80 83       	st	Z, r24
    218a:	fe 01       	movw	r30, r28
    218c:	eb 59       	subi	r30, 0x9B	; 155
    218e:	ff 4f       	sbci	r31, 0xFF	; 255
    2190:	80 81       	ld	r24, Z
    2192:	91 81       	ldd	r25, Z+1	; 0x01
    2194:	01 97       	sbiw	r24, 0x01	; 1
    2196:	f1 f7       	brne	.-4      	; 0x2194 <LCD_disply_character+0x356>
    2198:	fe 01       	movw	r30, r28
    219a:	eb 59       	subi	r30, 0x9B	; 155
    219c:	ff 4f       	sbci	r31, 0xFF	; 255
    219e:	91 83       	std	Z+1, r25	; 0x01
    21a0:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    21a2:	de 01       	movw	r26, r28
    21a4:	a9 59       	subi	r26, 0x99	; 153
    21a6:	bf 4f       	sbci	r27, 0xFF	; 255
    21a8:	fe 01       	movw	r30, r28
    21aa:	e9 59       	subi	r30, 0x99	; 153
    21ac:	ff 4f       	sbci	r31, 0xFF	; 255
    21ae:	80 81       	ld	r24, Z
    21b0:	91 81       	ldd	r25, Z+1	; 0x01
    21b2:	01 97       	sbiw	r24, 0x01	; 1
    21b4:	11 96       	adiw	r26, 0x01	; 1
    21b6:	9c 93       	st	X, r25
    21b8:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    21ba:	fe 01       	movw	r30, r28
    21bc:	e9 59       	subi	r30, 0x99	; 153
    21be:	ff 4f       	sbci	r31, 0xFF	; 255
    21c0:	80 81       	ld	r24, Z
    21c2:	91 81       	ldd	r25, Z+1	; 0x01
    21c4:	00 97       	sbiw	r24, 0x00	; 0
    21c6:	d1 f6       	brne	.-76     	; 0x217c <LCD_disply_character+0x33e>
    21c8:	28 c0       	rjmp	.+80     	; 0x221a <LCD_disply_character+0x3dc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    21ca:	8e 01       	movw	r16, r28
    21cc:	09 59       	subi	r16, 0x99	; 153
    21ce:	1f 4f       	sbci	r17, 0xFF	; 255
    21d0:	fe 01       	movw	r30, r28
    21d2:	e7 59       	subi	r30, 0x97	; 151
    21d4:	ff 4f       	sbci	r31, 0xFF	; 255
    21d6:	60 81       	ld	r22, Z
    21d8:	71 81       	ldd	r23, Z+1	; 0x01
    21da:	82 81       	ldd	r24, Z+2	; 0x02
    21dc:	93 81       	ldd	r25, Z+3	; 0x03
    21de:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    21e2:	dc 01       	movw	r26, r24
    21e4:	cb 01       	movw	r24, r22
    21e6:	f8 01       	movw	r30, r16
    21e8:	91 83       	std	Z+1, r25	; 0x01
    21ea:	80 83       	st	Z, r24
    21ec:	de 01       	movw	r26, r28
    21ee:	ad 59       	subi	r26, 0x9D	; 157
    21f0:	bf 4f       	sbci	r27, 0xFF	; 255
    21f2:	fe 01       	movw	r30, r28
    21f4:	e9 59       	subi	r30, 0x99	; 153
    21f6:	ff 4f       	sbci	r31, 0xFF	; 255
    21f8:	80 81       	ld	r24, Z
    21fa:	91 81       	ldd	r25, Z+1	; 0x01
    21fc:	11 96       	adiw	r26, 0x01	; 1
    21fe:	9c 93       	st	X, r25
    2200:	8e 93       	st	-X, r24
    2202:	fe 01       	movw	r30, r28
    2204:	ed 59       	subi	r30, 0x9D	; 157
    2206:	ff 4f       	sbci	r31, 0xFF	; 255
    2208:	80 81       	ld	r24, Z
    220a:	91 81       	ldd	r25, Z+1	; 0x01
    220c:	01 97       	sbiw	r24, 0x01	; 1
    220e:	f1 f7       	brne	.-4      	; 0x220c <LCD_disply_character+0x3ce>
    2210:	fe 01       	movw	r30, r28
    2212:	ed 59       	subi	r30, 0x9D	; 157
    2214:	ff 4f       	sbci	r31, 0xFF	; 255
    2216:	91 83       	std	Z+1, r25	; 0x01
    2218:	80 83       	st	Z, r24
	_delay_ms(1); /* delay for processing Tpw - Tdws = 190ns */
	if(LCD.type ==LCD_Four_BIT_MODE)
    221a:	80 91 7c 00 	lds	r24, 0x007C
    221e:	82 30       	cpi	r24, 0x02	; 2
    2220:	09 f0       	breq	.+2      	; 0x2224 <LCD_disply_character+0x3e6>
    2222:	37 c3       	rjmp	.+1646   	; 0x2892 <LCD_disply_character+0xa54>
	{
       if(LCD.bit_mode==Upper_mode)
    2224:	80 91 7e 00 	lds	r24, 0x007E
    2228:	88 23       	and	r24, r24
    222a:	79 f4       	brne	.+30     	; 0x224a <LCD_disply_character+0x40c>
       {
    	   LCD_DATA_PORT = (LCD_DATA_PORT & 0x0F) | (data & 0xF0);
    222c:	a2 e3       	ldi	r26, 0x32	; 50
    222e:	b0 e0       	ldi	r27, 0x00	; 0
    2230:	e2 e3       	ldi	r30, 0x32	; 50
    2232:	f0 e0       	ldi	r31, 0x00	; 0
    2234:	80 81       	ld	r24, Z
    2236:	98 2f       	mov	r25, r24
    2238:	9f 70       	andi	r25, 0x0F	; 15
    223a:	fe 01       	movw	r30, r28
    223c:	e1 58       	subi	r30, 0x81	; 129
    223e:	ff 4f       	sbci	r31, 0xFF	; 255
    2240:	80 81       	ld	r24, Z
    2242:	80 7f       	andi	r24, 0xF0	; 240
    2244:	89 2b       	or	r24, r25
    2246:	8c 93       	st	X, r24
    2248:	13 c0       	rjmp	.+38     	; 0x2270 <LCD_disply_character+0x432>
       }
       else if(LCD.bit_mode==lower_mode)
    224a:	80 91 7e 00 	lds	r24, 0x007E
    224e:	81 30       	cpi	r24, 0x01	; 1
    2250:	79 f4       	brne	.+30     	; 0x2270 <LCD_disply_character+0x432>
       {
    	   LCD_DATA_PORT = (LCD_DATA_PORT & 0xF0) | ((data & 0xF0) >> 4);
    2252:	a2 e3       	ldi	r26, 0x32	; 50
    2254:	b0 e0       	ldi	r27, 0x00	; 0
    2256:	e2 e3       	ldi	r30, 0x32	; 50
    2258:	f0 e0       	ldi	r31, 0x00	; 0
    225a:	80 81       	ld	r24, Z
    225c:	98 2f       	mov	r25, r24
    225e:	90 7f       	andi	r25, 0xF0	; 240
    2260:	fe 01       	movw	r30, r28
    2262:	e1 58       	subi	r30, 0x81	; 129
    2264:	ff 4f       	sbci	r31, 0xFF	; 255
    2266:	80 81       	ld	r24, Z
    2268:	82 95       	swap	r24
    226a:	8f 70       	andi	r24, 0x0F	; 15
    226c:	89 2b       	or	r24, r25
    226e:	8c 93       	st	X, r24
    2270:	fe 01       	movw	r30, r28
    2272:	e1 5a       	subi	r30, 0xA1	; 161
    2274:	ff 4f       	sbci	r31, 0xFF	; 255
    2276:	80 e0       	ldi	r24, 0x00	; 0
    2278:	90 e0       	ldi	r25, 0x00	; 0
    227a:	a0 e8       	ldi	r26, 0x80	; 128
    227c:	bf e3       	ldi	r27, 0x3F	; 63
    227e:	80 83       	st	Z, r24
    2280:	91 83       	std	Z+1, r25	; 0x01
    2282:	a2 83       	std	Z+2, r26	; 0x02
    2284:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2286:	8e 01       	movw	r16, r28
    2288:	05 5a       	subi	r16, 0xA5	; 165
    228a:	1f 4f       	sbci	r17, 0xFF	; 255
    228c:	fe 01       	movw	r30, r28
    228e:	e1 5a       	subi	r30, 0xA1	; 161
    2290:	ff 4f       	sbci	r31, 0xFF	; 255
    2292:	60 81       	ld	r22, Z
    2294:	71 81       	ldd	r23, Z+1	; 0x01
    2296:	82 81       	ldd	r24, Z+2	; 0x02
    2298:	93 81       	ldd	r25, Z+3	; 0x03
    229a:	20 e0       	ldi	r18, 0x00	; 0
    229c:	30 e0       	ldi	r19, 0x00	; 0
    229e:	4a e7       	ldi	r20, 0x7A	; 122
    22a0:	53 e4       	ldi	r21, 0x43	; 67
    22a2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    22a6:	dc 01       	movw	r26, r24
    22a8:	cb 01       	movw	r24, r22
    22aa:	f8 01       	movw	r30, r16
    22ac:	80 83       	st	Z, r24
    22ae:	91 83       	std	Z+1, r25	; 0x01
    22b0:	a2 83       	std	Z+2, r26	; 0x02
    22b2:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    22b4:	fe 01       	movw	r30, r28
    22b6:	e5 5a       	subi	r30, 0xA5	; 165
    22b8:	ff 4f       	sbci	r31, 0xFF	; 255
    22ba:	60 81       	ld	r22, Z
    22bc:	71 81       	ldd	r23, Z+1	; 0x01
    22be:	82 81       	ldd	r24, Z+2	; 0x02
    22c0:	93 81       	ldd	r25, Z+3	; 0x03
    22c2:	20 e0       	ldi	r18, 0x00	; 0
    22c4:	30 e0       	ldi	r19, 0x00	; 0
    22c6:	40 e8       	ldi	r20, 0x80	; 128
    22c8:	5f e3       	ldi	r21, 0x3F	; 63
    22ca:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    22ce:	88 23       	and	r24, r24
    22d0:	44 f4       	brge	.+16     	; 0x22e2 <LCD_disply_character+0x4a4>
		__ticks = 1;
    22d2:	fe 01       	movw	r30, r28
    22d4:	e7 5a       	subi	r30, 0xA7	; 167
    22d6:	ff 4f       	sbci	r31, 0xFF	; 255
    22d8:	81 e0       	ldi	r24, 0x01	; 1
    22da:	90 e0       	ldi	r25, 0x00	; 0
    22dc:	91 83       	std	Z+1, r25	; 0x01
    22de:	80 83       	st	Z, r24
    22e0:	64 c0       	rjmp	.+200    	; 0x23aa <LCD_disply_character+0x56c>
	else if (__tmp > 65535)
    22e2:	fe 01       	movw	r30, r28
    22e4:	e5 5a       	subi	r30, 0xA5	; 165
    22e6:	ff 4f       	sbci	r31, 0xFF	; 255
    22e8:	60 81       	ld	r22, Z
    22ea:	71 81       	ldd	r23, Z+1	; 0x01
    22ec:	82 81       	ldd	r24, Z+2	; 0x02
    22ee:	93 81       	ldd	r25, Z+3	; 0x03
    22f0:	20 e0       	ldi	r18, 0x00	; 0
    22f2:	3f ef       	ldi	r19, 0xFF	; 255
    22f4:	4f e7       	ldi	r20, 0x7F	; 127
    22f6:	57 e4       	ldi	r21, 0x47	; 71
    22f8:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    22fc:	18 16       	cp	r1, r24
    22fe:	0c f0       	brlt	.+2      	; 0x2302 <LCD_disply_character+0x4c4>
    2300:	43 c0       	rjmp	.+134    	; 0x2388 <LCD_disply_character+0x54a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2302:	fe 01       	movw	r30, r28
    2304:	e1 5a       	subi	r30, 0xA1	; 161
    2306:	ff 4f       	sbci	r31, 0xFF	; 255
    2308:	60 81       	ld	r22, Z
    230a:	71 81       	ldd	r23, Z+1	; 0x01
    230c:	82 81       	ldd	r24, Z+2	; 0x02
    230e:	93 81       	ldd	r25, Z+3	; 0x03
    2310:	20 e0       	ldi	r18, 0x00	; 0
    2312:	30 e0       	ldi	r19, 0x00	; 0
    2314:	40 e2       	ldi	r20, 0x20	; 32
    2316:	51 e4       	ldi	r21, 0x41	; 65
    2318:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    231c:	dc 01       	movw	r26, r24
    231e:	cb 01       	movw	r24, r22
    2320:	8e 01       	movw	r16, r28
    2322:	07 5a       	subi	r16, 0xA7	; 167
    2324:	1f 4f       	sbci	r17, 0xFF	; 255
    2326:	bc 01       	movw	r22, r24
    2328:	cd 01       	movw	r24, r26
    232a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    232e:	dc 01       	movw	r26, r24
    2330:	cb 01       	movw	r24, r22
    2332:	f8 01       	movw	r30, r16
    2334:	91 83       	std	Z+1, r25	; 0x01
    2336:	80 83       	st	Z, r24
    2338:	1f c0       	rjmp	.+62     	; 0x2378 <LCD_disply_character+0x53a>
    233a:	fe 01       	movw	r30, r28
    233c:	e9 5a       	subi	r30, 0xA9	; 169
    233e:	ff 4f       	sbci	r31, 0xFF	; 255
    2340:	89 e1       	ldi	r24, 0x19	; 25
    2342:	90 e0       	ldi	r25, 0x00	; 0
    2344:	91 83       	std	Z+1, r25	; 0x01
    2346:	80 83       	st	Z, r24
    2348:	fe 01       	movw	r30, r28
    234a:	e9 5a       	subi	r30, 0xA9	; 169
    234c:	ff 4f       	sbci	r31, 0xFF	; 255
    234e:	80 81       	ld	r24, Z
    2350:	91 81       	ldd	r25, Z+1	; 0x01
    2352:	01 97       	sbiw	r24, 0x01	; 1
    2354:	f1 f7       	brne	.-4      	; 0x2352 <LCD_disply_character+0x514>
    2356:	fe 01       	movw	r30, r28
    2358:	e9 5a       	subi	r30, 0xA9	; 169
    235a:	ff 4f       	sbci	r31, 0xFF	; 255
    235c:	91 83       	std	Z+1, r25	; 0x01
    235e:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2360:	de 01       	movw	r26, r28
    2362:	a7 5a       	subi	r26, 0xA7	; 167
    2364:	bf 4f       	sbci	r27, 0xFF	; 255
    2366:	fe 01       	movw	r30, r28
    2368:	e7 5a       	subi	r30, 0xA7	; 167
    236a:	ff 4f       	sbci	r31, 0xFF	; 255
    236c:	80 81       	ld	r24, Z
    236e:	91 81       	ldd	r25, Z+1	; 0x01
    2370:	01 97       	sbiw	r24, 0x01	; 1
    2372:	11 96       	adiw	r26, 0x01	; 1
    2374:	9c 93       	st	X, r25
    2376:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2378:	fe 01       	movw	r30, r28
    237a:	e7 5a       	subi	r30, 0xA7	; 167
    237c:	ff 4f       	sbci	r31, 0xFF	; 255
    237e:	80 81       	ld	r24, Z
    2380:	91 81       	ldd	r25, Z+1	; 0x01
    2382:	00 97       	sbiw	r24, 0x00	; 0
    2384:	d1 f6       	brne	.-76     	; 0x233a <LCD_disply_character+0x4fc>
    2386:	27 c0       	rjmp	.+78     	; 0x23d6 <LCD_disply_character+0x598>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2388:	8e 01       	movw	r16, r28
    238a:	07 5a       	subi	r16, 0xA7	; 167
    238c:	1f 4f       	sbci	r17, 0xFF	; 255
    238e:	fe 01       	movw	r30, r28
    2390:	e5 5a       	subi	r30, 0xA5	; 165
    2392:	ff 4f       	sbci	r31, 0xFF	; 255
    2394:	60 81       	ld	r22, Z
    2396:	71 81       	ldd	r23, Z+1	; 0x01
    2398:	82 81       	ldd	r24, Z+2	; 0x02
    239a:	93 81       	ldd	r25, Z+3	; 0x03
    239c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    23a0:	dc 01       	movw	r26, r24
    23a2:	cb 01       	movw	r24, r22
    23a4:	f8 01       	movw	r30, r16
    23a6:	91 83       	std	Z+1, r25	; 0x01
    23a8:	80 83       	st	Z, r24
    23aa:	de 01       	movw	r26, r28
    23ac:	ab 5a       	subi	r26, 0xAB	; 171
    23ae:	bf 4f       	sbci	r27, 0xFF	; 255
    23b0:	fe 01       	movw	r30, r28
    23b2:	e7 5a       	subi	r30, 0xA7	; 167
    23b4:	ff 4f       	sbci	r31, 0xFF	; 255
    23b6:	80 81       	ld	r24, Z
    23b8:	91 81       	ldd	r25, Z+1	; 0x01
    23ba:	8d 93       	st	X+, r24
    23bc:	9c 93       	st	X, r25
    23be:	fe 01       	movw	r30, r28
    23c0:	eb 5a       	subi	r30, 0xAB	; 171
    23c2:	ff 4f       	sbci	r31, 0xFF	; 255
    23c4:	80 81       	ld	r24, Z
    23c6:	91 81       	ldd	r25, Z+1	; 0x01
    23c8:	01 97       	sbiw	r24, 0x01	; 1
    23ca:	f1 f7       	brne	.-4      	; 0x23c8 <LCD_disply_character+0x58a>
    23cc:	fe 01       	movw	r30, r28
    23ce:	eb 5a       	subi	r30, 0xAB	; 171
    23d0:	ff 4f       	sbci	r31, 0xFF	; 255
    23d2:	91 83       	std	Z+1, r25	; 0x01
    23d4:	80 83       	st	Z, r24
       }
	   _delay_ms(1); /* delay for processing Tdsw = 100ns */
	   CLEAR_BIT(LCD_CTRL_PORT,E); /* disable LCD E=0 */
    23d6:	a8 e3       	ldi	r26, 0x38	; 56
    23d8:	b0 e0       	ldi	r27, 0x00	; 0
    23da:	e8 e3       	ldi	r30, 0x38	; 56
    23dc:	f0 e0       	ldi	r31, 0x00	; 0
    23de:	80 81       	ld	r24, Z
    23e0:	8f 7b       	andi	r24, 0xBF	; 191
    23e2:	8c 93       	st	X, r24
    23e4:	fe 01       	movw	r30, r28
    23e6:	ef 5a       	subi	r30, 0xAF	; 175
    23e8:	ff 4f       	sbci	r31, 0xFF	; 255
    23ea:	80 e0       	ldi	r24, 0x00	; 0
    23ec:	90 e0       	ldi	r25, 0x00	; 0
    23ee:	a0 e8       	ldi	r26, 0x80	; 128
    23f0:	bf e3       	ldi	r27, 0x3F	; 63
    23f2:	80 83       	st	Z, r24
    23f4:	91 83       	std	Z+1, r25	; 0x01
    23f6:	a2 83       	std	Z+2, r26	; 0x02
    23f8:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    23fa:	8e 01       	movw	r16, r28
    23fc:	03 5b       	subi	r16, 0xB3	; 179
    23fe:	1f 4f       	sbci	r17, 0xFF	; 255
    2400:	fe 01       	movw	r30, r28
    2402:	ef 5a       	subi	r30, 0xAF	; 175
    2404:	ff 4f       	sbci	r31, 0xFF	; 255
    2406:	60 81       	ld	r22, Z
    2408:	71 81       	ldd	r23, Z+1	; 0x01
    240a:	82 81       	ldd	r24, Z+2	; 0x02
    240c:	93 81       	ldd	r25, Z+3	; 0x03
    240e:	20 e0       	ldi	r18, 0x00	; 0
    2410:	30 e0       	ldi	r19, 0x00	; 0
    2412:	4a e7       	ldi	r20, 0x7A	; 122
    2414:	53 e4       	ldi	r21, 0x43	; 67
    2416:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    241a:	dc 01       	movw	r26, r24
    241c:	cb 01       	movw	r24, r22
    241e:	f8 01       	movw	r30, r16
    2420:	80 83       	st	Z, r24
    2422:	91 83       	std	Z+1, r25	; 0x01
    2424:	a2 83       	std	Z+2, r26	; 0x02
    2426:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2428:	fe 01       	movw	r30, r28
    242a:	e3 5b       	subi	r30, 0xB3	; 179
    242c:	ff 4f       	sbci	r31, 0xFF	; 255
    242e:	60 81       	ld	r22, Z
    2430:	71 81       	ldd	r23, Z+1	; 0x01
    2432:	82 81       	ldd	r24, Z+2	; 0x02
    2434:	93 81       	ldd	r25, Z+3	; 0x03
    2436:	20 e0       	ldi	r18, 0x00	; 0
    2438:	30 e0       	ldi	r19, 0x00	; 0
    243a:	40 e8       	ldi	r20, 0x80	; 128
    243c:	5f e3       	ldi	r21, 0x3F	; 63
    243e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2442:	88 23       	and	r24, r24
    2444:	44 f4       	brge	.+16     	; 0x2456 <LCD_disply_character+0x618>
		__ticks = 1;
    2446:	fe 01       	movw	r30, r28
    2448:	e5 5b       	subi	r30, 0xB5	; 181
    244a:	ff 4f       	sbci	r31, 0xFF	; 255
    244c:	81 e0       	ldi	r24, 0x01	; 1
    244e:	90 e0       	ldi	r25, 0x00	; 0
    2450:	91 83       	std	Z+1, r25	; 0x01
    2452:	80 83       	st	Z, r24
    2454:	64 c0       	rjmp	.+200    	; 0x251e <LCD_disply_character+0x6e0>
	else if (__tmp > 65535)
    2456:	fe 01       	movw	r30, r28
    2458:	e3 5b       	subi	r30, 0xB3	; 179
    245a:	ff 4f       	sbci	r31, 0xFF	; 255
    245c:	60 81       	ld	r22, Z
    245e:	71 81       	ldd	r23, Z+1	; 0x01
    2460:	82 81       	ldd	r24, Z+2	; 0x02
    2462:	93 81       	ldd	r25, Z+3	; 0x03
    2464:	20 e0       	ldi	r18, 0x00	; 0
    2466:	3f ef       	ldi	r19, 0xFF	; 255
    2468:	4f e7       	ldi	r20, 0x7F	; 127
    246a:	57 e4       	ldi	r21, 0x47	; 71
    246c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2470:	18 16       	cp	r1, r24
    2472:	0c f0       	brlt	.+2      	; 0x2476 <LCD_disply_character+0x638>
    2474:	43 c0       	rjmp	.+134    	; 0x24fc <LCD_disply_character+0x6be>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2476:	fe 01       	movw	r30, r28
    2478:	ef 5a       	subi	r30, 0xAF	; 175
    247a:	ff 4f       	sbci	r31, 0xFF	; 255
    247c:	60 81       	ld	r22, Z
    247e:	71 81       	ldd	r23, Z+1	; 0x01
    2480:	82 81       	ldd	r24, Z+2	; 0x02
    2482:	93 81       	ldd	r25, Z+3	; 0x03
    2484:	20 e0       	ldi	r18, 0x00	; 0
    2486:	30 e0       	ldi	r19, 0x00	; 0
    2488:	40 e2       	ldi	r20, 0x20	; 32
    248a:	51 e4       	ldi	r21, 0x41	; 65
    248c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2490:	dc 01       	movw	r26, r24
    2492:	cb 01       	movw	r24, r22
    2494:	8e 01       	movw	r16, r28
    2496:	05 5b       	subi	r16, 0xB5	; 181
    2498:	1f 4f       	sbci	r17, 0xFF	; 255
    249a:	bc 01       	movw	r22, r24
    249c:	cd 01       	movw	r24, r26
    249e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    24a2:	dc 01       	movw	r26, r24
    24a4:	cb 01       	movw	r24, r22
    24a6:	f8 01       	movw	r30, r16
    24a8:	91 83       	std	Z+1, r25	; 0x01
    24aa:	80 83       	st	Z, r24
    24ac:	1f c0       	rjmp	.+62     	; 0x24ec <LCD_disply_character+0x6ae>
    24ae:	fe 01       	movw	r30, r28
    24b0:	e7 5b       	subi	r30, 0xB7	; 183
    24b2:	ff 4f       	sbci	r31, 0xFF	; 255
    24b4:	89 e1       	ldi	r24, 0x19	; 25
    24b6:	90 e0       	ldi	r25, 0x00	; 0
    24b8:	91 83       	std	Z+1, r25	; 0x01
    24ba:	80 83       	st	Z, r24
    24bc:	fe 01       	movw	r30, r28
    24be:	e7 5b       	subi	r30, 0xB7	; 183
    24c0:	ff 4f       	sbci	r31, 0xFF	; 255
    24c2:	80 81       	ld	r24, Z
    24c4:	91 81       	ldd	r25, Z+1	; 0x01
    24c6:	01 97       	sbiw	r24, 0x01	; 1
    24c8:	f1 f7       	brne	.-4      	; 0x24c6 <LCD_disply_character+0x688>
    24ca:	fe 01       	movw	r30, r28
    24cc:	e7 5b       	subi	r30, 0xB7	; 183
    24ce:	ff 4f       	sbci	r31, 0xFF	; 255
    24d0:	91 83       	std	Z+1, r25	; 0x01
    24d2:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    24d4:	de 01       	movw	r26, r28
    24d6:	a5 5b       	subi	r26, 0xB5	; 181
    24d8:	bf 4f       	sbci	r27, 0xFF	; 255
    24da:	fe 01       	movw	r30, r28
    24dc:	e5 5b       	subi	r30, 0xB5	; 181
    24de:	ff 4f       	sbci	r31, 0xFF	; 255
    24e0:	80 81       	ld	r24, Z
    24e2:	91 81       	ldd	r25, Z+1	; 0x01
    24e4:	01 97       	sbiw	r24, 0x01	; 1
    24e6:	11 96       	adiw	r26, 0x01	; 1
    24e8:	9c 93       	st	X, r25
    24ea:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    24ec:	fe 01       	movw	r30, r28
    24ee:	e5 5b       	subi	r30, 0xB5	; 181
    24f0:	ff 4f       	sbci	r31, 0xFF	; 255
    24f2:	80 81       	ld	r24, Z
    24f4:	91 81       	ldd	r25, Z+1	; 0x01
    24f6:	00 97       	sbiw	r24, 0x00	; 0
    24f8:	d1 f6       	brne	.-76     	; 0x24ae <LCD_disply_character+0x670>
    24fa:	27 c0       	rjmp	.+78     	; 0x254a <LCD_disply_character+0x70c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    24fc:	8e 01       	movw	r16, r28
    24fe:	05 5b       	subi	r16, 0xB5	; 181
    2500:	1f 4f       	sbci	r17, 0xFF	; 255
    2502:	fe 01       	movw	r30, r28
    2504:	e3 5b       	subi	r30, 0xB3	; 179
    2506:	ff 4f       	sbci	r31, 0xFF	; 255
    2508:	60 81       	ld	r22, Z
    250a:	71 81       	ldd	r23, Z+1	; 0x01
    250c:	82 81       	ldd	r24, Z+2	; 0x02
    250e:	93 81       	ldd	r25, Z+3	; 0x03
    2510:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2514:	dc 01       	movw	r26, r24
    2516:	cb 01       	movw	r24, r22
    2518:	f8 01       	movw	r30, r16
    251a:	91 83       	std	Z+1, r25	; 0x01
    251c:	80 83       	st	Z, r24
    251e:	de 01       	movw	r26, r28
    2520:	a9 5b       	subi	r26, 0xB9	; 185
    2522:	bf 4f       	sbci	r27, 0xFF	; 255
    2524:	fe 01       	movw	r30, r28
    2526:	e5 5b       	subi	r30, 0xB5	; 181
    2528:	ff 4f       	sbci	r31, 0xFF	; 255
    252a:	80 81       	ld	r24, Z
    252c:	91 81       	ldd	r25, Z+1	; 0x01
    252e:	8d 93       	st	X+, r24
    2530:	9c 93       	st	X, r25
    2532:	fe 01       	movw	r30, r28
    2534:	e9 5b       	subi	r30, 0xB9	; 185
    2536:	ff 4f       	sbci	r31, 0xFF	; 255
    2538:	80 81       	ld	r24, Z
    253a:	91 81       	ldd	r25, Z+1	; 0x01
    253c:	01 97       	sbiw	r24, 0x01	; 1
    253e:	f1 f7       	brne	.-4      	; 0x253c <LCD_disply_character+0x6fe>
    2540:	fe 01       	movw	r30, r28
    2542:	e9 5b       	subi	r30, 0xB9	; 185
    2544:	ff 4f       	sbci	r31, 0xFF	; 255
    2546:	91 83       	std	Z+1, r25	; 0x01
    2548:	80 83       	st	Z, r24
	   _delay_ms(1); /* delay for processing Th = 13ns */
	   SET_BIT(LCD_CTRL_PORT,E); /* Enable LCD E=1 */
    254a:	a8 e3       	ldi	r26, 0x38	; 56
    254c:	b0 e0       	ldi	r27, 0x00	; 0
    254e:	e8 e3       	ldi	r30, 0x38	; 56
    2550:	f0 e0       	ldi	r31, 0x00	; 0
    2552:	80 81       	ld	r24, Z
    2554:	80 64       	ori	r24, 0x40	; 64
    2556:	8c 93       	st	X, r24
    2558:	fe 01       	movw	r30, r28
    255a:	ed 5b       	subi	r30, 0xBD	; 189
    255c:	ff 4f       	sbci	r31, 0xFF	; 255
    255e:	80 e0       	ldi	r24, 0x00	; 0
    2560:	90 e0       	ldi	r25, 0x00	; 0
    2562:	a0 e8       	ldi	r26, 0x80	; 128
    2564:	bf e3       	ldi	r27, 0x3F	; 63
    2566:	80 83       	st	Z, r24
    2568:	91 83       	std	Z+1, r25	; 0x01
    256a:	a2 83       	std	Z+2, r26	; 0x02
    256c:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    256e:	8e 01       	movw	r16, r28
    2570:	01 5c       	subi	r16, 0xC1	; 193
    2572:	1f 4f       	sbci	r17, 0xFF	; 255
    2574:	fe 01       	movw	r30, r28
    2576:	ed 5b       	subi	r30, 0xBD	; 189
    2578:	ff 4f       	sbci	r31, 0xFF	; 255
    257a:	60 81       	ld	r22, Z
    257c:	71 81       	ldd	r23, Z+1	; 0x01
    257e:	82 81       	ldd	r24, Z+2	; 0x02
    2580:	93 81       	ldd	r25, Z+3	; 0x03
    2582:	20 e0       	ldi	r18, 0x00	; 0
    2584:	30 e0       	ldi	r19, 0x00	; 0
    2586:	4a e7       	ldi	r20, 0x7A	; 122
    2588:	53 e4       	ldi	r21, 0x43	; 67
    258a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    258e:	dc 01       	movw	r26, r24
    2590:	cb 01       	movw	r24, r22
    2592:	f8 01       	movw	r30, r16
    2594:	80 83       	st	Z, r24
    2596:	91 83       	std	Z+1, r25	; 0x01
    2598:	a2 83       	std	Z+2, r26	; 0x02
    259a:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    259c:	fe 01       	movw	r30, r28
    259e:	ff 96       	adiw	r30, 0x3f	; 63
    25a0:	60 81       	ld	r22, Z
    25a2:	71 81       	ldd	r23, Z+1	; 0x01
    25a4:	82 81       	ldd	r24, Z+2	; 0x02
    25a6:	93 81       	ldd	r25, Z+3	; 0x03
    25a8:	20 e0       	ldi	r18, 0x00	; 0
    25aa:	30 e0       	ldi	r19, 0x00	; 0
    25ac:	40 e8       	ldi	r20, 0x80	; 128
    25ae:	5f e3       	ldi	r21, 0x3F	; 63
    25b0:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    25b4:	88 23       	and	r24, r24
    25b6:	2c f4       	brge	.+10     	; 0x25c2 <LCD_disply_character+0x784>
		__ticks = 1;
    25b8:	81 e0       	ldi	r24, 0x01	; 1
    25ba:	90 e0       	ldi	r25, 0x00	; 0
    25bc:	9e af       	std	Y+62, r25	; 0x3e
    25be:	8d af       	std	Y+61, r24	; 0x3d
    25c0:	46 c0       	rjmp	.+140    	; 0x264e <LCD_disply_character+0x810>
	else if (__tmp > 65535)
    25c2:	fe 01       	movw	r30, r28
    25c4:	ff 96       	adiw	r30, 0x3f	; 63
    25c6:	60 81       	ld	r22, Z
    25c8:	71 81       	ldd	r23, Z+1	; 0x01
    25ca:	82 81       	ldd	r24, Z+2	; 0x02
    25cc:	93 81       	ldd	r25, Z+3	; 0x03
    25ce:	20 e0       	ldi	r18, 0x00	; 0
    25d0:	3f ef       	ldi	r19, 0xFF	; 255
    25d2:	4f e7       	ldi	r20, 0x7F	; 127
    25d4:	57 e4       	ldi	r21, 0x47	; 71
    25d6:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    25da:	18 16       	cp	r1, r24
    25dc:	64 f5       	brge	.+88     	; 0x2636 <LCD_disply_character+0x7f8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    25de:	fe 01       	movw	r30, r28
    25e0:	ed 5b       	subi	r30, 0xBD	; 189
    25e2:	ff 4f       	sbci	r31, 0xFF	; 255
    25e4:	60 81       	ld	r22, Z
    25e6:	71 81       	ldd	r23, Z+1	; 0x01
    25e8:	82 81       	ldd	r24, Z+2	; 0x02
    25ea:	93 81       	ldd	r25, Z+3	; 0x03
    25ec:	20 e0       	ldi	r18, 0x00	; 0
    25ee:	30 e0       	ldi	r19, 0x00	; 0
    25f0:	40 e2       	ldi	r20, 0x20	; 32
    25f2:	51 e4       	ldi	r21, 0x41	; 65
    25f4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    25f8:	dc 01       	movw	r26, r24
    25fa:	cb 01       	movw	r24, r22
    25fc:	bc 01       	movw	r22, r24
    25fe:	cd 01       	movw	r24, r26
    2600:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2604:	dc 01       	movw	r26, r24
    2606:	cb 01       	movw	r24, r22
    2608:	9e af       	std	Y+62, r25	; 0x3e
    260a:	8d af       	std	Y+61, r24	; 0x3d
    260c:	0f c0       	rjmp	.+30     	; 0x262c <LCD_disply_character+0x7ee>
    260e:	89 e1       	ldi	r24, 0x19	; 25
    2610:	90 e0       	ldi	r25, 0x00	; 0
    2612:	9c af       	std	Y+60, r25	; 0x3c
    2614:	8b af       	std	Y+59, r24	; 0x3b
    2616:	8b ad       	ldd	r24, Y+59	; 0x3b
    2618:	9c ad       	ldd	r25, Y+60	; 0x3c
    261a:	01 97       	sbiw	r24, 0x01	; 1
    261c:	f1 f7       	brne	.-4      	; 0x261a <LCD_disply_character+0x7dc>
    261e:	9c af       	std	Y+60, r25	; 0x3c
    2620:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2622:	8d ad       	ldd	r24, Y+61	; 0x3d
    2624:	9e ad       	ldd	r25, Y+62	; 0x3e
    2626:	01 97       	sbiw	r24, 0x01	; 1
    2628:	9e af       	std	Y+62, r25	; 0x3e
    262a:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    262c:	8d ad       	ldd	r24, Y+61	; 0x3d
    262e:	9e ad       	ldd	r25, Y+62	; 0x3e
    2630:	00 97       	sbiw	r24, 0x00	; 0
    2632:	69 f7       	brne	.-38     	; 0x260e <LCD_disply_character+0x7d0>
    2634:	16 c0       	rjmp	.+44     	; 0x2662 <LCD_disply_character+0x824>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2636:	fe 01       	movw	r30, r28
    2638:	ff 96       	adiw	r30, 0x3f	; 63
    263a:	60 81       	ld	r22, Z
    263c:	71 81       	ldd	r23, Z+1	; 0x01
    263e:	82 81       	ldd	r24, Z+2	; 0x02
    2640:	93 81       	ldd	r25, Z+3	; 0x03
    2642:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2646:	dc 01       	movw	r26, r24
    2648:	cb 01       	movw	r24, r22
    264a:	9e af       	std	Y+62, r25	; 0x3e
    264c:	8d af       	std	Y+61, r24	; 0x3d
    264e:	8d ad       	ldd	r24, Y+61	; 0x3d
    2650:	9e ad       	ldd	r25, Y+62	; 0x3e
    2652:	9a af       	std	Y+58, r25	; 0x3a
    2654:	89 af       	std	Y+57, r24	; 0x39
    2656:	89 ad       	ldd	r24, Y+57	; 0x39
    2658:	9a ad       	ldd	r25, Y+58	; 0x3a
    265a:	01 97       	sbiw	r24, 0x01	; 1
    265c:	f1 f7       	brne	.-4      	; 0x265a <LCD_disply_character+0x81c>
    265e:	9a af       	std	Y+58, r25	; 0x3a
    2660:	89 af       	std	Y+57, r24	; 0x39
	   _delay_ms(1); /* delay for processing Tpw - Tdws = 190ns */

	   /* out the lowest 4 bits of the required data to the data bus D4 --> D7 */
	   if(LCD.bit_mode==Upper_mode)
    2662:	80 91 7e 00 	lds	r24, 0x007E
    2666:	88 23       	and	r24, r24
    2668:	b1 f4       	brne	.+44     	; 0x2696 <LCD_disply_character+0x858>
	   {
		   LCD_DATA_PORT = (LCD_DATA_PORT & 0x0F) | ((data & 0x0F) << 4);
    266a:	a2 e3       	ldi	r26, 0x32	; 50
    266c:	b0 e0       	ldi	r27, 0x00	; 0
    266e:	e2 e3       	ldi	r30, 0x32	; 50
    2670:	f0 e0       	ldi	r31, 0x00	; 0
    2672:	80 81       	ld	r24, Z
    2674:	28 2f       	mov	r18, r24
    2676:	2f 70       	andi	r18, 0x0F	; 15
    2678:	fe 01       	movw	r30, r28
    267a:	e1 58       	subi	r30, 0x81	; 129
    267c:	ff 4f       	sbci	r31, 0xFF	; 255
    267e:	80 81       	ld	r24, Z
    2680:	88 2f       	mov	r24, r24
    2682:	90 e0       	ldi	r25, 0x00	; 0
    2684:	82 95       	swap	r24
    2686:	92 95       	swap	r25
    2688:	90 7f       	andi	r25, 0xF0	; 240
    268a:	98 27       	eor	r25, r24
    268c:	80 7f       	andi	r24, 0xF0	; 240
    268e:	98 27       	eor	r25, r24
    2690:	82 2b       	or	r24, r18
    2692:	8c 93       	st	X, r24
    2694:	12 c0       	rjmp	.+36     	; 0x26ba <LCD_disply_character+0x87c>
	   }
       else if(LCD.bit_mode==lower_mode)
    2696:	80 91 7e 00 	lds	r24, 0x007E
    269a:	81 30       	cpi	r24, 0x01	; 1
    269c:	71 f4       	brne	.+28     	; 0x26ba <LCD_disply_character+0x87c>
       {
    	   LCD_DATA_PORT = (LCD_DATA_PORT & 0xF0) | (data & 0x0F);
    269e:	a2 e3       	ldi	r26, 0x32	; 50
    26a0:	b0 e0       	ldi	r27, 0x00	; 0
    26a2:	e2 e3       	ldi	r30, 0x32	; 50
    26a4:	f0 e0       	ldi	r31, 0x00	; 0
    26a6:	80 81       	ld	r24, Z
    26a8:	98 2f       	mov	r25, r24
    26aa:	90 7f       	andi	r25, 0xF0	; 240
    26ac:	fe 01       	movw	r30, r28
    26ae:	e1 58       	subi	r30, 0x81	; 129
    26b0:	ff 4f       	sbci	r31, 0xFF	; 255
    26b2:	80 81       	ld	r24, Z
    26b4:	8f 70       	andi	r24, 0x0F	; 15
    26b6:	89 2b       	or	r24, r25
    26b8:	8c 93       	st	X, r24
    26ba:	80 e0       	ldi	r24, 0x00	; 0
    26bc:	90 e0       	ldi	r25, 0x00	; 0
    26be:	a0 e8       	ldi	r26, 0x80	; 128
    26c0:	bf e3       	ldi	r27, 0x3F	; 63
    26c2:	8d ab       	std	Y+53, r24	; 0x35
    26c4:	9e ab       	std	Y+54, r25	; 0x36
    26c6:	af ab       	std	Y+55, r26	; 0x37
    26c8:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    26ca:	6d a9       	ldd	r22, Y+53	; 0x35
    26cc:	7e a9       	ldd	r23, Y+54	; 0x36
    26ce:	8f a9       	ldd	r24, Y+55	; 0x37
    26d0:	98 ad       	ldd	r25, Y+56	; 0x38
    26d2:	20 e0       	ldi	r18, 0x00	; 0
    26d4:	30 e0       	ldi	r19, 0x00	; 0
    26d6:	4a e7       	ldi	r20, 0x7A	; 122
    26d8:	53 e4       	ldi	r21, 0x43	; 67
    26da:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    26de:	dc 01       	movw	r26, r24
    26e0:	cb 01       	movw	r24, r22
    26e2:	89 ab       	std	Y+49, r24	; 0x31
    26e4:	9a ab       	std	Y+50, r25	; 0x32
    26e6:	ab ab       	std	Y+51, r26	; 0x33
    26e8:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    26ea:	69 a9       	ldd	r22, Y+49	; 0x31
    26ec:	7a a9       	ldd	r23, Y+50	; 0x32
    26ee:	8b a9       	ldd	r24, Y+51	; 0x33
    26f0:	9c a9       	ldd	r25, Y+52	; 0x34
    26f2:	20 e0       	ldi	r18, 0x00	; 0
    26f4:	30 e0       	ldi	r19, 0x00	; 0
    26f6:	40 e8       	ldi	r20, 0x80	; 128
    26f8:	5f e3       	ldi	r21, 0x3F	; 63
    26fa:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    26fe:	88 23       	and	r24, r24
    2700:	2c f4       	brge	.+10     	; 0x270c <LCD_disply_character+0x8ce>
		__ticks = 1;
    2702:	81 e0       	ldi	r24, 0x01	; 1
    2704:	90 e0       	ldi	r25, 0x00	; 0
    2706:	98 ab       	std	Y+48, r25	; 0x30
    2708:	8f a7       	std	Y+47, r24	; 0x2f
    270a:	3f c0       	rjmp	.+126    	; 0x278a <LCD_disply_character+0x94c>
	else if (__tmp > 65535)
    270c:	69 a9       	ldd	r22, Y+49	; 0x31
    270e:	7a a9       	ldd	r23, Y+50	; 0x32
    2710:	8b a9       	ldd	r24, Y+51	; 0x33
    2712:	9c a9       	ldd	r25, Y+52	; 0x34
    2714:	20 e0       	ldi	r18, 0x00	; 0
    2716:	3f ef       	ldi	r19, 0xFF	; 255
    2718:	4f e7       	ldi	r20, 0x7F	; 127
    271a:	57 e4       	ldi	r21, 0x47	; 71
    271c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2720:	18 16       	cp	r1, r24
    2722:	4c f5       	brge	.+82     	; 0x2776 <LCD_disply_character+0x938>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2724:	6d a9       	ldd	r22, Y+53	; 0x35
    2726:	7e a9       	ldd	r23, Y+54	; 0x36
    2728:	8f a9       	ldd	r24, Y+55	; 0x37
    272a:	98 ad       	ldd	r25, Y+56	; 0x38
    272c:	20 e0       	ldi	r18, 0x00	; 0
    272e:	30 e0       	ldi	r19, 0x00	; 0
    2730:	40 e2       	ldi	r20, 0x20	; 32
    2732:	51 e4       	ldi	r21, 0x41	; 65
    2734:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2738:	dc 01       	movw	r26, r24
    273a:	cb 01       	movw	r24, r22
    273c:	bc 01       	movw	r22, r24
    273e:	cd 01       	movw	r24, r26
    2740:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2744:	dc 01       	movw	r26, r24
    2746:	cb 01       	movw	r24, r22
    2748:	98 ab       	std	Y+48, r25	; 0x30
    274a:	8f a7       	std	Y+47, r24	; 0x2f
    274c:	0f c0       	rjmp	.+30     	; 0x276c <LCD_disply_character+0x92e>
    274e:	89 e1       	ldi	r24, 0x19	; 25
    2750:	90 e0       	ldi	r25, 0x00	; 0
    2752:	9e a7       	std	Y+46, r25	; 0x2e
    2754:	8d a7       	std	Y+45, r24	; 0x2d
    2756:	8d a5       	ldd	r24, Y+45	; 0x2d
    2758:	9e a5       	ldd	r25, Y+46	; 0x2e
    275a:	01 97       	sbiw	r24, 0x01	; 1
    275c:	f1 f7       	brne	.-4      	; 0x275a <LCD_disply_character+0x91c>
    275e:	9e a7       	std	Y+46, r25	; 0x2e
    2760:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2762:	8f a5       	ldd	r24, Y+47	; 0x2f
    2764:	98 a9       	ldd	r25, Y+48	; 0x30
    2766:	01 97       	sbiw	r24, 0x01	; 1
    2768:	98 ab       	std	Y+48, r25	; 0x30
    276a:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    276c:	8f a5       	ldd	r24, Y+47	; 0x2f
    276e:	98 a9       	ldd	r25, Y+48	; 0x30
    2770:	00 97       	sbiw	r24, 0x00	; 0
    2772:	69 f7       	brne	.-38     	; 0x274e <LCD_disply_character+0x910>
    2774:	14 c0       	rjmp	.+40     	; 0x279e <LCD_disply_character+0x960>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2776:	69 a9       	ldd	r22, Y+49	; 0x31
    2778:	7a a9       	ldd	r23, Y+50	; 0x32
    277a:	8b a9       	ldd	r24, Y+51	; 0x33
    277c:	9c a9       	ldd	r25, Y+52	; 0x34
    277e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2782:	dc 01       	movw	r26, r24
    2784:	cb 01       	movw	r24, r22
    2786:	98 ab       	std	Y+48, r25	; 0x30
    2788:	8f a7       	std	Y+47, r24	; 0x2f
    278a:	8f a5       	ldd	r24, Y+47	; 0x2f
    278c:	98 a9       	ldd	r25, Y+48	; 0x30
    278e:	9c a7       	std	Y+44, r25	; 0x2c
    2790:	8b a7       	std	Y+43, r24	; 0x2b
    2792:	8b a5       	ldd	r24, Y+43	; 0x2b
    2794:	9c a5       	ldd	r25, Y+44	; 0x2c
    2796:	01 97       	sbiw	r24, 0x01	; 1
    2798:	f1 f7       	brne	.-4      	; 0x2796 <LCD_disply_character+0x958>
    279a:	9c a7       	std	Y+44, r25	; 0x2c
    279c:	8b a7       	std	Y+43, r24	; 0x2b
       }
	   _delay_ms(1); /* delay for processing Tdsw = 100ns */
	   CLEAR_BIT(LCD_CTRL_PORT,E); /* disable LCD E=0 */
    279e:	a8 e3       	ldi	r26, 0x38	; 56
    27a0:	b0 e0       	ldi	r27, 0x00	; 0
    27a2:	e8 e3       	ldi	r30, 0x38	; 56
    27a4:	f0 e0       	ldi	r31, 0x00	; 0
    27a6:	80 81       	ld	r24, Z
    27a8:	8f 7b       	andi	r24, 0xBF	; 191
    27aa:	8c 93       	st	X, r24
    27ac:	80 e0       	ldi	r24, 0x00	; 0
    27ae:	90 e0       	ldi	r25, 0x00	; 0
    27b0:	a0 e8       	ldi	r26, 0x80	; 128
    27b2:	bf e3       	ldi	r27, 0x3F	; 63
    27b4:	8f a3       	std	Y+39, r24	; 0x27
    27b6:	98 a7       	std	Y+40, r25	; 0x28
    27b8:	a9 a7       	std	Y+41, r26	; 0x29
    27ba:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    27bc:	6f a1       	ldd	r22, Y+39	; 0x27
    27be:	78 a5       	ldd	r23, Y+40	; 0x28
    27c0:	89 a5       	ldd	r24, Y+41	; 0x29
    27c2:	9a a5       	ldd	r25, Y+42	; 0x2a
    27c4:	20 e0       	ldi	r18, 0x00	; 0
    27c6:	30 e0       	ldi	r19, 0x00	; 0
    27c8:	4a e7       	ldi	r20, 0x7A	; 122
    27ca:	53 e4       	ldi	r21, 0x43	; 67
    27cc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    27d0:	dc 01       	movw	r26, r24
    27d2:	cb 01       	movw	r24, r22
    27d4:	8b a3       	std	Y+35, r24	; 0x23
    27d6:	9c a3       	std	Y+36, r25	; 0x24
    27d8:	ad a3       	std	Y+37, r26	; 0x25
    27da:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    27dc:	6b a1       	ldd	r22, Y+35	; 0x23
    27de:	7c a1       	ldd	r23, Y+36	; 0x24
    27e0:	8d a1       	ldd	r24, Y+37	; 0x25
    27e2:	9e a1       	ldd	r25, Y+38	; 0x26
    27e4:	20 e0       	ldi	r18, 0x00	; 0
    27e6:	30 e0       	ldi	r19, 0x00	; 0
    27e8:	40 e8       	ldi	r20, 0x80	; 128
    27ea:	5f e3       	ldi	r21, 0x3F	; 63
    27ec:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    27f0:	88 23       	and	r24, r24
    27f2:	2c f4       	brge	.+10     	; 0x27fe <LCD_disply_character+0x9c0>
		__ticks = 1;
    27f4:	81 e0       	ldi	r24, 0x01	; 1
    27f6:	90 e0       	ldi	r25, 0x00	; 0
    27f8:	9a a3       	std	Y+34, r25	; 0x22
    27fa:	89 a3       	std	Y+33, r24	; 0x21
    27fc:	3f c0       	rjmp	.+126    	; 0x287c <LCD_disply_character+0xa3e>
	else if (__tmp > 65535)
    27fe:	6b a1       	ldd	r22, Y+35	; 0x23
    2800:	7c a1       	ldd	r23, Y+36	; 0x24
    2802:	8d a1       	ldd	r24, Y+37	; 0x25
    2804:	9e a1       	ldd	r25, Y+38	; 0x26
    2806:	20 e0       	ldi	r18, 0x00	; 0
    2808:	3f ef       	ldi	r19, 0xFF	; 255
    280a:	4f e7       	ldi	r20, 0x7F	; 127
    280c:	57 e4       	ldi	r21, 0x47	; 71
    280e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2812:	18 16       	cp	r1, r24
    2814:	4c f5       	brge	.+82     	; 0x2868 <LCD_disply_character+0xa2a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2816:	6f a1       	ldd	r22, Y+39	; 0x27
    2818:	78 a5       	ldd	r23, Y+40	; 0x28
    281a:	89 a5       	ldd	r24, Y+41	; 0x29
    281c:	9a a5       	ldd	r25, Y+42	; 0x2a
    281e:	20 e0       	ldi	r18, 0x00	; 0
    2820:	30 e0       	ldi	r19, 0x00	; 0
    2822:	40 e2       	ldi	r20, 0x20	; 32
    2824:	51 e4       	ldi	r21, 0x41	; 65
    2826:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    282a:	dc 01       	movw	r26, r24
    282c:	cb 01       	movw	r24, r22
    282e:	bc 01       	movw	r22, r24
    2830:	cd 01       	movw	r24, r26
    2832:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2836:	dc 01       	movw	r26, r24
    2838:	cb 01       	movw	r24, r22
    283a:	9a a3       	std	Y+34, r25	; 0x22
    283c:	89 a3       	std	Y+33, r24	; 0x21
    283e:	0f c0       	rjmp	.+30     	; 0x285e <LCD_disply_character+0xa20>
    2840:	89 e1       	ldi	r24, 0x19	; 25
    2842:	90 e0       	ldi	r25, 0x00	; 0
    2844:	98 a3       	std	Y+32, r25	; 0x20
    2846:	8f 8f       	std	Y+31, r24	; 0x1f
    2848:	8f 8d       	ldd	r24, Y+31	; 0x1f
    284a:	98 a1       	ldd	r25, Y+32	; 0x20
    284c:	01 97       	sbiw	r24, 0x01	; 1
    284e:	f1 f7       	brne	.-4      	; 0x284c <LCD_disply_character+0xa0e>
    2850:	98 a3       	std	Y+32, r25	; 0x20
    2852:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2854:	89 a1       	ldd	r24, Y+33	; 0x21
    2856:	9a a1       	ldd	r25, Y+34	; 0x22
    2858:	01 97       	sbiw	r24, 0x01	; 1
    285a:	9a a3       	std	Y+34, r25	; 0x22
    285c:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    285e:	89 a1       	ldd	r24, Y+33	; 0x21
    2860:	9a a1       	ldd	r25, Y+34	; 0x22
    2862:	00 97       	sbiw	r24, 0x00	; 0
    2864:	69 f7       	brne	.-38     	; 0x2840 <LCD_disply_character+0xa02>
    2866:	0c c1       	rjmp	.+536    	; 0x2a80 <LCD_disply_character+0xc42>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2868:	6b a1       	ldd	r22, Y+35	; 0x23
    286a:	7c a1       	ldd	r23, Y+36	; 0x24
    286c:	8d a1       	ldd	r24, Y+37	; 0x25
    286e:	9e a1       	ldd	r25, Y+38	; 0x26
    2870:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2874:	dc 01       	movw	r26, r24
    2876:	cb 01       	movw	r24, r22
    2878:	9a a3       	std	Y+34, r25	; 0x22
    287a:	89 a3       	std	Y+33, r24	; 0x21
    287c:	89 a1       	ldd	r24, Y+33	; 0x21
    287e:	9a a1       	ldd	r25, Y+34	; 0x22
    2880:	9e 8f       	std	Y+30, r25	; 0x1e
    2882:	8d 8f       	std	Y+29, r24	; 0x1d
    2884:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2886:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2888:	01 97       	sbiw	r24, 0x01	; 1
    288a:	f1 f7       	brne	.-4      	; 0x2888 <LCD_disply_character+0xa4a>
    288c:	9e 8f       	std	Y+30, r25	; 0x1e
    288e:	8d 8f       	std	Y+29, r24	; 0x1d
    2890:	f7 c0       	rjmp	.+494    	; 0x2a80 <LCD_disply_character+0xc42>
	  _delay_ms(1); /* delay for processing Th = 13ns */
    }

	else if(LCD.type ==TWO_LINE_LCD_Eight_BIT_MODE)
    2892:	80 91 7c 00 	lds	r24, 0x007C
    2896:	88 33       	cpi	r24, 0x38	; 56
    2898:	09 f0       	breq	.+2      	; 0x289c <LCD_disply_character+0xa5e>
    289a:	f2 c0       	rjmp	.+484    	; 0x2a80 <LCD_disply_character+0xc42>
	{
		LCD_DATA_PORT = data; /* out the required command to the data bus D0 --> D7 */
    289c:	a2 e3       	ldi	r26, 0x32	; 50
    289e:	b0 e0       	ldi	r27, 0x00	; 0
    28a0:	fe 01       	movw	r30, r28
    28a2:	e1 58       	subi	r30, 0x81	; 129
    28a4:	ff 4f       	sbci	r31, 0xFF	; 255
    28a6:	80 81       	ld	r24, Z
    28a8:	8c 93       	st	X, r24
    28aa:	80 e0       	ldi	r24, 0x00	; 0
    28ac:	90 e0       	ldi	r25, 0x00	; 0
    28ae:	a0 e8       	ldi	r26, 0x80	; 128
    28b0:	bf e3       	ldi	r27, 0x3F	; 63
    28b2:	89 8f       	std	Y+25, r24	; 0x19
    28b4:	9a 8f       	std	Y+26, r25	; 0x1a
    28b6:	ab 8f       	std	Y+27, r26	; 0x1b
    28b8:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    28ba:	69 8d       	ldd	r22, Y+25	; 0x19
    28bc:	7a 8d       	ldd	r23, Y+26	; 0x1a
    28be:	8b 8d       	ldd	r24, Y+27	; 0x1b
    28c0:	9c 8d       	ldd	r25, Y+28	; 0x1c
    28c2:	20 e0       	ldi	r18, 0x00	; 0
    28c4:	30 e0       	ldi	r19, 0x00	; 0
    28c6:	4a e7       	ldi	r20, 0x7A	; 122
    28c8:	53 e4       	ldi	r21, 0x43	; 67
    28ca:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    28ce:	dc 01       	movw	r26, r24
    28d0:	cb 01       	movw	r24, r22
    28d2:	8d 8b       	std	Y+21, r24	; 0x15
    28d4:	9e 8b       	std	Y+22, r25	; 0x16
    28d6:	af 8b       	std	Y+23, r26	; 0x17
    28d8:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    28da:	6d 89       	ldd	r22, Y+21	; 0x15
    28dc:	7e 89       	ldd	r23, Y+22	; 0x16
    28de:	8f 89       	ldd	r24, Y+23	; 0x17
    28e0:	98 8d       	ldd	r25, Y+24	; 0x18
    28e2:	20 e0       	ldi	r18, 0x00	; 0
    28e4:	30 e0       	ldi	r19, 0x00	; 0
    28e6:	40 e8       	ldi	r20, 0x80	; 128
    28e8:	5f e3       	ldi	r21, 0x3F	; 63
    28ea:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    28ee:	88 23       	and	r24, r24
    28f0:	2c f4       	brge	.+10     	; 0x28fc <LCD_disply_character+0xabe>
		__ticks = 1;
    28f2:	81 e0       	ldi	r24, 0x01	; 1
    28f4:	90 e0       	ldi	r25, 0x00	; 0
    28f6:	9c 8b       	std	Y+20, r25	; 0x14
    28f8:	8b 8b       	std	Y+19, r24	; 0x13
    28fa:	3f c0       	rjmp	.+126    	; 0x297a <LCD_disply_character+0xb3c>
	else if (__tmp > 65535)
    28fc:	6d 89       	ldd	r22, Y+21	; 0x15
    28fe:	7e 89       	ldd	r23, Y+22	; 0x16
    2900:	8f 89       	ldd	r24, Y+23	; 0x17
    2902:	98 8d       	ldd	r25, Y+24	; 0x18
    2904:	20 e0       	ldi	r18, 0x00	; 0
    2906:	3f ef       	ldi	r19, 0xFF	; 255
    2908:	4f e7       	ldi	r20, 0x7F	; 127
    290a:	57 e4       	ldi	r21, 0x47	; 71
    290c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2910:	18 16       	cp	r1, r24
    2912:	4c f5       	brge	.+82     	; 0x2966 <LCD_disply_character+0xb28>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2914:	69 8d       	ldd	r22, Y+25	; 0x19
    2916:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2918:	8b 8d       	ldd	r24, Y+27	; 0x1b
    291a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    291c:	20 e0       	ldi	r18, 0x00	; 0
    291e:	30 e0       	ldi	r19, 0x00	; 0
    2920:	40 e2       	ldi	r20, 0x20	; 32
    2922:	51 e4       	ldi	r21, 0x41	; 65
    2924:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2928:	dc 01       	movw	r26, r24
    292a:	cb 01       	movw	r24, r22
    292c:	bc 01       	movw	r22, r24
    292e:	cd 01       	movw	r24, r26
    2930:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2934:	dc 01       	movw	r26, r24
    2936:	cb 01       	movw	r24, r22
    2938:	9c 8b       	std	Y+20, r25	; 0x14
    293a:	8b 8b       	std	Y+19, r24	; 0x13
    293c:	0f c0       	rjmp	.+30     	; 0x295c <LCD_disply_character+0xb1e>
    293e:	89 e1       	ldi	r24, 0x19	; 25
    2940:	90 e0       	ldi	r25, 0x00	; 0
    2942:	9a 8b       	std	Y+18, r25	; 0x12
    2944:	89 8b       	std	Y+17, r24	; 0x11
    2946:	89 89       	ldd	r24, Y+17	; 0x11
    2948:	9a 89       	ldd	r25, Y+18	; 0x12
    294a:	01 97       	sbiw	r24, 0x01	; 1
    294c:	f1 f7       	brne	.-4      	; 0x294a <LCD_disply_character+0xb0c>
    294e:	9a 8b       	std	Y+18, r25	; 0x12
    2950:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2952:	8b 89       	ldd	r24, Y+19	; 0x13
    2954:	9c 89       	ldd	r25, Y+20	; 0x14
    2956:	01 97       	sbiw	r24, 0x01	; 1
    2958:	9c 8b       	std	Y+20, r25	; 0x14
    295a:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    295c:	8b 89       	ldd	r24, Y+19	; 0x13
    295e:	9c 89       	ldd	r25, Y+20	; 0x14
    2960:	00 97       	sbiw	r24, 0x00	; 0
    2962:	69 f7       	brne	.-38     	; 0x293e <LCD_disply_character+0xb00>
    2964:	14 c0       	rjmp	.+40     	; 0x298e <LCD_disply_character+0xb50>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2966:	6d 89       	ldd	r22, Y+21	; 0x15
    2968:	7e 89       	ldd	r23, Y+22	; 0x16
    296a:	8f 89       	ldd	r24, Y+23	; 0x17
    296c:	98 8d       	ldd	r25, Y+24	; 0x18
    296e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2972:	dc 01       	movw	r26, r24
    2974:	cb 01       	movw	r24, r22
    2976:	9c 8b       	std	Y+20, r25	; 0x14
    2978:	8b 8b       	std	Y+19, r24	; 0x13
    297a:	8b 89       	ldd	r24, Y+19	; 0x13
    297c:	9c 89       	ldd	r25, Y+20	; 0x14
    297e:	98 8b       	std	Y+16, r25	; 0x10
    2980:	8f 87       	std	Y+15, r24	; 0x0f
    2982:	8f 85       	ldd	r24, Y+15	; 0x0f
    2984:	98 89       	ldd	r25, Y+16	; 0x10
    2986:	01 97       	sbiw	r24, 0x01	; 1
    2988:	f1 f7       	brne	.-4      	; 0x2986 <LCD_disply_character+0xb48>
    298a:	98 8b       	std	Y+16, r25	; 0x10
    298c:	8f 87       	std	Y+15, r24	; 0x0f
		_delay_ms(1); /* delay for processing Tdsw = 100ns */
		CLEAR_BIT(LCD_CTRL_PORT,E); /* disable LCD E=0 */
    298e:	a8 e3       	ldi	r26, 0x38	; 56
    2990:	b0 e0       	ldi	r27, 0x00	; 0
    2992:	e8 e3       	ldi	r30, 0x38	; 56
    2994:	f0 e0       	ldi	r31, 0x00	; 0
    2996:	80 81       	ld	r24, Z
    2998:	8f 7b       	andi	r24, 0xBF	; 191
    299a:	8c 93       	st	X, r24
    299c:	80 e0       	ldi	r24, 0x00	; 0
    299e:	90 e0       	ldi	r25, 0x00	; 0
    29a0:	a0 e8       	ldi	r26, 0x80	; 128
    29a2:	bf e3       	ldi	r27, 0x3F	; 63
    29a4:	8b 87       	std	Y+11, r24	; 0x0b
    29a6:	9c 87       	std	Y+12, r25	; 0x0c
    29a8:	ad 87       	std	Y+13, r26	; 0x0d
    29aa:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    29ac:	6b 85       	ldd	r22, Y+11	; 0x0b
    29ae:	7c 85       	ldd	r23, Y+12	; 0x0c
    29b0:	8d 85       	ldd	r24, Y+13	; 0x0d
    29b2:	9e 85       	ldd	r25, Y+14	; 0x0e
    29b4:	20 e0       	ldi	r18, 0x00	; 0
    29b6:	30 e0       	ldi	r19, 0x00	; 0
    29b8:	4a e7       	ldi	r20, 0x7A	; 122
    29ba:	53 e4       	ldi	r21, 0x43	; 67
    29bc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    29c0:	dc 01       	movw	r26, r24
    29c2:	cb 01       	movw	r24, r22
    29c4:	8f 83       	std	Y+7, r24	; 0x07
    29c6:	98 87       	std	Y+8, r25	; 0x08
    29c8:	a9 87       	std	Y+9, r26	; 0x09
    29ca:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    29cc:	6f 81       	ldd	r22, Y+7	; 0x07
    29ce:	78 85       	ldd	r23, Y+8	; 0x08
    29d0:	89 85       	ldd	r24, Y+9	; 0x09
    29d2:	9a 85       	ldd	r25, Y+10	; 0x0a
    29d4:	20 e0       	ldi	r18, 0x00	; 0
    29d6:	30 e0       	ldi	r19, 0x00	; 0
    29d8:	40 e8       	ldi	r20, 0x80	; 128
    29da:	5f e3       	ldi	r21, 0x3F	; 63
    29dc:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    29e0:	88 23       	and	r24, r24
    29e2:	2c f4       	brge	.+10     	; 0x29ee <LCD_disply_character+0xbb0>
		__ticks = 1;
    29e4:	81 e0       	ldi	r24, 0x01	; 1
    29e6:	90 e0       	ldi	r25, 0x00	; 0
    29e8:	9e 83       	std	Y+6, r25	; 0x06
    29ea:	8d 83       	std	Y+5, r24	; 0x05
    29ec:	3f c0       	rjmp	.+126    	; 0x2a6c <LCD_disply_character+0xc2e>
	else if (__tmp > 65535)
    29ee:	6f 81       	ldd	r22, Y+7	; 0x07
    29f0:	78 85       	ldd	r23, Y+8	; 0x08
    29f2:	89 85       	ldd	r24, Y+9	; 0x09
    29f4:	9a 85       	ldd	r25, Y+10	; 0x0a
    29f6:	20 e0       	ldi	r18, 0x00	; 0
    29f8:	3f ef       	ldi	r19, 0xFF	; 255
    29fa:	4f e7       	ldi	r20, 0x7F	; 127
    29fc:	57 e4       	ldi	r21, 0x47	; 71
    29fe:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2a02:	18 16       	cp	r1, r24
    2a04:	4c f5       	brge	.+82     	; 0x2a58 <LCD_disply_character+0xc1a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2a06:	6b 85       	ldd	r22, Y+11	; 0x0b
    2a08:	7c 85       	ldd	r23, Y+12	; 0x0c
    2a0a:	8d 85       	ldd	r24, Y+13	; 0x0d
    2a0c:	9e 85       	ldd	r25, Y+14	; 0x0e
    2a0e:	20 e0       	ldi	r18, 0x00	; 0
    2a10:	30 e0       	ldi	r19, 0x00	; 0
    2a12:	40 e2       	ldi	r20, 0x20	; 32
    2a14:	51 e4       	ldi	r21, 0x41	; 65
    2a16:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2a1a:	dc 01       	movw	r26, r24
    2a1c:	cb 01       	movw	r24, r22
    2a1e:	bc 01       	movw	r22, r24
    2a20:	cd 01       	movw	r24, r26
    2a22:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2a26:	dc 01       	movw	r26, r24
    2a28:	cb 01       	movw	r24, r22
    2a2a:	9e 83       	std	Y+6, r25	; 0x06
    2a2c:	8d 83       	std	Y+5, r24	; 0x05
    2a2e:	0f c0       	rjmp	.+30     	; 0x2a4e <LCD_disply_character+0xc10>
    2a30:	89 e1       	ldi	r24, 0x19	; 25
    2a32:	90 e0       	ldi	r25, 0x00	; 0
    2a34:	9c 83       	std	Y+4, r25	; 0x04
    2a36:	8b 83       	std	Y+3, r24	; 0x03
    2a38:	8b 81       	ldd	r24, Y+3	; 0x03
    2a3a:	9c 81       	ldd	r25, Y+4	; 0x04
    2a3c:	01 97       	sbiw	r24, 0x01	; 1
    2a3e:	f1 f7       	brne	.-4      	; 0x2a3c <LCD_disply_character+0xbfe>
    2a40:	9c 83       	std	Y+4, r25	; 0x04
    2a42:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2a44:	8d 81       	ldd	r24, Y+5	; 0x05
    2a46:	9e 81       	ldd	r25, Y+6	; 0x06
    2a48:	01 97       	sbiw	r24, 0x01	; 1
    2a4a:	9e 83       	std	Y+6, r25	; 0x06
    2a4c:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2a4e:	8d 81       	ldd	r24, Y+5	; 0x05
    2a50:	9e 81       	ldd	r25, Y+6	; 0x06
    2a52:	00 97       	sbiw	r24, 0x00	; 0
    2a54:	69 f7       	brne	.-38     	; 0x2a30 <LCD_disply_character+0xbf2>
    2a56:	14 c0       	rjmp	.+40     	; 0x2a80 <LCD_disply_character+0xc42>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2a58:	6f 81       	ldd	r22, Y+7	; 0x07
    2a5a:	78 85       	ldd	r23, Y+8	; 0x08
    2a5c:	89 85       	ldd	r24, Y+9	; 0x09
    2a5e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2a60:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2a64:	dc 01       	movw	r26, r24
    2a66:	cb 01       	movw	r24, r22
    2a68:	9e 83       	std	Y+6, r25	; 0x06
    2a6a:	8d 83       	std	Y+5, r24	; 0x05
    2a6c:	8d 81       	ldd	r24, Y+5	; 0x05
    2a6e:	9e 81       	ldd	r25, Y+6	; 0x06
    2a70:	9a 83       	std	Y+2, r25	; 0x02
    2a72:	89 83       	std	Y+1, r24	; 0x01
    2a74:	89 81       	ldd	r24, Y+1	; 0x01
    2a76:	9a 81       	ldd	r25, Y+2	; 0x02
    2a78:	01 97       	sbiw	r24, 0x01	; 1
    2a7a:	f1 f7       	brne	.-4      	; 0x2a78 <LCD_disply_character+0xc3a>
    2a7c:	9a 83       	std	Y+2, r25	; 0x02
    2a7e:	89 83       	std	Y+1, r24	; 0x01
		_delay_ms(1); /* delay for processing Th = 13ns*/
	}
}
    2a80:	c9 57       	subi	r28, 0x79	; 121
    2a82:	df 4f       	sbci	r29, 0xFF	; 255
    2a84:	0f b6       	in	r0, 0x3f	; 63
    2a86:	f8 94       	cli
    2a88:	de bf       	out	0x3e, r29	; 62
    2a8a:	0f be       	out	0x3f, r0	; 63
    2a8c:	cd bf       	out	0x3d, r28	; 61
    2a8e:	cf 91       	pop	r28
    2a90:	df 91       	pop	r29
    2a92:	1f 91       	pop	r17
    2a94:	0f 91       	pop	r16
    2a96:	08 95       	ret

00002a98 <LCD_display_string>:

/*function to display a string in the LCD*/
void LCD_display_string(const char *string)
{
    2a98:	df 93       	push	r29
    2a9a:	cf 93       	push	r28
    2a9c:	00 d0       	rcall	.+0      	; 0x2a9e <LCD_display_string+0x6>
    2a9e:	0f 92       	push	r0
    2aa0:	cd b7       	in	r28, 0x3d	; 61
    2aa2:	de b7       	in	r29, 0x3e	; 62
    2aa4:	9b 83       	std	Y+3, r25	; 0x03
    2aa6:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    2aa8:	19 82       	std	Y+1, r1	; 0x01
    2aaa:	0e c0       	rjmp	.+28     	; 0x2ac8 <LCD_display_string+0x30>
	while(string[i] != '\0')
	{
		LCD_disply_character(string[i]);
    2aac:	89 81       	ldd	r24, Y+1	; 0x01
    2aae:	28 2f       	mov	r18, r24
    2ab0:	30 e0       	ldi	r19, 0x00	; 0
    2ab2:	8a 81       	ldd	r24, Y+2	; 0x02
    2ab4:	9b 81       	ldd	r25, Y+3	; 0x03
    2ab6:	fc 01       	movw	r30, r24
    2ab8:	e2 0f       	add	r30, r18
    2aba:	f3 1f       	adc	r31, r19
    2abc:	80 81       	ld	r24, Z
    2abe:	0e 94 1f 0f 	call	0x1e3e	; 0x1e3e <LCD_disply_character>
		i++;
    2ac2:	89 81       	ldd	r24, Y+1	; 0x01
    2ac4:	8f 5f       	subi	r24, 0xFF	; 255
    2ac6:	89 83       	std	Y+1, r24	; 0x01

/*function to display a string in the LCD*/
void LCD_display_string(const char *string)
{
	uint8 i = 0;
	while(string[i] != '\0')
    2ac8:	89 81       	ldd	r24, Y+1	; 0x01
    2aca:	28 2f       	mov	r18, r24
    2acc:	30 e0       	ldi	r19, 0x00	; 0
    2ace:	8a 81       	ldd	r24, Y+2	; 0x02
    2ad0:	9b 81       	ldd	r25, Y+3	; 0x03
    2ad2:	fc 01       	movw	r30, r24
    2ad4:	e2 0f       	add	r30, r18
    2ad6:	f3 1f       	adc	r31, r19
    2ad8:	80 81       	ld	r24, Z
    2ada:	88 23       	and	r24, r24
    2adc:	39 f7       	brne	.-50     	; 0x2aac <LCD_display_string+0x14>
	{
		LCD_disply_character(string[i]);
		i++;
	}
}
    2ade:	0f 90       	pop	r0
    2ae0:	0f 90       	pop	r0
    2ae2:	0f 90       	pop	r0
    2ae4:	cf 91       	pop	r28
    2ae6:	df 91       	pop	r29
    2ae8:	08 95       	ret

00002aea <LCD_display_integer>:

/*function to display integer in the LCD*/
void LCD_display_integer(uint8 data)
{
    2aea:	df 93       	push	r29
    2aec:	cf 93       	push	r28
    2aee:	cd b7       	in	r28, 0x3d	; 61
    2af0:	de b7       	in	r29, 0x3e	; 62
    2af2:	61 97       	sbiw	r28, 0x11	; 17
    2af4:	0f b6       	in	r0, 0x3f	; 63
    2af6:	f8 94       	cli
    2af8:	de bf       	out	0x3e, r29	; 62
    2afa:	0f be       	out	0x3f, r0	; 63
    2afc:	cd bf       	out	0x3d, r28	; 61
    2afe:	89 8b       	std	Y+17, r24	; 0x11
   char buff[16];            /* String to hold the ASCII result */
   itoa(data,buff,10);       /* 10 for decimal */
    2b00:	89 89       	ldd	r24, Y+17	; 0x11
    2b02:	88 2f       	mov	r24, r24
    2b04:	90 e0       	ldi	r25, 0x00	; 0
    2b06:	9e 01       	movw	r18, r28
    2b08:	2f 5f       	subi	r18, 0xFF	; 255
    2b0a:	3f 4f       	sbci	r19, 0xFF	; 255
    2b0c:	b9 01       	movw	r22, r18
    2b0e:	4a e0       	ldi	r20, 0x0A	; 10
    2b10:	50 e0       	ldi	r21, 0x00	; 0
    2b12:	0e 94 d8 16 	call	0x2db0	; 0x2db0 <itoa>
   LCD_display_string(buff);
    2b16:	ce 01       	movw	r24, r28
    2b18:	01 96       	adiw	r24, 0x01	; 1
    2b1a:	0e 94 4c 15 	call	0x2a98	; 0x2a98 <LCD_display_string>
}
    2b1e:	61 96       	adiw	r28, 0x11	; 17
    2b20:	0f b6       	in	r0, 0x3f	; 63
    2b22:	f8 94       	cli
    2b24:	de bf       	out	0x3e, r29	; 62
    2b26:	0f be       	out	0x3f, r0	; 63
    2b28:	cd bf       	out	0x3d, r28	; 61
    2b2a:	cf 91       	pop	r28
    2b2c:	df 91       	pop	r29
    2b2e:	08 95       	ret

00002b30 <LCD_goToRowColumn>:

/*function to go to specific row and column in the LCD*/
void LCD_goToRowColumn(uint8 row,uint8 col)
{
    2b30:	df 93       	push	r29
    2b32:	cf 93       	push	r28
    2b34:	cd b7       	in	r28, 0x3d	; 61
    2b36:	de b7       	in	r29, 0x3e	; 62
    2b38:	2d 97       	sbiw	r28, 0x0d	; 13
    2b3a:	0f b6       	in	r0, 0x3f	; 63
    2b3c:	f8 94       	cli
    2b3e:	de bf       	out	0x3e, r29	; 62
    2b40:	0f be       	out	0x3f, r0	; 63
    2b42:	cd bf       	out	0x3d, r28	; 61
    2b44:	8a 83       	std	Y+2, r24	; 0x02
    2b46:	6b 83       	std	Y+3, r22	; 0x03
	uint8 Address;
	LCD = Configure_LCD();
    2b48:	0e 94 28 16 	call	0x2c50	; 0x2c50 <Configure_LCD>
    2b4c:	6c 83       	std	Y+4, r22	; 0x04
    2b4e:	7d 83       	std	Y+5, r23	; 0x05
    2b50:	8e 83       	std	Y+6, r24	; 0x06
    2b52:	2c e7       	ldi	r18, 0x7C	; 124
    2b54:	30 e0       	ldi	r19, 0x00	; 0
    2b56:	3a 87       	std	Y+10, r19	; 0x0a
    2b58:	29 87       	std	Y+9, r18	; 0x09
    2b5a:	ce 01       	movw	r24, r28
    2b5c:	04 96       	adiw	r24, 0x04	; 4
    2b5e:	9c 87       	std	Y+12, r25	; 0x0c
    2b60:	8b 87       	std	Y+11, r24	; 0x0b
    2b62:	93 e0       	ldi	r25, 0x03	; 3
    2b64:	9d 87       	std	Y+13, r25	; 0x0d
    2b66:	eb 85       	ldd	r30, Y+11	; 0x0b
    2b68:	fc 85       	ldd	r31, Y+12	; 0x0c
    2b6a:	00 80       	ld	r0, Z
    2b6c:	2b 85       	ldd	r18, Y+11	; 0x0b
    2b6e:	3c 85       	ldd	r19, Y+12	; 0x0c
    2b70:	2f 5f       	subi	r18, 0xFF	; 255
    2b72:	3f 4f       	sbci	r19, 0xFF	; 255
    2b74:	3c 87       	std	Y+12, r19	; 0x0c
    2b76:	2b 87       	std	Y+11, r18	; 0x0b
    2b78:	e9 85       	ldd	r30, Y+9	; 0x09
    2b7a:	fa 85       	ldd	r31, Y+10	; 0x0a
    2b7c:	00 82       	st	Z, r0
    2b7e:	29 85       	ldd	r18, Y+9	; 0x09
    2b80:	3a 85       	ldd	r19, Y+10	; 0x0a
    2b82:	2f 5f       	subi	r18, 0xFF	; 255
    2b84:	3f 4f       	sbci	r19, 0xFF	; 255
    2b86:	3a 87       	std	Y+10, r19	; 0x0a
    2b88:	29 87       	std	Y+9, r18	; 0x09
    2b8a:	3d 85       	ldd	r19, Y+13	; 0x0d
    2b8c:	31 50       	subi	r19, 0x01	; 1
    2b8e:	3d 87       	std	Y+13, r19	; 0x0d
    2b90:	8d 85       	ldd	r24, Y+13	; 0x0d
    2b92:	88 23       	and	r24, r24
    2b94:	41 f7       	brne	.-48     	; 0x2b66 <LCD_goToRowColumn+0x36>
	/* first of all calculate the required address */
	switch(row)
    2b96:	8a 81       	ldd	r24, Y+2	; 0x02
    2b98:	e8 2f       	mov	r30, r24
    2b9a:	f0 e0       	ldi	r31, 0x00	; 0
    2b9c:	f8 87       	std	Y+8, r31	; 0x08
    2b9e:	ef 83       	std	Y+7, r30	; 0x07
    2ba0:	2f 81       	ldd	r18, Y+7	; 0x07
    2ba2:	38 85       	ldd	r19, Y+8	; 0x08
    2ba4:	21 30       	cpi	r18, 0x01	; 1
    2ba6:	31 05       	cpc	r19, r1
    2ba8:	c1 f0       	breq	.+48     	; 0x2bda <LCD_goToRowColumn+0xaa>
    2baa:	8f 81       	ldd	r24, Y+7	; 0x07
    2bac:	98 85       	ldd	r25, Y+8	; 0x08
    2bae:	82 30       	cpi	r24, 0x02	; 2
    2bb0:	91 05       	cpc	r25, r1
    2bb2:	2c f4       	brge	.+10     	; 0x2bbe <LCD_goToRowColumn+0x8e>
    2bb4:	ef 81       	ldd	r30, Y+7	; 0x07
    2bb6:	f8 85       	ldd	r31, Y+8	; 0x08
    2bb8:	30 97       	sbiw	r30, 0x00	; 0
    2bba:	61 f0       	breq	.+24     	; 0x2bd4 <LCD_goToRowColumn+0xa4>
    2bbc:	19 c0       	rjmp	.+50     	; 0x2bf0 <LCD_goToRowColumn+0xc0>
    2bbe:	2f 81       	ldd	r18, Y+7	; 0x07
    2bc0:	38 85       	ldd	r19, Y+8	; 0x08
    2bc2:	22 30       	cpi	r18, 0x02	; 2
    2bc4:	31 05       	cpc	r19, r1
    2bc6:	69 f0       	breq	.+26     	; 0x2be2 <LCD_goToRowColumn+0xb2>
    2bc8:	8f 81       	ldd	r24, Y+7	; 0x07
    2bca:	98 85       	ldd	r25, Y+8	; 0x08
    2bcc:	83 30       	cpi	r24, 0x03	; 3
    2bce:	91 05       	cpc	r25, r1
    2bd0:	61 f0       	breq	.+24     	; 0x2bea <LCD_goToRowColumn+0xba>
    2bd2:	0e c0       	rjmp	.+28     	; 0x2bf0 <LCD_goToRowColumn+0xc0>
	{
		case 0:
				Address=col;
    2bd4:	8b 81       	ldd	r24, Y+3	; 0x03
    2bd6:	89 83       	std	Y+1, r24	; 0x01
    2bd8:	0b c0       	rjmp	.+22     	; 0x2bf0 <LCD_goToRowColumn+0xc0>
				break;
		case 1:
				Address=col+0x40;
    2bda:	8b 81       	ldd	r24, Y+3	; 0x03
    2bdc:	80 5c       	subi	r24, 0xC0	; 192
    2bde:	89 83       	std	Y+1, r24	; 0x01
    2be0:	07 c0       	rjmp	.+14     	; 0x2bf0 <LCD_goToRowColumn+0xc0>
				break;
		case 2:
				Address=col+0x10;
    2be2:	8b 81       	ldd	r24, Y+3	; 0x03
    2be4:	80 5f       	subi	r24, 0xF0	; 240
    2be6:	89 83       	std	Y+1, r24	; 0x01
    2be8:	03 c0       	rjmp	.+6      	; 0x2bf0 <LCD_goToRowColumn+0xc0>
				break;
		case 3:
				Address=col+0x50;
    2bea:	8b 81       	ldd	r24, Y+3	; 0x03
    2bec:	80 5b       	subi	r24, 0xB0	; 176
    2bee:	89 83       	std	Y+1, r24	; 0x01
				break;
	}					
	/* to write to a specific address in the LCD 
	 * we need to apply the corresponding command 0b10000000+Address */
	LCD_sendCommand(Address | SET_CURSOR_LOCATION); 
    2bf0:	89 81       	ldd	r24, Y+1	; 0x01
    2bf2:	80 68       	ori	r24, 0x80	; 128
    2bf4:	0e 94 f3 08 	call	0x11e6	; 0x11e6 <LCD_sendCommand>
}
    2bf8:	2d 96       	adiw	r28, 0x0d	; 13
    2bfa:	0f b6       	in	r0, 0x3f	; 63
    2bfc:	f8 94       	cli
    2bfe:	de bf       	out	0x3e, r29	; 62
    2c00:	0f be       	out	0x3f, r0	; 63
    2c02:	cd bf       	out	0x3d, r28	; 61
    2c04:	cf 91       	pop	r28
    2c06:	df 91       	pop	r29
    2c08:	08 95       	ret

00002c0a <LCD_displayStringRowColumn>:

/*function to display a string in specific row and column in the LCD*/
void LCD_displayStringRowColumn(uint8 row,uint8 col,const char *Str)
{
    2c0a:	df 93       	push	r29
    2c0c:	cf 93       	push	r28
    2c0e:	00 d0       	rcall	.+0      	; 0x2c10 <LCD_displayStringRowColumn+0x6>
    2c10:	00 d0       	rcall	.+0      	; 0x2c12 <LCD_displayStringRowColumn+0x8>
    2c12:	cd b7       	in	r28, 0x3d	; 61
    2c14:	de b7       	in	r29, 0x3e	; 62
    2c16:	89 83       	std	Y+1, r24	; 0x01
    2c18:	6a 83       	std	Y+2, r22	; 0x02
    2c1a:	5c 83       	std	Y+4, r21	; 0x04
    2c1c:	4b 83       	std	Y+3, r20	; 0x03
	LCD_goToRowColumn(row,col); /* go to to the required LCD position */
    2c1e:	89 81       	ldd	r24, Y+1	; 0x01
    2c20:	6a 81       	ldd	r22, Y+2	; 0x02
    2c22:	0e 94 98 15 	call	0x2b30	; 0x2b30 <LCD_goToRowColumn>
	LCD_display_string(Str); /* display the string */
    2c26:	8b 81       	ldd	r24, Y+3	; 0x03
    2c28:	9c 81       	ldd	r25, Y+4	; 0x04
    2c2a:	0e 94 4c 15 	call	0x2a98	; 0x2a98 <LCD_display_string>
}
    2c2e:	0f 90       	pop	r0
    2c30:	0f 90       	pop	r0
    2c32:	0f 90       	pop	r0
    2c34:	0f 90       	pop	r0
    2c36:	cf 91       	pop	r28
    2c38:	df 91       	pop	r29
    2c3a:	08 95       	ret

00002c3c <LCD_clear_screen>:

/*function to clear the LCD*/
void LCD_clear_screen(void)
{
    2c3c:	df 93       	push	r29
    2c3e:	cf 93       	push	r28
    2c40:	cd b7       	in	r28, 0x3d	; 61
    2c42:	de b7       	in	r29, 0x3e	; 62
	LCD_sendCommand(CLEAR_COMMAND); //clear display 
    2c44:	81 e0       	ldi	r24, 0x01	; 1
    2c46:	0e 94 f3 08 	call	0x11e6	; 0x11e6 <LCD_sendCommand>
}
    2c4a:	cf 91       	pop	r28
    2c4c:	df 91       	pop	r29
    2c4e:	08 95       	ret

00002c50 <Configure_LCD>:
/*********************************************************************************************
 *                                     Functions Definitions                                 *
 *********************************************************************************************/
/*function to configure the LCD*/
LCD_config Configure_LCD(void)
{
    2c50:	df 93       	push	r29
    2c52:	cf 93       	push	r28
    2c54:	cd b7       	in	r28, 0x3d	; 61
    2c56:	de b7       	in	r29, 0x3e	; 62
    2c58:	2f 97       	sbiw	r28, 0x0f	; 15
    2c5a:	0f b6       	in	r0, 0x3f	; 63
    2c5c:	f8 94       	cli
    2c5e:	de bf       	out	0x3e, r29	; 62
    2c60:	0f be       	out	0x3f, r0	; 63
    2c62:	cd bf       	out	0x3d, r28	; 61
	LCD_config LCD;
	LCD.type = TWO_LINE_LCD_Eight_BIT_MODE;
    2c64:	88 e3       	ldi	r24, 0x38	; 56
    2c66:	8c 83       	std	Y+4, r24	; 0x04
	LCD.cursor = CURSOR_ON;
    2c68:	8e e0       	ldi	r24, 0x0E	; 14
    2c6a:	8d 83       	std	Y+5, r24	; 0x05
	return LCD;
    2c6c:	ce 01       	movw	r24, r28
    2c6e:	01 96       	adiw	r24, 0x01	; 1
    2c70:	98 87       	std	Y+8, r25	; 0x08
    2c72:	8f 83       	std	Y+7, r24	; 0x07
    2c74:	fe 01       	movw	r30, r28
    2c76:	34 96       	adiw	r30, 0x04	; 4
    2c78:	fa 87       	std	Y+10, r31	; 0x0a
    2c7a:	e9 87       	std	Y+9, r30	; 0x09
    2c7c:	f3 e0       	ldi	r31, 0x03	; 3
    2c7e:	fb 87       	std	Y+11, r31	; 0x0b
    2c80:	e9 85       	ldd	r30, Y+9	; 0x09
    2c82:	fa 85       	ldd	r31, Y+10	; 0x0a
    2c84:	00 80       	ld	r0, Z
    2c86:	89 85       	ldd	r24, Y+9	; 0x09
    2c88:	9a 85       	ldd	r25, Y+10	; 0x0a
    2c8a:	01 96       	adiw	r24, 0x01	; 1
    2c8c:	9a 87       	std	Y+10, r25	; 0x0a
    2c8e:	89 87       	std	Y+9, r24	; 0x09
    2c90:	ef 81       	ldd	r30, Y+7	; 0x07
    2c92:	f8 85       	ldd	r31, Y+8	; 0x08
    2c94:	00 82       	st	Z, r0
    2c96:	8f 81       	ldd	r24, Y+7	; 0x07
    2c98:	98 85       	ldd	r25, Y+8	; 0x08
    2c9a:	01 96       	adiw	r24, 0x01	; 1
    2c9c:	98 87       	std	Y+8, r25	; 0x08
    2c9e:	8f 83       	std	Y+7, r24	; 0x07
    2ca0:	9b 85       	ldd	r25, Y+11	; 0x0b
    2ca2:	91 50       	subi	r25, 0x01	; 1
    2ca4:	9b 87       	std	Y+11, r25	; 0x0b
    2ca6:	eb 85       	ldd	r30, Y+11	; 0x0b
    2ca8:	ee 23       	and	r30, r30
    2caa:	51 f7       	brne	.-44     	; 0x2c80 <Configure_LCD+0x30>
    2cac:	20 e0       	ldi	r18, 0x00	; 0
    2cae:	29 81       	ldd	r18, Y+1	; 0x01
    2cb0:	80 e0       	ldi	r24, 0x00	; 0
    2cb2:	8a 81       	ldd	r24, Y+2	; 0x02
    2cb4:	90 e0       	ldi	r25, 0x00	; 0
    2cb6:	9b 81       	ldd	r25, Y+3	; 0x03
    2cb8:	2c 87       	std	Y+12, r18	; 0x0c
    2cba:	8d 87       	std	Y+13, r24	; 0x0d
    2cbc:	9e 87       	std	Y+14, r25	; 0x0e
    2cbe:	8c 85       	ldd	r24, Y+12	; 0x0c
    2cc0:	9d 85       	ldd	r25, Y+13	; 0x0d
    2cc2:	ae 85       	ldd	r26, Y+14	; 0x0e
    2cc4:	bf 85       	ldd	r27, Y+15	; 0x0f
}
    2cc6:	bc 01       	movw	r22, r24
    2cc8:	cd 01       	movw	r24, r26
    2cca:	2f 96       	adiw	r28, 0x0f	; 15
    2ccc:	0f b6       	in	r0, 0x3f	; 63
    2cce:	f8 94       	cli
    2cd0:	de bf       	out	0x3e, r29	; 62
    2cd2:	0f be       	out	0x3f, r0	; 63
    2cd4:	cd bf       	out	0x3d, r28	; 61
    2cd6:	cf 91       	pop	r28
    2cd8:	df 91       	pop	r29
    2cda:	08 95       	ret

00002cdc <__udivmodqi4>:
    2cdc:	99 1b       	sub	r25, r25
    2cde:	79 e0       	ldi	r23, 0x09	; 9
    2ce0:	04 c0       	rjmp	.+8      	; 0x2cea <__udivmodqi4_ep>

00002ce2 <__udivmodqi4_loop>:
    2ce2:	99 1f       	adc	r25, r25
    2ce4:	96 17       	cp	r25, r22
    2ce6:	08 f0       	brcs	.+2      	; 0x2cea <__udivmodqi4_ep>
    2ce8:	96 1b       	sub	r25, r22

00002cea <__udivmodqi4_ep>:
    2cea:	88 1f       	adc	r24, r24
    2cec:	7a 95       	dec	r23
    2cee:	c9 f7       	brne	.-14     	; 0x2ce2 <__udivmodqi4_loop>
    2cf0:	80 95       	com	r24
    2cf2:	08 95       	ret

00002cf4 <__divmodhi4>:
    2cf4:	97 fb       	bst	r25, 7
    2cf6:	09 2e       	mov	r0, r25
    2cf8:	07 26       	eor	r0, r23
    2cfa:	0a d0       	rcall	.+20     	; 0x2d10 <__divmodhi4_neg1>
    2cfc:	77 fd       	sbrc	r23, 7
    2cfe:	04 d0       	rcall	.+8      	; 0x2d08 <__divmodhi4_neg2>
    2d00:	0c d0       	rcall	.+24     	; 0x2d1a <__udivmodhi4>
    2d02:	06 d0       	rcall	.+12     	; 0x2d10 <__divmodhi4_neg1>
    2d04:	00 20       	and	r0, r0
    2d06:	1a f4       	brpl	.+6      	; 0x2d0e <__divmodhi4_exit>

00002d08 <__divmodhi4_neg2>:
    2d08:	70 95       	com	r23
    2d0a:	61 95       	neg	r22
    2d0c:	7f 4f       	sbci	r23, 0xFF	; 255

00002d0e <__divmodhi4_exit>:
    2d0e:	08 95       	ret

00002d10 <__divmodhi4_neg1>:
    2d10:	f6 f7       	brtc	.-4      	; 0x2d0e <__divmodhi4_exit>
    2d12:	90 95       	com	r25
    2d14:	81 95       	neg	r24
    2d16:	9f 4f       	sbci	r25, 0xFF	; 255
    2d18:	08 95       	ret

00002d1a <__udivmodhi4>:
    2d1a:	aa 1b       	sub	r26, r26
    2d1c:	bb 1b       	sub	r27, r27
    2d1e:	51 e1       	ldi	r21, 0x11	; 17
    2d20:	07 c0       	rjmp	.+14     	; 0x2d30 <__udivmodhi4_ep>

00002d22 <__udivmodhi4_loop>:
    2d22:	aa 1f       	adc	r26, r26
    2d24:	bb 1f       	adc	r27, r27
    2d26:	a6 17       	cp	r26, r22
    2d28:	b7 07       	cpc	r27, r23
    2d2a:	10 f0       	brcs	.+4      	; 0x2d30 <__udivmodhi4_ep>
    2d2c:	a6 1b       	sub	r26, r22
    2d2e:	b7 0b       	sbc	r27, r23

00002d30 <__udivmodhi4_ep>:
    2d30:	88 1f       	adc	r24, r24
    2d32:	99 1f       	adc	r25, r25
    2d34:	5a 95       	dec	r21
    2d36:	a9 f7       	brne	.-22     	; 0x2d22 <__udivmodhi4_loop>
    2d38:	80 95       	com	r24
    2d3a:	90 95       	com	r25
    2d3c:	bc 01       	movw	r22, r24
    2d3e:	cd 01       	movw	r24, r26
    2d40:	08 95       	ret

00002d42 <__prologue_saves__>:
    2d42:	2f 92       	push	r2
    2d44:	3f 92       	push	r3
    2d46:	4f 92       	push	r4
    2d48:	5f 92       	push	r5
    2d4a:	6f 92       	push	r6
    2d4c:	7f 92       	push	r7
    2d4e:	8f 92       	push	r8
    2d50:	9f 92       	push	r9
    2d52:	af 92       	push	r10
    2d54:	bf 92       	push	r11
    2d56:	cf 92       	push	r12
    2d58:	df 92       	push	r13
    2d5a:	ef 92       	push	r14
    2d5c:	ff 92       	push	r15
    2d5e:	0f 93       	push	r16
    2d60:	1f 93       	push	r17
    2d62:	cf 93       	push	r28
    2d64:	df 93       	push	r29
    2d66:	cd b7       	in	r28, 0x3d	; 61
    2d68:	de b7       	in	r29, 0x3e	; 62
    2d6a:	ca 1b       	sub	r28, r26
    2d6c:	db 0b       	sbc	r29, r27
    2d6e:	0f b6       	in	r0, 0x3f	; 63
    2d70:	f8 94       	cli
    2d72:	de bf       	out	0x3e, r29	; 62
    2d74:	0f be       	out	0x3f, r0	; 63
    2d76:	cd bf       	out	0x3d, r28	; 61
    2d78:	09 94       	ijmp

00002d7a <__epilogue_restores__>:
    2d7a:	2a 88       	ldd	r2, Y+18	; 0x12
    2d7c:	39 88       	ldd	r3, Y+17	; 0x11
    2d7e:	48 88       	ldd	r4, Y+16	; 0x10
    2d80:	5f 84       	ldd	r5, Y+15	; 0x0f
    2d82:	6e 84       	ldd	r6, Y+14	; 0x0e
    2d84:	7d 84       	ldd	r7, Y+13	; 0x0d
    2d86:	8c 84       	ldd	r8, Y+12	; 0x0c
    2d88:	9b 84       	ldd	r9, Y+11	; 0x0b
    2d8a:	aa 84       	ldd	r10, Y+10	; 0x0a
    2d8c:	b9 84       	ldd	r11, Y+9	; 0x09
    2d8e:	c8 84       	ldd	r12, Y+8	; 0x08
    2d90:	df 80       	ldd	r13, Y+7	; 0x07
    2d92:	ee 80       	ldd	r14, Y+6	; 0x06
    2d94:	fd 80       	ldd	r15, Y+5	; 0x05
    2d96:	0c 81       	ldd	r16, Y+4	; 0x04
    2d98:	1b 81       	ldd	r17, Y+3	; 0x03
    2d9a:	aa 81       	ldd	r26, Y+2	; 0x02
    2d9c:	b9 81       	ldd	r27, Y+1	; 0x01
    2d9e:	ce 0f       	add	r28, r30
    2da0:	d1 1d       	adc	r29, r1
    2da2:	0f b6       	in	r0, 0x3f	; 63
    2da4:	f8 94       	cli
    2da6:	de bf       	out	0x3e, r29	; 62
    2da8:	0f be       	out	0x3f, r0	; 63
    2daa:	cd bf       	out	0x3d, r28	; 61
    2dac:	ed 01       	movw	r28, r26
    2dae:	08 95       	ret

00002db0 <itoa>:
    2db0:	fb 01       	movw	r30, r22
    2db2:	9f 01       	movw	r18, r30
    2db4:	e8 94       	clt
    2db6:	42 30       	cpi	r20, 0x02	; 2
    2db8:	c4 f0       	brlt	.+48     	; 0x2dea <itoa+0x3a>
    2dba:	45 32       	cpi	r20, 0x25	; 37
    2dbc:	b4 f4       	brge	.+44     	; 0x2dea <itoa+0x3a>
    2dbe:	4a 30       	cpi	r20, 0x0A	; 10
    2dc0:	29 f4       	brne	.+10     	; 0x2dcc <itoa+0x1c>
    2dc2:	97 fb       	bst	r25, 7
    2dc4:	1e f4       	brtc	.+6      	; 0x2dcc <itoa+0x1c>
    2dc6:	90 95       	com	r25
    2dc8:	81 95       	neg	r24
    2dca:	9f 4f       	sbci	r25, 0xFF	; 255
    2dcc:	64 2f       	mov	r22, r20
    2dce:	77 27       	eor	r23, r23
    2dd0:	0e 94 8d 16 	call	0x2d1a	; 0x2d1a <__udivmodhi4>
    2dd4:	80 5d       	subi	r24, 0xD0	; 208
    2dd6:	8a 33       	cpi	r24, 0x3A	; 58
    2dd8:	0c f0       	brlt	.+2      	; 0x2ddc <itoa+0x2c>
    2dda:	89 5d       	subi	r24, 0xD9	; 217
    2ddc:	81 93       	st	Z+, r24
    2dde:	cb 01       	movw	r24, r22
    2de0:	00 97       	sbiw	r24, 0x00	; 0
    2de2:	a1 f7       	brne	.-24     	; 0x2dcc <itoa+0x1c>
    2de4:	16 f4       	brtc	.+4      	; 0x2dea <itoa+0x3a>
    2de6:	5d e2       	ldi	r21, 0x2D	; 45
    2de8:	51 93       	st	Z+, r21
    2dea:	10 82       	st	Z, r1
    2dec:	c9 01       	movw	r24, r18
    2dee:	0c 94 f9 16 	jmp	0x2df2	; 0x2df2 <strrev>

00002df2 <strrev>:
    2df2:	dc 01       	movw	r26, r24
    2df4:	fc 01       	movw	r30, r24
    2df6:	67 2f       	mov	r22, r23
    2df8:	71 91       	ld	r23, Z+
    2dfa:	77 23       	and	r23, r23
    2dfc:	e1 f7       	brne	.-8      	; 0x2df6 <strrev+0x4>
    2dfe:	32 97       	sbiw	r30, 0x02	; 2
    2e00:	04 c0       	rjmp	.+8      	; 0x2e0a <strrev+0x18>
    2e02:	7c 91       	ld	r23, X
    2e04:	6d 93       	st	X+, r22
    2e06:	70 83       	st	Z, r23
    2e08:	62 91       	ld	r22, -Z
    2e0a:	ae 17       	cp	r26, r30
    2e0c:	bf 07       	cpc	r27, r31
    2e0e:	c8 f3       	brcs	.-14     	; 0x2e02 <strrev+0x10>
    2e10:	08 95       	ret

00002e12 <_exit>:
    2e12:	f8 94       	cli

00002e14 <__stop_program>:
    2e14:	ff cf       	rjmp	.-2      	; 0x2e14 <__stop_program>
